var documenterSearchIndex = {"docs":
[{"location":"coupled_viscoelasticity/#Coupled-Viscoelasticity-and-Single-Phase-Flow-1","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"","category":"section"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"We have considered inverse modeling for viscoelasticity and coupled elasticity and single phase flow inversion. A more complex case is when the constitutive relation is given by the viscoelasticity and the dynamics is governed by the coupled viscoelasticity and single phase flow equation. We consider the same governing equation as the poreelasticity","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"beginaligned\nmathrmdivsigma(u) - b nabla p = 0\nfrac1M fracpartial ppartial t + bfracpartial varepsilon_v(u)partial t - nablacdotleft(frackB_fmunabla pright) = f(xt)\nendaligned","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"with boundary conditions","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"beginaligned\nsigma n = 0quad xin Gamma_N^u qquad u=0 quad xin Gamma_D^u\n-frackB_fmufracpartial ppartial n = 0quad xin Gamma_N^p qquad p=g quad xin Gamma_D^p\nendaligned","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"and the initial condition","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"p(x0) = 0 u(x0) =0 xin Omega","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"The only difference is that the consitutive relation is given by the Maxwell material equation, which has the following form in the discretization (for the definition of H and S, see here)","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"sigma^n+1 = H varepsilon^n+1 + S sigma^n  - Hvarepsilon^n","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"Then the discretization for the mechanics is ","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"int_Omega H varepsilon^n+1  delta varepsilon mathrmdx- int_Omega b p delta u mathrmdx = int_partial Omega mathbftdelta u mathrmds + int_Omega Hvarepsilon^n  deltavarepsilon mathrmd x - int_Omega Ssigma^n  delta varepsilon mathrmd x","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"For the discretization of the fluid equation, see here.","category":"page"},{"location":"coupled_viscoelasticity/#Forward-Simulation-1","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Forward Simulation","text":"","category":"section"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"To have an overview of the viscoelasticiy, we conduct the forward simulation in the injection-production model. An injection well is located on the left while a production well is located on the right. We impose the Dirichlet boundary conditions for u  and no flow boundary conditions for the pressure on four sides. We run the results with Lamé constants lambda=20 and mu=05, and three different viscosity eta = 10000 1, and 01. The case  eta = 10000 corresponds to a nearly linear elastic constitutive relation. The typical characteristics of viscoelasticity in our experiments are that they usually possess larger stresses and smaller displacements. ","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"Description eta=10000 eta=1 eta=01\nPressure (Image: ) (Image: ) (Image: )\nsigma_xx (Image: ) (Image: ) (Image: )\nsigma_xy (Image: ) (Image: ) (Image: )\nsigma_yy (Image: ) (Image: ) (Image: )\nu (Image: ) (Image: ) (Image: )\nv (Image: ) (Image: ) (Image: )\nsigma_xx at the center point (Image: ) (Image: ) (Image: )\nu at the center point (Image: ) (Image: ) (Image: )\nvarepsilon_xx at the center point (Image: ) (Image: ) (Image: )","category":"page"},{"location":"coupled_viscoelasticity/#Inverse-Modeling-1","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Inverse Modeling","text":"","category":"section"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"In the inverse modeling, the initial conditions and boundary conditions are ","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"Here u, sigma, and p are all initialized to zero. \nFixed Dirichlet boundaries for u on the bottom. \nTraction-free boundary conditions (free surface) for u on the other three sides\nNo-flow condition for p on all sides. ","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"We have 5 sets of training data, each corresponds to a Delta production (injection) source with the magnitude 02i, i=1234 and 5​. We show a typical dataset below. ","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"Pressure sigma_xx sigma_yy sigma_xy u v\n(Image: disp_p_inv_visco1.0) (Image: disp_sxx_inv_visco1.0) (Image: disp_syy_inv_visco1.0) (Image: disp_sxy_inv_visco1.0) (Image: disp_u_inv_visco1.0) (Image: disp_v_inv_visco1.0)","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"Displacement sigma_xx at the center point varepsilon_xx  at the center point u at the center point\n(Image: disp_scattered_u) (Image: sigmaxx1.0) (Image: varepsilonxx1.0) (Image: ux1.0)","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"The observation data is the x-direction displacement at all time steps on the surface. We will consider several kinds of inversion. ","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"Parametric inversion. In this case, we assume we already know the form of the consitutitve relation and we only need to estimate mu, lambda and eta. code\nLinear elasticity approximation. In this case, the constitutive relation is assumed to have the linear elasticity form code\nsigma = Hvarepsilon","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"Here H is an unknown SPD matrix. ","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"Direct inversion. The constitutive relation is substituted by ","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"sigma^n+1 = mathcalNN(sigma^n varepsilon^n)","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"where mathcalNN is a neural network. code","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"Implicit inversion. The constitutive relation is subsituted by ","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"sigma^n+1 = mathcalNN(sigma^n varepsilon^n) + Hvarepsilon^n+1","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"where mathcalNN is a neural network and H is an unknown SPD matrix. The advantage of this form is to improve the conditioning of the implicit numerical scheme.  code","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"To evaluate the inverse modeling result, we consider a test dataset which corresponds to the magnitude 0.5 for the Delta sources. We measure the displacement and Von Mises stress. For the first inversion, we report the values. ","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"For the parametric inversion, we have the following result","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"(Image: loss) (Image: s_param) (Image: u_param)\nLoss Function Von Mises Stress Displacement","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"Parameter Initial Guess Estimated True\nmu 1.5 0.49999986292871396 0.5\nlambda 1.5 1.9999997784851993 2.0\neta 1.5 0.9999969780184615 1.0","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"For the other three types of inversion, the results are presented below","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"Reference Linear Elasticity Direct Implicit\n(Image: disp_s_inv_visco_ref) (Image: s_l) (Image: s_di) (Image: s_nn)\n(Image: disp_scattered_u_inv_visco_ref) (Image: u_l) (Image: u_di) (Image: u_nn)","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"The results are reported at 2000-th iteration. In terms of the Von Mises stress, we see that the direct training gives us the best result (note the scale of the colorbar). ","category":"page"},{"location":"coupled_viscoelasticity/#Forward-Simulation-Codes-1","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Forward Simulation Codes","text":"","category":"section"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"using Revise\nusing PoreFlow\nusing PyCall\nusing LinearAlgebra\nusing ADCME\nusing MAT\nusing PyPlot\nnp = pyimport(\"numpy\")\n\n# Domain information \nNT = 50\nΔt = 1/NT\nn = 20\nm = 2*n \nh = 1.0/n \nbdnode = Int64[]\nfor i = 1:m+1\n    for j = 1:n+1\n        if i==1 || i==m+1 || j==1|| j==n+1\n            push!(bdnode, (j-1)*(m+1)+i)\n        end\n    end\nend\n\nis_training = false\nb = 1.0\n\ninvη = 1.0\nif length(ARGS)==1\n    global invη = parse(Float64, ARGS[1])\nend\n\nλ = constant(2.0)\nμ = constant(0.5)\ninvη = constant(invη)\n\niS = tensor(\n    [1+2/3*μ*Δt*invη -1/3*μ*Δt*invη 0.0\n    -1/3*μ*Δt*invη 1+2/3*μ*Δt*invη 0.0 \n    0.0 0.0 1+μ*Δt*invη]\n)\nS = inv(iS)\nH = S * tensor([\n    2μ+λ λ 0.0\n    λ 2μ+λ 0.0\n    0.0 0.0 μ\n])\n\n\nQ = SparseTensor(compute_fvm_tpfa_matrix(m, n, h))\nK = compute_fem_stiffness_matrix(H, m, n, h)\nL = SparseTensor(compute_interaction_matrix(m, n, h))\nM = SparseTensor(compute_fvm_mass_matrix(m, n, h))\nA = [K -b*L'\nb*L/Δt 1/Δt*M-Q]\nA, Abd = fem_impose_coupled_Dirichlet_boundary_condition(A, bdnode, m, n, h)\n# error()\nU = zeros(m*n+2(m+1)*(n+1), NT+1)\nx = Float64[]; y = Float64[]\nfor j = 1:n+1\n    for i = 1:m+1\n        push!(x, (i-1)*h)\n        push!(y, (j-1)*h)\n    end\nend\n    \ninjection = (div(n,2)-1)*m + 3\nproduction = (div(n,2)-1)*m + m-3\n\n\nfunction condition(i, tas...)\n    i<=NT\nend\n\nfunction body(i, tas...)\n    ta_u, ta_ε, ta_σ = tas\n    u = read(ta_u, i)\n    σ0 = read(ta_σ, i)\n    ε0 = read(ta_ε, i)\n    rhs1 = compute_fem_viscoelasticity_strain_energy_term(ε0, σ0, S, H, m, n, h)\n    rhs2 = zeros(m*n)\n    rhs2[injection] += 1.0\n    rhs2[production] -= 1.0\n    rhs2 += b*L*u[1:2(m+1)*(n+1)]/Δt + \n            M * u[2(m+1)*(n+1)+1:end]/Δt\n    rhs = [rhs1;rhs2]\n    o = A\\rhs \n\n    ε = eval_strain_on_gauss_pts(o, m, n, h)\n    σ = σ0*S + (ε - ε0)*H\n    ta_u = write(ta_u, i+1, o)\n    ta_ε = write(ta_ε, i+1, ε)\n    ta_σ = write(ta_σ, i+1, σ)\n    i+1, ta_u, ta_ε, ta_σ\nend\n\ni = constant(1, dtype=Int32)\nta_u = TensorArray(NT+1); ta_u = write(ta_u, 1, constant(zeros(2(m+1)*(n+1)+m*n)))\nta_ε = TensorArray(NT+1); ta_ε = write(ta_ε, 1, constant(zeros(4*m*n, 3)))\nta_σ = TensorArray(NT+1); ta_σ = write(ta_σ, 1, constant(zeros(4*m*n, 3)))\n_, u_out, ε_out, σ_out = while_loop(condition, body, [i, ta_u, ta_ε, ta_σ])\nu_out = stack(u_out)\nu_out.set_shape((NT+1, size(u_out,2)))\nσ_out = stack(σ_out)\nε_out = stack(ε_out)\n\nupper_idx = Int64[]\nfor i = 1:m+1\n    push!(upper_idx, (div(n,3)-1)*(m+1)+i)\n    push!(upper_idx, (div(n,3)-1)*(m+1)+i + (m+1)*(n+1))\nend\nfor i = 1:m \n    push!(upper_idx, (div(n,3)-1)*m+i+2(m+1)*(n+1))\nend\n\nsess = Session(); init(sess)\nU, Sigma, Varepsilon, ev = run(sess, [u_out,σ_out,ε_out, invη])\nvisualize_displacement(U'|>Array, m, n, h, name=\"_visco$ev\")\nvisualize_pressure(U'|>Array, m, n, h, name=\"_visco$ev\")\nvisualize_scattered_displacement(U'|>Array, m, n, h, name=\"_visco$ev\")\nvisualize_stress(Sigma[:,:,1]'|>Array, m, n, h, name=\"xx_visco$ev\")\nvisualize_stress(Sigma[:,:,2]'|>Array, m, n, h, name=\"yy_visco$ev\")\nvisualize_stress(Sigma[:,:,3]'|>Array, m, n, h, name=\"xy_visco$ev\")\n\n\nidx = m÷2 + (n÷2)*m\nclose(\"all\")\nplot(LinRange(0,1.0, NT+1),Sigma[:,4*(idx-1)+1,1])\nxlabel(\"time\")\nylabel(\"\\$\\\\sigma_{xx}\\$\")\nsavefig(\"sigmaxx$ev.jpeg\")\n\nclose(\"all\")\nplot(LinRange(0,1.0, NT+1),Varepsilon[:,4*(idx-1)+1,1])\nxlabel(\"time\")\nylabel(\"\\$\\\\varepsilon_{xx}\\$\")\nsavefig(\"varepsilonxx$ev.jpeg\")\n\nidx = m÷2 + (n÷2)*(m+1)\nclose(\"all\")\nplot(LinRange(0,1.0, NT+1),U[:,4*(idx-1)+1])\nxlabel(\"time\")\nylabel(\"\\$u_x\\$\")\nsavefig(\"ux$ev.jpeg\")","category":"page"},{"location":"inverse/#Inverse-Modeling-for-Coupled-Geomechanics-and-Single-Phase-Flow-1","page":"Inverse Modeling for Coupled Geomechanics and Single Phase Flow","title":"Inverse Modeling for Coupled Geomechanics and Single Phase Flow","text":"","category":"section"},{"location":"inverse/#","page":"Inverse Modeling for Coupled Geomechanics and Single Phase Flow","title":"Inverse Modeling for Coupled Geomechanics and Single Phase Flow","text":"We have coupled geomechanics and single phase flow in Coupled Geomechanics and Single Phase Flow. Now we consider the inverse modeling: assuming that the plane stress elasticity matrix H is unknown, we want to estimate H based on the observation data– the displacement and velocity on a line of sensors.","category":"page"},{"location":"inverse/#","page":"Inverse Modeling for Coupled Geomechanics and Single Phase Flow","title":"Inverse Modeling for Coupled Geomechanics and Single Phase Flow","text":"In the inverse modeling code, we need to replace for loops by while_loop syntax. Additionally, we need to using Variable(H) to mark H as trainable. We run the L-BFGS-B algorithm and obtain the following loss function profile and estimated H. ","category":"page"},{"location":"inverse/#","page":"Inverse Modeling for Coupled Geomechanics and Single Phase Flow","title":"Inverse Modeling for Coupled Geomechanics and Single Phase Flow","text":"u displacement v displacement Pressure\n(Image: ) (Image: ) (Image: )","category":"page"},{"location":"inverse/#","page":"Inverse Modeling for Coupled Geomechanics and Single Phase Flow","title":"Inverse Modeling for Coupled Geomechanics and Single Phase Flow","text":"Code","category":"page"},{"location":"inverse/#","page":"Inverse Modeling for Coupled Geomechanics and Single Phase Flow","title":"Inverse Modeling for Coupled Geomechanics and Single Phase Flow","text":"(Image: )","category":"page"},{"location":"inverse/#","page":"Inverse Modeling for Coupled Geomechanics and Single Phase Flow","title":"Inverse Modeling for Coupled Geomechanics and Single Phase Flow","text":"Initial Guess Estimated H Reference H\nbeginbmatrix1    0  0  0  1   0  0      0      1endbmatrix beginbmatrix113961     0398872     -235165times10^-6 0398842    113959      439933times10^-6 374498times10^-6  238203times10^-6   0740731endbmatrix beginbmatrix11396    039886  00  039886  11396   00  00      00      0740741endbmatrix","category":"page"},{"location":"api/#API-1","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Data-Structures-1","page":"API","title":"Data Structures","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"PoreData","category":"page"},{"location":"api/#PoreFlow.PoreData","page":"API","title":"PoreFlow.PoreData","text":"PoreData is a collection of physical parameters for coupled geomechanics and flow simulation\n\nM: Biot modulus\nb: Biot coefficient\nρb: Bulk density\nρf: Fluid density\nkp: Permeability\nE: Young modulus\nν: Poisson ratio\nμ: Fluid viscosity\nPi: Initial pressure\nBf: formation volume, B_f=fracrho_f0rho_f\ng: Gravity acceleration\n\n\n\n\n\n","category":"type"},{"location":"api/#Matrix-Assembling-Functions-1","page":"API","title":"Matrix Assembling Functions","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"compute_fem_stiffness_matrix\ncompute_interaction_matrix\ncompute_fvm_tpfa_matrix\ncompute_fem_mass_matrix\ncompute_fvm_mass_matrix\ncompute_fem_mass_matrix1\ncompute_fem_stiffness_matrix1","category":"page"},{"location":"api/#PoreFlow.compute_fem_stiffness_matrix","page":"API","title":"PoreFlow.compute_fem_stiffness_matrix","text":"compute_fem_stiffness_matrix(K::Array{Float64,2}, m::Int64, n::Int64, h::Float64)\n\nComputes the term \n\nint_Adelta varepsilon sigmamathrmdx = int_A u_AB^TKBdelta u_Amathrmdx\n\nwhere the constitutive relation is given by \n\nbeginbmatrixsigma_xxsigma_yysigma_xyendbmatrix = K beginbmatrixvarepsilon_xxvarepsilon_yy2varepsilon_xyendbmatrix\n\n\n\n\n\ncompute_fem_stiffness_matrix(hmat::PyObject,m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel. hmat has one of the following sizes \n\n3times 3\n4mn times 3 times 3\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_interaction_matrix","page":"API","title":"PoreFlow.compute_interaction_matrix","text":"compute_interaction_matrix(m::Int64, n::Int64, h::Float64)\n\nComputes the interaction term \n\nint_A p delta varepsilon_vmathrmdx = int_A p 110B^Tdelta u_Amathrmdx\n\nThe output is a mn times 2(m+1)(n+1) matrix. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fvm_tpfa_matrix","page":"API","title":"PoreFlow.compute_fvm_tpfa_matrix","text":"compute_fvm_tpfa_matrix(m::Int64, n::Int64, h::Float64)\n\nComputes the term with two-point flux approximation \n\nint_A_i Delta p mathrmdx = sum_j=1^n_mathrmfaces (p_j-p_i)\n\n(Image: )\n\nwarning: Warning\nNo flow boundary condition is assumed. \n\n\n\n\n\ncompute_fvm_tpfa_matrix(K::Array{Float64}, m::Int64, n::Int64, h::Float64)\n\nComputes the term with two-point flux approximation with distinct permeability at each cell\n\nint_A_i K_i Delta p mathrmdx = K_isum_j=1^n_mathrmfaces (p_j-p_i)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_mass_matrix","page":"API","title":"PoreFlow.compute_fem_mass_matrix","text":"compute_fem_mass_matrix(m::Int64, n::Int64, h::Float64)\n\nComputes the finite element mass matrix \n\nint_Omega u delta u mathrmdx\n\nThe matrix size is 2(m+1)(n+1) times 2(m+1)(n+1).\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fvm_mass_matrix","page":"API","title":"PoreFlow.compute_fvm_mass_matrix","text":"compute_fvm_mass_matrix(m::Int64, n::Int64, h::Float64)\n\nReturns the FVM mass matrix \n\nint_A_i p_i mathrmdx = h^2 p_i \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_mass_matrix1","page":"API","title":"PoreFlow.compute_fem_mass_matrix1","text":"compute_fem_mass_matrix1(ρ::Array{Float64}, m::Int64, n::Int64, h::Float64)\n\nComputes the mass matrix for a scalar value u\n\nint_A rho u delta u mathrmd x\n\nThe output is a (m+1)*(n+1) sparse matrix. \n\n\n\n\n\ncompute_fem_mass_matrix1(m::Int64, n::Int64, h::Float64)\n\nComputes the mass matrix for a scalar value u\n\n\\int_A u \\delta u \\mathrm{d} x\n\nThe output is a (m+1)*(n+1) sparse matrix. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_stiffness_matrix1","page":"API","title":"PoreFlow.compute_fem_stiffness_matrix1","text":"compute_fem_stiffness_matrix1(K::Array{Float64,2}, m::Int64, n::Int64, h::Float64)\n\nComputes the term \n\nint_A (K nabla u) cdot nabla delta u mathrmdx = int_A u_A B^T K B delta u_Amathrmdx\n\nReturns a (m+1)times (n+1) matrix\n\n\n\n\n\n","category":"function"},{"location":"api/#Vector-Assembling-Functions-1","page":"API","title":"Vector Assembling Functions","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"compute_fem_source_term\ncompute_fvm_source_term\ncompute_fvm_mechanics_term\ncompute_fem_normal_traction_term\ncompute_von_mises_stress_term\ncompute_fem_source_term1\ncompute_fem_flux_term1\ncompute_strain_energy_term\ncompute_fem_viscoelasticity_strain_energy_term","category":"page"},{"location":"api/#PoreFlow.compute_fem_source_term","page":"API","title":"PoreFlow.compute_fem_source_term","text":"compute_fem_source_term(f1::Array{Float64}, f2::Array{Float64},\nm::Int64, n::Int64, h::Float64)\n\nComputes the term \n\nint_Omega fcdotdelta u dx\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fvm_source_term","page":"API","title":"PoreFlow.compute_fvm_source_term","text":"compute_fvm_source_term(f::Array{Float64}, m::Int64, n::Int64, h::Float64)\n\nComputes the source term \n\nint_A_i fmathrmdx\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fvm_mechanics_term","page":"API","title":"PoreFlow.compute_fvm_mechanics_term","text":"compute_fvm_mechanics_term(u::Array{Float64}, m::Int64, n::Int64, h::Float64)\n\nComputes the mechanic interaction term \n\nint_A_i varepsilon_vmathrmdx\n\nHere \n\nvarepsilon_v = mathrmtr varepsilon = varepsilon_xx + varepsilon_yy\n\nNumerically, we have \n\nvarepsilon_v = 1  1  0 B^T delta u_A\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_normal_traction_term","page":"API","title":"PoreFlow.compute_fem_normal_traction_term","text":"compute_fem_normal_traction_term(t::Array{Float64,1}, bdedge::Array{Int64},\nm::Int64, n::Int64, h::Float64)\ncompute_fem_normal_traction_term(t::Float64, bdedge::Array{Int64},\nm::Int64, n::Int64, h::Float64)\n\nComputes the normal traction term \n\nint_Gamma t(mathbfn)cdotdelta u mathrmd\n\nHere t(mathbfn)parallelmathbfn points outward to the domain and the magnitude is given by t.  bdedge is a Ntimes2 matrix and each row denotes the indices of two endpoints of the boundary edge. \n\nSee compute_fem_traction_term for graphical illustration.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_von_mises_stress_term","page":"API","title":"PoreFlow.compute_von_mises_stress_term","text":"compute_von_mises_stress_term(K::Array{Float64}, u::Array{Float64}, m::Int64, n::Int64, h::Float64)\n\nCompute the von Mises stress on the Gauss quadrature nodes. \n\n\n\n\n\ncompute_von_mises_stress_term(Se::Array{Float64,2},  m::Int64, n::Int64, h::Float64)\n\nSe is a 4mntimes3 array that stores the stress data at each Gauss point. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_source_term1","page":"API","title":"PoreFlow.compute_fem_source_term1","text":"compute_fem_source_term1(f::Array{Float64},\nm::Int64, n::Int64, h::Float64)\n\nComputes the term \n\nint_Omega f delta u dx\n\nReturns a (m+1)times (n+1) vector. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_flux_term1","page":"API","title":"PoreFlow.compute_fem_flux_term1","text":"compute_fem_flux_term1(t::Array{Float64},\nbdedge::Array{Int64,2}, m::Int64, n::Int64, h::Float64)\n\nComputes the traction term \n\nint_Gamma q delta u mathrmd\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_strain_energy_term","page":"API","title":"PoreFlow.compute_strain_energy_term","text":"compute_strain_energy_term(S::Array{Float64, 2}, m::Int64, n::Int64, h::Float64)\n\nComputes the strain energy \n\nint_A sigma  delta varepsilon mathrmdx\n\nwhere sigma is provided by S, a 4mn times 3 matrix.  The values sigma_11 sigma_22 sigma_12 are defined on 4 Gauss points per element. \n\n\n\n\n\ncompute_strain_energy_term(S::PyObject,m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_viscoelasticity_strain_energy_term","page":"API","title":"PoreFlow.compute_fem_viscoelasticity_strain_energy_term","text":"compute_fem_viscoelasticity_strain_energy_term(ε0, σ0, ε, A, B, m, n, h)\n\nGiven the constitutive relation\n\nsigma^n+1 = S sigma^n + H (varepsilon^n+1-varepsilon^n)\n\nthis function computes \n\nint_A sigmadelta varepsilonmathrmd x = underbraceint_A  B varepsilon^n+1delta varepsilonmathrmd x  + underbrace int_A  A sigma^n+1delta varepsilonmathrmd x - int_A  B varepsilon^n+1delta varepsilonmathrmd x _f\n\nand returns f\n\n\n\n\n\n","category":"function"},{"location":"api/#Evaluation-Functions-1","page":"API","title":"Evaluation Functions","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"eval_f_on_gauss_pts\neval_f_on_boundary_node\neval_f_on_boundary_edge\neval_strain_on_gauss_pts","category":"page"},{"location":"api/#PoreFlow.eval_f_on_gauss_pts","page":"API","title":"PoreFlow.eval_f_on_gauss_pts","text":"eval_f_on_gauss_pts(f::Function, m::Int64, n::Int64, h::Float64)\n\nEvaluates f at Gaussian points and return the result as 4mn vector out (4 Gauss points per element)\n\n(Image: )\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.eval_f_on_boundary_node","page":"API","title":"PoreFlow.eval_f_on_boundary_node","text":"eval_f_on_boundary_node(f::Function, bdnode::Array{Int64}, m::Int64, n::Int64, h::Float64)\n\nReturns a vector of the same length as bdnode whose entries corresponding to bdnode nodes are filled with values computed from f.\n\nf has the following signature \n\nf(x::Float64, y::Float64)::Float64\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.eval_f_on_boundary_edge","page":"API","title":"PoreFlow.eval_f_on_boundary_edge","text":"eval_f_on_boundary_edge(f::Function, bdedge::Array{Int64,2}, m::Int64, n::Int64, h::Float64)\n\nReturns a vector of the same length as bdedge whose entries corresponding to bdedge nodes are filled with values computed from f.\n\nf has the following signature \n\nf(x::Float64, y::Float64)::Float64\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.eval_strain_on_gauss_pts","page":"API","title":"PoreFlow.eval_strain_on_gauss_pts","text":"eval_strain_on_gauss_pts(u::Array{Float64}, m::Int64, n::Int64, h::Float64)\n\nComputes the strain on Gauss points.  Returns a 4mntimes3 matrix, where each row denotes (varepsilon_11 varepsilon_22 2varepsilon_12) at the corresponding Gauss point. \n\n\n\n\n\neval_strain_on_gauss_pts(u::PyObject, m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel.\n\n\n\n\n\n","category":"function"},{"location":"api/#Visualization-1","page":"API","title":"Visualization","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"visualize_pressure\nvisualize_displacement\nvisualize_stress\nvisualize_von_mises_stress","category":"page"},{"location":"api/#PoreFlow.visualize_pressure","page":"API","title":"PoreFlow.visualize_pressure","text":"visualize_pressure(U::Array{Float64, 2}, m::Int64, n::Int64, h::Float64; name::String=\"\")\n\nVisualizes pressure. U is the solution vector. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.visualize_displacement","page":"API","title":"PoreFlow.visualize_displacement","text":"visualize_displacement(U::Array{Float64, 2}, m::Int64, n::Int64, h::Float64; name::String=\"\")\n\nVisualizes displacement. U is the solution vector. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.visualize_stress","page":"API","title":"PoreFlow.visualize_stress","text":"visualize_stress(K::Array{Float64, 2}, U::Array{Float64, 2}, m::Int64, n::Int64, h::Float64; name::String=\"\")\n\nVisualizes displacement. U is the solution vector, K is the elasticity matrix (3times 3).\n\n\n\n\n\nvisualize_stress(Se::Array{Float64, 2}, m::Int64, n::Int64, h::Float64; name::String=\"\")\n\nVisualizes the Von Mises stress. Se is the Von Mises at the cell center. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.visualize_von_mises_stress","page":"API","title":"PoreFlow.visualize_von_mises_stress","text":"visualize_von_mises_stress(Se::Array{Float64, 2}, m::Int64, n::Int64, h::Float64; name::String=\"\")\n\nVisualizes the Von Mises stress. \n\n\n\n\n\n","category":"function"},{"location":"api/#Misc-1","page":"API","title":"Misc","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"fem_impose_Dirichlet_boundary_condition\nfem_impose_Dirichlet_boundary_condition1\ntrim_coupled\ncompute_elasticity_tangent\ncoupled_impose_pressure","category":"page"},{"location":"api/#PoreFlow.fem_impose_Dirichlet_boundary_condition","page":"API","title":"PoreFlow.fem_impose_Dirichlet_boundary_condition","text":"fem_impose_Dirichlet_boundary_condition(A::SparseMatrixCSC{Float64,Int64}, \nbd::Array{Int64}, m::Int64, n::Int64, h::Float64)\n\nImposes the Dirichlet boundary conditions on the matrix A.\n\nReturns 2 matrix, \n\nbeginbmatrix\nA_BB  A_BI  \nA_IB  A_II \nendbmatrix Rightarrow beginbmatrix\nI  0  \n0  A_II \nendbmatrix quad beginbmatrix\n0  \nA_IB \nendbmatrix\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.fem_impose_Dirichlet_boundary_condition1","page":"API","title":"PoreFlow.fem_impose_Dirichlet_boundary_condition1","text":"fem_impose_Dirichlet_boundary_condition1(A::SparseMatrixCSC{Float64,Int64}, \n    bd::Array{Int64}, m::Int64, n::Int64, h::Float64)\n\nImposes the Dirichlet boundary conditions on the matrix A Returns 2 matrix, \n\nbeginbmatrix\nA_BB  A_BI  \nA_IB  A_II \nendbmatrix Rightarrow beginbmatrix\nI  0  \n0  A_II \nendbmatrix quad beginbmatrix\n0  \nA_IB \nendbmatrix\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.trim_coupled","page":"API","title":"PoreFlow.trim_coupled","text":"trim_coupled(pd::PoreData, Q::SparseMatrixCSC{Float64,Int64}, L::SparseMatrixCSC{Float64,Int64}, \nM::SparseMatrixCSC{Float64,Int64}, \nbd::Array{Int64}, Δt::Float64, m::Int64, n::Int64, h::Float64)\n\nAssembles matrices from mechanics and flow and assemble the coupled matrix \n\nbeginbmatrix\nhat M  -hat L^T\nhat L  hat Q\nendbmatrix\n\nQ is obtained from compute_fvm_tpfa_matrix, M is obtained from compute_fem_stiffness_matrix, and L is obtained from compute_interaction_matrix.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_elasticity_tangent","page":"API","title":"PoreFlow.compute_elasticity_tangent","text":"compute_elasticity_tangent(E::Float64, ν::Float64)\n\nComputes the elasticity matrix for 2D plane strain\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.coupled_impose_pressure","page":"API","title":"PoreFlow.coupled_impose_pressure","text":"coupled_impose_pressure(A::SparseMatrixCSC{Float64,Int64}, pnode::Array{Int64}, \nm::Int64, n::Int64, h::Float64)\n\nReturns a trimmed matrix.\n\n\n\n\n\n","category":"function"},{"location":"staticelasticity/#Static-Linear-Elasticity-1","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"","category":"section"},{"location":"staticelasticity/#","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"The governing equation for static linear elasticity is","category":"page"},{"location":"staticelasticity/#","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"beginaligned\nmathrmdiv sigma(u) = f(x)  xin Omega \nsigma(u) = Cvarepsilon(u) \nu(x) = u_0(x)  xin Gamma_u\nsigma(x) n(x) = t(x)  xin Gamma_n\nendaligned","category":"page"},{"location":"staticelasticity/#","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"Here varepsilon(u) = frac12(nabla u + (nabla u)^T) is the Cauchy tensor, Gamma_u cup Gamma_n = Omega, Gamma_u cap Gamma_n = emptyset. The weak formulation is: finding u such that ","category":"page"},{"location":"staticelasticity/#","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"int_Omega delta varepsilon(u)  C varepsilon(u)mathrmd x = int_Gamma_n tcdotdelta u mathrmds - int_Omega fcdot delta u mathrmdx","category":"page"},{"location":"staticelasticity/#","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"We consider the manufactured solution ","category":"page"},{"location":"staticelasticity/#","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"u(x) = beginbmatrix\nx_1^2+x_2^2\nx_1^2-x_2^2\nendbmatrix","category":"page"},{"location":"staticelasticity/#","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"and ","category":"page"},{"location":"staticelasticity/#","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"beginbmatrix\nsigma_xx\nsigma_yy\nsigma_xy\nendbmatrix = beginbmatrix\n1  0  0\n0  1  0\n0  0  12\nendbmatrixbeginbmatrix\nvarepsilon_xx\nvarepsilon_yy\n2varepsilon_xy\nendbmatrix","category":"page"},{"location":"staticelasticity/#","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"then we have ","category":"page"},{"location":"staticelasticity/#","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"f(x) = beginbmatrix\n3\n-1\nendbmatrix","category":"page"},{"location":"staticelasticity/#","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"We let Gamma_n be the top boundary. ","category":"page"},{"location":"staticelasticity/#","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"bdedge = []\nfor i = 1:m \n    push!(bdedge, [i i+1])\nend\nbdedge = vcat(bdedge...)\n\nbdnode = Int64[]\nfor j = 1:n+1\n    push!(bdnode, (j-1)*(m+1)+1)\n    push!(bdnode, (j-1)*(m+1)+m+1)\nend\nfor i = 2:m\n    push!(bdnode, n*(m+1)+i)\nend\n\nF1 = eval_f_on_gauss_pts((x,y)->3.0, m, n, h)\nF2 = eval_f_on_gauss_pts((x,y)->-1.0, m, n, h)\nF = compute_fem_source_term(F1, F2, m, n, h)\n\nt1 = eval_f_on_boundary_edge((x,y)->-x-y, bdedge, m, n, h)\nt2 = eval_f_on_boundary_edge((x,y)->2y, bdedge, m, n, h)\nT = compute_fem_traction_term([t1 t2], bdedge, m, n, h)\n\nD = diagm(0=>[1,1,0.5])\nK = compute_fem_stiffness_matrix(D, m, n, h)\nrhs = T - F \nbdval = [eval_f_on_boundary_node((x,y)->x^2+y^2, bdnode, m, n, h);\n        eval_f_on_boundary_node((x,y)->x^2-y^2, bdnode, m, n, h)]\nrhs[[bdnode;bdnode .+ (m+1)*(n+1)]] = bdval\nK, Kbd = fem_impose_Dirichlet_boundary_condition(K, bdnode, m, n, h)\nu = K\\(rhs-Kbd*bdval)\nX, Y, U, V = plot_u(u, m, n, h)\n\nfigure(figsize=[10,4])\nsubplot(121)\npcolormesh(X, Y, (@. X^2+Y^2-U), alpha=0.6); xlabel(\"x\"); ylabel(\"y\"); title(\"Error for u\")\ncolorbar()\nsubplot(122)\npcolormesh(X, Y, (@. X^2-Y^2-V), alpha=0.6); xlabel(\"x\"); ylabel(\"y\"); title(\"Error for v\")\ncolorbar()","category":"page"},{"location":"staticelasticity/#","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"(Image: )","category":"page"},{"location":"coupled/#Coupled-Geomechanics-and-Single-Phase-Flow-1","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"","category":"section"},{"location":"coupled/#Mathematical-Formulation-1","page":"Coupled Geomechanics and Single Phase Flow","title":"Mathematical Formulation","text":"","category":"section"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"The governing equation for mechanical deformation of the solid-fluid system is ","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"boxedmathrmdiv sigma + rho_b g = 0","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"where mathrmdiv is the divergence operator, sigma is the Cauchy total-stress ","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"sigma = beginbmatrix\nsigma_xx  sigma_xy\nsigma_xy  sigma_yy\nendbmatrix","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"and ginmathbbR^2 is the gravity vector, rho_b=phi rho_f + (1-phi)rho_s  is the bulk density, rho_f is total fluid density, rho_s is the density of the solid phase and phi is the true porosity. ","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"The stress-strain relation for linear poroelasticity takes the form ","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"sigma = sigma - bpmathbfIquad sigma = beginbmatrix\nsigma_xx  sigma_xy\nsigma_xy  sigma_yy\nendbmatrix\nquadbeginbmatrix\ndeltasigma_xxdeltasigma_yydeltasigma_xy\nendbmatrix = Hbeginbmatrix\ndeltavarepsilon_xxdeltavarepsilon_yy2deltavarepsilon_xy\nendbmatrix","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"where mathbfI is the identity matrix, p is the pressure, b is the Biot coefficient, D is the elasticity matrix","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"H = fracE(1-nu^2)beginbmatrix\n1  nu 0\nnu  1  0\n0  0  1-nu\nendbmatrix","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Here E is the Young modulus,  nu is the Poisson ratio and  varepsilon is the strain","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"varepsilon = beginbmatrix\nvarepsilon_xx  varepsilon_xy\nvarepsilon_xy  varepsilon_yy\nendbmatrix","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"info: Info\nThe relation between sigma and varepsilon may be nonlinear; that's why we only write delta sigma in terms of delta varepsilon. ","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"The fluid mass convervation in terms of pressure and volumetric strain is given by ","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"boxedfrac1Mfracpartial ppartial t + bfracpartial varepsilon_vpartial t + mathrmdivmathrmv = f","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"where varepsilon_v = mathrmtr varepsilon, f is a volumetric source term and ","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"mathbfv = -frac1B_ffrackmu(nabla p - rho_f g)","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"where k is the absolute permeability tensor, mu is the fluid viscosity and B_f is the formation volume factor of the fluid. ","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"The mechanical equation and fluid equation are coupled through p and varepsilon. In the drained split scheme, in each step p is kept fixed while solving the mechanics equation and then the fluid equation is solved keeping varepsilon fixed. The drained scheme can be viewed as a Jacobian iteration of the fully coupled system. ","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"note: Note\nThe linear poroelasticity equations with g=0 can be expressed as [linear]beginaligned\nmathrmdivsigma(u) - b nabla p = 0\nfrac1M fracpartial ppartial t + bfracpartial varepsilon_v(u)partial t - nablacdotleft(frackB_fmunabla pright) = f(xt)\nendaligned​with boundary conditionsbeginaligned\nsigma n = 0quad xin Gamma_N^u qquad u=0 quad xin Gamma_D^u\n-frackB_fmufracpartial ppartial n = 0quad xin Gamma_N^p qquad p=g quad xin Gamma_D^p\nendalignedand the initial conditionp(x0) = p_0 u(x0) =0 xin Omega","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"[linear]: Kolesov, Alexandr E., Petr N. Vabishchevich, and Maria V. Vasilyeva. \"Splitting schemes for poroelasticity and thermoelasticity problems.\" Computers & Mathematics with Applications 67.12 (2014): 2185-2198.","category":"page"},{"location":"coupled/#Numerical-Discretization-1","page":"Coupled Geomechanics and Single Phase Flow","title":"Numerical Discretization","text":"","category":"section"},{"location":"coupled/#Mechanics-1","page":"Coupled Geomechanics and Single Phase Flow","title":"Mechanics","text":"","category":"section"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"We discretize the domain 0(n-1)htimes 0 (m-1)h uniformly with step size h.","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"(Image: )","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"The finite element method is usually used to solve the mechanics equation, whose discretization reads","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"int_Omega delta varepsilon sigmamathrmdx - int_Omega b p delta varepsilon_vmathrmdx = int_Gamma tcdotdelta umathrmds + int_Omega rho_b gcdotdelta u dx","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"where t = sigma n = sigma n - bpn, Gamma is the part of partial Omega with external traction,  and n is the unit normal vector pointing outwards. One each element A, define u_A as the nodal values of the basis functions whose supports overlap A, then the strain at (xy) can be expressed as (see the figure for illustration)","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"varepsilon_A = Bu_A quad varepsilon_A =beginbmatrix\nvarepsilon_xx\nvarepsilon_yy\n2varepsilon_xy\nendbmatrixquad\nu_A = beginbmatrix\nu_1\nu_2\nu_3\nu_4\nv_1\nv_2\nv_3\nv_4\nendbmatrix","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"where ","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"B = beginbmatrix\nfracpartial N_1partial x  fracpartial N_2partial x  fracpartial N_3partial x  fracpartial N_4partial x  0  0  0  0\n0  0  0  0  fracpartial N_1partial y  fracpartial N_2partial y  fracpartial N_3partial y  fracpartial N_4partial y\nfracpartial N_1partial y  fracpartial N_2partial y  fracpartial N_3partial y  fracpartial N_4partial y  fracpartial N_1partial x  fracpartial N_2partial x  fracpartial N_3partial x  fracpartial N_4partial x\nendbmatrix = beginbmatrix\n-frac1-etahfrac1-etah -fracetah  fracetah  0  0  0  0\n0  0  0  0  -frac1-xih  -fracxih  frac1-xih  fracxih\n-frac1-xih  -fracxih  frac1-xih  fracxih  -frac1-etahfrac1-etah -fracetah  fracetah\nendbmatrix","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"and","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"xi = fracx-x_0hquad eta = fracy-y_0h","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"(Image: )","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"The terms in the weak form can be expressed as ","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"int_Adelta varepsilon sigmamathrmdx = int_A u_AB^TDBdelta u_Amathrmdx","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"int_A b p delta varepsilon_vmathrmdx = int_A bp 110B^Tdelta u_Amathrmdx","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Typically, the integration is computed using Gauss quadrature; for example, we have","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"int_A u_AB^TDBdelta u_Amathrmdx = u_A leftsum_i=1^n_g B(xi_i eta_i)^T DB(xi_i eta_i)h^2w_irightdelta u_A","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"where (x_i eta_i) are Gauss quadrature points and w_i is the corresponding weight. ","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"note: Note\nWe have the following convention for bdnode and bdedge, which denote the Dirichlet boundary conditions and the Neumann boundary conditions:bdnodein mathbfR^d and each entry in bdnode represents the node index. The corresponding row and column indices can be retrieved with femidx.\nbdedgein mathbfR^dtimes 2 and each row in bdedge represents indices of two end points of the edge. The corresponding cell row and column can be retrieved with fvmidx.","category":"page"},{"location":"coupled/#Fluid-1","page":"Coupled Geomechanics and Single Phase Flow","title":"Fluid","text":"","category":"section"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"The fluid equation is discretized using finite volume method. ","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"int_A_i frac1Mfracp_i^n+1 - p_i^nDelta t mathrmdx + int_A_i b fracvarepsilon_v^n+1-varepsilon_v^nDelta t mathrmd x + int_A_i mathrmdivmathbfvmathrmdx = int_A_i fmathrmdx","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"For the divergence term, we use the two-point flux approximation and we have (assuming k is a constant scalar)","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"int_A_i mathrmdivmathbfv mathrmdx = -frackB_fmusum_j=1^n_mathrmfaces (q_j-q_i) = -frackB_fmusum_j=1^n_mathrmfaces (p_j^n+1 - p_i^n+1) + frackrho_fgB_fmusum_j=1^n_mathrmfaces (y_j-y_i)","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"where","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"q = p^n+1 - rho_fgy","category":"page"},{"location":"coupled/#Initial-and-Boundary-Conditions-1","page":"Coupled Geomechanics and Single Phase Flow","title":"Initial and Boundary Conditions","text":"","category":"section"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"For the mechanial problem we consider","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Prescribed displacement: u = bar u; or\nPrescribed traction: sigmacdot n=bar t (also called overburden).","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"For the flow problem we consider","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Prescribed pressure: p=bar p; or\nPrescribed volumetric flux: mathbfvcdot n=bar v (called no flow if bar v=0).","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"The initial displacement and strains are zero. The initial pressure is prescribed. ","category":"page"},{"location":"coupled/#Verification-1","page":"Coupled Geomechanics and Single Phase Flow","title":"Verification","text":"","category":"section"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"To verify our numerical scheme, we consider manufactured solution u(xy) = beginbmatrix x^2+y^2\nx^2-y^2 endbmatrixtquad p(xy) = x^2y^2(1-x)^2(1-y)^2e^-t","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Then we have","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"beginaligned\nf(xyt)= (-x^2y^2(x - 1)^2(y - 1)^2 - 2x^2y^2(x - 1)^2 - 2x^2y^2(y - 1)^2 - 8x^2y(x - 1)^2(y - 1) - 2x^2(x - 1)^2(y - 1)^2 - 8xy^2(x - 1)(y - 1)^2 - 2y^2(x - 1)^2(y - 1)^2 + 2(x - y)exp(t))exp(-t)\ng(xyt)= beginbmatrix\n3t-2xe^-t\n-t + 2ye^-t\nendbmatrix\nendaligned","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Description u displacement v displacement Pressure\nNumerical Result (Image: disp_u_out) (Image: disp_v_out) (Image: disp_p_out)\nError (Image: disp_u_diff) (Image: disp_v_diff) (Image: disp_p_diff)","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Code","category":"page"},{"location":"coupled/#Benchmarks-1","page":"Coupled Geomechanics and Single Phase Flow","title":"Benchmarks","text":"","category":"section"},{"location":"coupled/#Flooding-1","page":"Coupled Geomechanics and Single Phase Flow","title":"Flooding","text":"","category":"section"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Code","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"u displacement v displacement Pressure Von Mises Stress\n(Image: disp_u_flood) (Image: disp_v_flood) (Image: disp_p_flood) (Image: )","category":"page"},{"location":"coupled/#Injection-Production-in-Homogenious-Media-1","page":"Coupled Geomechanics and Single Phase Flow","title":"Injection-Production in Homogenious Media","text":"","category":"section"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Code","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"u displacement v displacement Pressure\n(Image: disp_u_flood) (Image: disp_v_flood) (Image: disp_p_flood)","category":"page"},{"location":"coupled/#Injection-Production-in-Homogenious-Media-and-with-J2-plasticity-1","page":"Coupled Geomechanics and Single Phase Flow","title":"Injection-Production in Homogenious Media and with J2 plasticity","text":"","category":"section"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Code","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Description u displacement v displacement Pressure\nK = 05 sigma_Y = 03 (Image: ) (Image: ) (Image: )\nK = 0 sigma_Y = 03 (Image: ) (Image: ) (Image: )\nK = 05 sigma_Y = 10 (Image: ) (Image: ) (Image: )","category":"page"},{"location":"coupled/#Injection-Production-in-Heterogenious-Media-1","page":"Coupled Geomechanics and Single Phase Flow","title":"Injection-Production in Heterogenious Media","text":"","category":"section"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Code","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"u displacement v displacement Pressure\n(Image: disp_u_flood) (Image: disp_v_flood) (Image: disp_p_flood)","category":"page"},{"location":"plasticity/#Plasticity-1","page":"Plasticity","title":"Plasticity","text":"","category":"section"},{"location":"plasticity/#Plasticity-Theory-1","page":"Plasticity","title":"Plasticity Theory","text":"","category":"section"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"The constitutive theory is about relating stress sigma and strain varepsilon. ","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"The total strain varepsilon can be decomposed into ","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"varepsilon = varepsilon^p + varepsilon^e","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"The constitutive relation must characterize the relation between the stress varepsilon for both varepsilon^p and varepsilon^e . The constitutive law for varepsilon^e is linear, i.e., ","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"sigma = Cvarepsilon^eLeftrightarrowvarepsilon^e = C^-1sigma","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"The constitutive law for varepsilon^p is described by an ordinary differential equation ","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"boxeddotvarepsilon^p_ij = phi h_ijtag1","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"Here h_ij may arise from a potential function g(sigma xi), where xi is called internal variables","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"h_ij = fracpartial gpartial sigma_ij","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"and phi is a scalar function of the form ","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"phi = eta(sigmaxi) f(sigma xi)_+ = eta(sigmaxi)max(0 f(sigma xi))","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"where f is the yield surface. ","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"example: Example\nThe Tresca yield surface is given by f(sigma xi) = frac14(sigma_1-sigma_2+sigma_2-sigma_3+sigma_3-sigma_1)-k(xi)","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"example: Example\n​In J_2 plasticity, we haveg(sigma xi) = J_2(sigma) - k(xi)^2​Thus we havedotvarepsilon^p_ij = mathrmconsttimesleft(1-frack(xi)J_2(sigma)right)_+ s_ij(Image: )","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"In the rate-indpendent plasticity, there exists lambda such that ","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"phi = dotlambda","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"Since both sides of (1) has derivatives with respect to time, it is time scale independent. That's why we call it rate-independent. Then the flow rule requires that ","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"boxeddot lambda f = 0quad lambdageq 0quad fleq 0tag2","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"If f0 (the yield surface is not hit), the inelasticity strain is not \"active\"; once f=0 is hit, the material reacts by increasing plasticity strain (since dot lambda can be nonzero). ","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"The deformation theory studies how g is related to sigma and xi. If h directs along the outward normal of the yield surface, we can the consequent g the normality rule.  For example, J_2 plasticity can be formulated is subjected to normality rule. A particular case where normality rule holds is g=f, in which case we call (1) the associated flow rule with the yield surface.","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"Finally, the dynamics of internal variable is given by ","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"boxeddotxi_alpha = tilde h_alpha(sigma xi)tag3","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"The three equations (1), (2) and (3) fully characterizes the constitutive relation of varepsilon^p.","category":"page"},{"location":"plasticity/#Numerical-Example-1","page":"Plasticity","title":"Numerical Example","text":"","category":"section"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"Description Displacement Field Vertical Displacement\nPlasticity (Image: ) (Image: )\nElasticity (Image: ) (Image: )","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"using Revise\nusing PoreFlow\nusing SparseArrays\nusing LinearAlgebra\nusing PyPlot\nαm = 0.0\nαf = 0.0\nβ2 = 0.5*(1 - αm + αf)^2\nγ = 0.5 - αm + αf\n\nm = 40\nn = 20\nh = 0.01\nNT = 100\nΔt = 1/NT \nbdedge = []\nfor j = 1:n \n    push!(bdedge, [(j-1)*(m+1)+m+1 j*(m+1)+m+1])\nend\nbdedge = vcat(bdedge...)\n\nbdnode = Int64[]\nfor j = 1:n+1\n    push!(bdnode, (j-1)*(m+1)+1)\nend\n\nM = compute_fem_mass_matrix1(m, n, h)\nS = spzeros((m+1)*(n+1), (m+1)*(n+1))\nM = [M S;S M]\nH = diagm(0=>[1,1,0.5])\nK = 0.1\nσY = 0.03\n# σY = 1000.\n\n\nstate = zeros(2(m+1)*(n+1),NT+1)\nvelo = zeros(2(m+1)*(n+1),NT+1)\nacce = zeros(2(m+1)*(n+1),NT+1)\nstress = zeros(NT+1, 4*m*n, 3)\ninternal_variable = zeros(NT+1, 4*m*n)\n\nt = 0.0\nfor i = 1:NT \n    @info i \n        ##### STEP 1: Computes the external force ####\n\n    T = eval_f_on_boundary_edge((x,y)->0.02*sin(2π*i*Δt), bdedge, m, n, h)\n    # T = eval_f_on_boundary_edge((x,y)->0.0, bdedge, m, n, h)\n    T = [zeros(length(T)) -T]\n    T = compute_fem_traction_term(T, bdedge, m, n, h)\n    f1 = eval_f_on_gauss_pts((x,y)->0., m, n, h)\n    f2 = eval_f_on_gauss_pts((x,y)->0., m, n, h)\n    # f2 = eval_f_on_gauss_pts((x,y)->0.1, m, n, h)\n    F = compute_fem_source_term(f1, f2, m, n, h)\n    fext = F+T\n\n        ##### STEP 2: Extract Variables ####\n\n    u = state[:,i]\n    ∂∂u = acce[:,i]\n    ∂u = velo[:,i]\n\n    ε0 = eval_strain_on_gauss_pts(u, m, n, h)\n    σ0 = stress[i,:,:]\n    α0 = internal_variable[i,:]\n    \n        ##### STEP 3: Newton Iteration ####\n\n    global t += (1 - αf)*Δt\n    ∂∂up = ∂∂u[:]\n    iter = 0\n    while true\n        iter += 1\n        # @info iter\n        up = (1 - αf)*(u + Δt*∂u + 0.5 * Δt^2 * ((1 - β2)*∂∂u + β2*∂∂up)) + αf*u\n        global fint, stiff, α, σ = compute_planestressplasticity_stress_and_stiffness_matrix(\n            up, ε0, σ0, α0, K, σY, H, m, n, h\n        )\n        res = M * (∂∂up *(1 - αm) + αm*∂∂u)  + fint - fext\n        A = M*(1 - αm) + (1 - αf) * 0.5 * β2 * Δt^2 * stiff\n        A, _ = fem_impose_Dirichlet_boundary_condition(A, bdnode, m, n, h)\n        res[[bdnode; bdnode .+ (m+1)*(n+1)]] .= 0.0\n\n        Δ∂∂u = A\\res\n        ∂∂up -= Δ∂∂u\n        err = norm(res)\n        # @info err\n        if err<1e-8\n            break \n        end\n    end\n    global t += αf*Δt\n    \n        ##### STEP 3: Update State Variables ####\n\n    u += Δt * ∂u + Δt^2/2 * ((1 - β2) * ∂∂u + β2 * ∂∂up)\n    ∂u += Δt * ((1 - γ) * ∂∂u + γ * ∂∂up)\n    stress[i+1,:,:] = σ\n    internal_variable[i+1,:] = α\n    \n    state[:,i+1] = u\n    acce[:,i+1] = ∂∂up\n    velo[:,i+1] = ∂u\nend\n\nx = []\ny = []\nfor j= 1:n+1\n    for i = 1:m+1\n        push!(x, (i-1)*h)\n        push!(y, (j-1)*h)\n    end\nend\n\nfor i = 1:5:NT+1\n    close(\"all\")\n    scatter(x+state[1:(m+1)*(n+1), i], y+state[(m+1)*(n+1)+1:end, i])\n    scatter(x[m+1]+state[m+1, i],\n            y[m+1]+state[(m+1)*(n+1)+m+1, i], color=\"red\")\n    xlabel(\"x\")\n    ylabel(\"y\")\n    k = string(i)\n    k = repeat(\"0\", 3-length(k))*k \n    title(\"t = $k\")\n    ylim(-0.05,0.25)\n    xlim(-0.01, 0.45)\n    gca().invert_yaxis()\n    savefig(\"u$k.png\")\n\n    close(\"all\"); \n    plot(1:i, -state[(m+1)*(n+1)+m+1, 1:i])\n    xlim(0, NT+2)\n    ylim(0, 0.03)\n    scatter(i, -state[(m+1)*(n+1)+m+1, i], color=\"red\")\n    savefig(\"du$k.png\")\nend\n\nrun(`convert -delay 10 -loop 0 u*.png plasticity_u.gif`)\nrun(`convert -delay 10 -loop 0 du*.png plasticity_du.gif`)\n\n","category":"page"},{"location":"elastodynamics/#Elastodynamics-1","page":"Elastodynamics","title":"Elastodynamics","text":"","category":"section"},{"location":"elastodynamics/#","page":"Elastodynamics","title":"Elastodynamics","text":"The governing equation for elastodynamics is ","category":"page"},{"location":"elastodynamics/#","page":"Elastodynamics","title":"Elastodynamics","text":"beginaligned\nfracpartial^2 upartial t^2 = mathrmdivsigma + f Omegatimes 0T\nsigma n = t  Gamma_Ntimes 0T\nu = u_0  Gamma_Dtimes0T\nendaligned","category":"page"},{"location":"elastodynamics/#","page":"Elastodynamics","title":"Elastodynamics","text":"The constitutive law is given by ","category":"page"},{"location":"elastodynamics/#","page":"Elastodynamics","title":"Elastodynamics","text":"sigma = Cvarepsilon","category":"page"},{"location":"elastodynamics/#","page":"Elastodynamics","title":"Elastodynamics","text":"We fix the left side of the plate. We use the alpha method [alpha].","category":"page"},{"location":"elastodynamics/#","page":"Elastodynamics","title":"Elastodynamics","text":"[alpha]: Hughes, Thomas JR. The finite element method: linear static and dynamic finite element analysis. Courier Corporation, 2012. ","category":"page"},{"location":"elastodynamics/#","page":"Elastodynamics","title":"Elastodynamics","text":"Gravity External Force\n(Image: ) (Image: )","category":"page"},{"location":"elastodynamics/#","page":"Elastodynamics","title":"Elastodynamics","text":"β = 1/4; γ = 1/2\na = b = 0.1\nm = 40\nn = 20\nh = 0.01\nNT = 200\nΔt = 1/NT \nbdedge = []\nfor j = 1:n \n  push!(bdedge, [(j-1)*(m+1)+m+1 j*(m+1)+m+1])\nend\nbdedge = vcat(bdedge...)\n\nbdnode = Int64[]\nfor j = 1:n+1\n  push!(bdnode, (j-1)*(m+1)+1)\nend\n\nM = compute_fem_mass_matrix1(m, n, h)\nS = spzeros((m+1)*(n+1), (m+1)*(n+1))\nM = [M S;S M]\n\nK = compute_fem_stiffness_matrix(D, m, n, h)\nC = a*M + b*K # damping matrix \n\nL = M + γ*Δt*C + β*Δt^2*K\nL, Lbd = fem_impose_Dirichlet_boundary_condition(L, bdnode, m, n, h)\n\na = zeros(2(m+1)*(n+1))\nv = zeros(2(m+1)*(n+1))\nd = zeros(2(m+1)*(n+1))\nU = zeros(2(m+1)*(n+1),NT+1)\nfor i = 1:NT \n  T = eval_f_on_boundary_edge((x,y)->0.01, bdedge, m, n, h)\n  # T = eval_f_on_boundary_edge((x,y)->0.0, bdedge, m, n, h)\n  T = [zeros(length(T)) -T]\n  T = compute_fem_traction_term(T, bdedge, m, n, h)\n  f1 = eval_f_on_gauss_pts((x,y)->0., m, n, h)\n  f2 = eval_f_on_gauss_pts((x,y)->0., m, n, h)\n  # f2 = eval_f_on_gauss_pts((x,y)->0.1, m, n, h)\n  F = compute_fem_source_term(f1, f2, m, n, h)\n\n  rhs = F+T\n\n  td = d + Δt*v + Δt^2/2*(1-2β)*a \n  tv = v + (1-γ)*Δt*a \n  rhs = rhs - C*tv - K*td\n  rhs[[bdnode; bdnode.+(m+1)*(n+1)]] .= 0.0\n\n  a = L\\rhs \n  d = td + β*Δt^2*a \n  v = tv + γ*Δt*a \n  U[:,i+1] = d\nend\n\nx = []\ny = []\nfor j= 1:n+1\n  for i = 1:m+1\n    push!(x, (i-1)*h)\n    push!(y, (j-1)*h)\n  end\nend\nfor i = 1:10:NT+1\n  close(\"all\")\n  scatter(x+U[1:(m+1)*(n+1), i], y+U[(m+1)*(n+1)+1:end, i])\n  xlabel(\"x\")\n  ylabel(\"y\")\n  k = string(i)\n  k = repeat(\"0\", 3-length(k))*k \n  title(\"t = $k\")\n  ylim(-0.05,0.25)\n  gca().invert_yaxis()\n  savefig(\"u$k.png\")\nend","category":"page"},{"location":"inv_viscoelasticity/#Viscoelasticity-Inversion-1","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"","category":"section"},{"location":"inv_viscoelasticity/#Problem-Description-1","page":"Viscoelasticity Inversion","title":"Problem Description","text":"","category":"section"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"In this example, we consider the Maxwell viscoelasticity model. The governing equations are","category":"page"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"Momentum Balance:","category":"page"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"sigma_ijj + rho f_i = rho ddot u_i","category":"page"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"Constitutive Relation (Plane Strain Viscoelasticity):","category":"page"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"dot sigma_ij + fracmueta left( sigma_ij - fracsigma_kk3delta_ij right) = 2mu dot varepsilon_ij + lambda dotvarepsilon_kkdelta_ij","category":"page"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"Boundary Conditions:","category":"page"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"beginaligned\nbmsigma mathbfn =\nbegincases\n0  textTop or Bottom  \n-T 0  textRight \nendcases  \nmathbfu =0 texthspace31cm Left \nendaligned","category":"page"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"(Image: )","category":"page"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"We assume that the Lamé constants lambda and mu are given. The viscosity eta is spatial varying. We want to estimate eta based on the measurement of surface horizontal displacements. The true model consists of two layers of different vicosity. ","category":"page"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"(Image: )","category":"page"},{"location":"inv_viscoelasticity/#Forward-simulation-1","page":"Viscoelasticity Inversion","title":"Forward simulation","text":"","category":"section"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"We implement the forward simulation using finite element analysis discretization and alpha-scheme, an implicit time stepping scheme that offers good stability and accuracy. We show the displacement in x direction, the stress sigma_xx and the strain varepsilon_xx of the right middle point (red dot in the first graph in this section).  ","category":"page"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"(Image: )","category":"page"},{"location":"inv_viscoelasticity/#Inversion-Method-1","page":"Viscoelasticity Inversion","title":"Inversion Method","text":"","category":"section"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"We formulate the loss function as the discrepancy between observations and predictions","category":"page"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"mathcalJ(eta) = sum_i=1^N_T sum_k=1^m+1 (mathbfu_ik^mathrmobs- mathbfu_i(x_k 0))^2","category":"page"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"Unlike the linear elasticity case, in the viscoelasticity case, the stress is history-dependent. Therefore, when we calculate the gradients fracpartialmathcalJpartial eta, the state variables are both mathbfu and bmsigma. Additionally, in each time step, since we have used an implicit scheme, we need to solve an equation ","category":"page"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"A(eta bmsigma^n+1) mathbfu^n+1 = mathbff(bmsigma^n mathbfu^n)","category":"page"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"The state adjoint method requires us to compute the gradients of ","category":"page"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"mathbfu^n+1(bmsigma^n eta mathbfu^n) = A(eta bmsigma^n+1)^-1 mathbff(bmsigma^n mathbfu^n)tag1","category":"page"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"with respect to bmsigma^n, eta and mathbfu^n. ","category":"page"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"Surprisingly, the seemingly complex formula (1) admits a simple implementation using automatic differentiation (of course a special technique called physics constrained learning is needed). Once the gradients fracpartialmathcalJpartial eta is computed, the inversion problem can be solved using gradient-based optimization techniques (e.g., LBFGS).","category":"page"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"(Image: )","category":"page"},{"location":"inv_viscoelasticity/#Numerical-Example-1","page":"Viscoelasticity Inversion","title":"Numerical Example","text":"","category":"section"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"We present the numerical example here. The true model and inverted model are shown as follows. We assume that the viscosity values are the same horizontally. ","category":"page"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"True model Inverted result\n(Image: ) (Image: )","category":"page"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"We also show the inversion results in each iteration:","category":"page"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"(Image: )","category":"page"},{"location":"inv_viscoelasticity/#Codes-1","page":"Viscoelasticity Inversion","title":"Codes","text":"","category":"section"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"The highlights of the implementation are","category":"page"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"The alpha-scheme for time stepping. A stable scheme is important for inversion since we need to try out different parameters, which may crash the simulation if the scheme is sensitive to physical parameters. Therefore, we chose the alpha scheme, which is an implicit scheme that offers satisfactory stability. \nwhile_loop. while_loop mechanism allows us to create only one computational graph for all the iterations. This is essential for simulations that span large time horizons. Fortunately, TensorFlow offers this functionality. \nCustom sparse solver. We have used custom sparse solvers in ADCME, which uses Eigen SparseLU as the backend. The sparse solver is the key for efficient implementation of physics constrained learning; otherwise, direct implementation in TensorFlow will convert the sparse matrix to dense and then invoke BLAS libraries. ","category":"page"},{"location":"inv_viscoelasticity/#","page":"Viscoelasticity Inversion","title":"Viscoelasticity Inversion","text":"using Revise\nusing PoreFlow\nusing PyCall\nusing LinearAlgebra\nusing PyPlot\nusing SparseArrays\nusing MAT\nnp = pyimport(\"numpy\")\n\n# mode = \"data\" generate data \n# mode != \"data\" inversion\nmode = \"data\"\n\n# alpha-scheme parameters\nβ = 1/4; γ = 1/2\na = b = 0.1\n\n# geometry \nm = 20\nn = 10\nh = 0.01\nNT = 500\nit0 = NT÷2\nΔt = 20/NT\nηmax = 1\nηmin = 0.5\nbdedge = []\nfor j = 1:n \n  push!(bdedge, [(j-1)*(m+1)+m+1 j*(m+1)+m+1])\nend\nbdedge = vcat(bdedge...)\n\nbdnode = Int64[]\nfor j = 1:n+1\n  push!(bdnode, (j-1)*(m+1)+1)\nend\n\n# helper functions\nfunction eta_model(idx)\n  if idx == 1\n    out = ηmin * ones(4, m, n)\n    out[:, :, 1:div(n,3)] .= ηmax\n    out[:]\n  end\nend\n\nfunction visualize_inv_eta(X, k)\n    x = LinRange(0.5h,m*h, m)\n    y = LinRange(0.5h,n*h, n)\n    V = zeros(m, n)\n    for i = 1:m  \n        for j = 1:n \n            elem = (j-1)*m + i \n            V[i, j] = mean(X[4(elem-1)+1:4elem])\n        end\n    end\n    close(\"all\")\n    pcolormesh(x, y, V', vmin=ηmin-(ηmax-ηmin)/4, vmax=ηmax+(ηmax-ηmin)/4)\n    colorbar(shrink=0.5)\n    xlabel(\"x\")\n    ylabel(\"y\")\n    # title(\"Iteration = $k\")\n    title(\"True model\")\n    axis(\"scaled\")\n    gca().invert_yaxis()\n    savefig(\"iter$k.png\")\nend\n\nλ = constant(2.0)\nμ = constant(0.5)\nif mode==\"data\"\n  global invη = constant(eta_model(1))\nelse\n    invη_ = Variable((ηmin + ηmax)/2*ones(n))\n    invη_ = tf.reshape(repeat(invη_, 1, 4m), (-1,))\n    global invη = invη_ \nend\n\n\n\nfn_G = invη->begin \n  G = tensor([1/Δt+μ*invη -μ/3*invη 0.0\n    -μ/3*invη 1/Δt+μ*invη-μ/3*invη 0.0\n    0.0 0.0 1/Δt+μ*invη])\n  invG = inv(G)\nend\ninvG = map(fn_G, invη)\nS = tensor([2μ/Δt+λ/Δt λ/Δt 0.0\n    λ/Δt 2μ/Δt+λ/Δt 0.0\n    0.0 0.0 μ/Δt])\nH = invG*S\n\n\nM = compute_fem_mass_matrix1(m, n, h)\nZero = spzeros((m+1)*(n+1), (m+1)*(n+1))\nM = SparseTensor([M Zero;Zero M])\n\nK = compute_fem_stiffness_matrix(H, m, n, h)\nC = a*M + b*K # damping matrix \n\nL = M + γ*Δt*C + β*Δt^2*K\nL, Lbd = fem_impose_Dirichlet_boundary_condition(L, bdnode, m, n, h)\n\na = TensorArray(NT+1); a = write(a, 1, zeros(2(m+1)*(n+1))|>constant)\nv = TensorArray(NT+1); v = write(v, 1, zeros(2(m+1)*(n+1))|>constant)\nd = TensorArray(NT+1); d = write(d, 1, zeros(2(m+1)*(n+1))|>constant)\nU = TensorArray(NT+1); U = write(U, 1, zeros(2(m+1)*(n+1))|>constant)\nSigma = TensorArray(NT+1); Sigma = write(Sigma, 1, zeros(4*m*n, 3)|>constant)\nVarepsilon = TensorArray(NT+1); Varepsilon = write(Varepsilon, 1,zeros(4*m*n, 3)|>constant)\n\n\n# external forces on the right hand side\nForces = zeros(NT, 2(m+1)*(n+1))\nfor i = 1:NT\n  T = eval_f_on_boundary_edge((x,y)->0.1, bdedge, m, n, h)\n  T = [-T zeros(length(T))]\n  rhs = compute_fem_traction_term(T, bdedge, m, n, h)\n  Forces[i, :] = rhs\nend\nForces = constant(Forces)\n\n################# main simulation #################\nfunction condition(i, tas...)\n  i <= NT\nend\n\nfunction body(i, tas...)\n  a_, v_, d_, U_, Sigma_, Varepsilon_ = tas\n  a = read(a_, i)\n  v = read(v_, i)\n  d = read(d_, i)\n  U = read(U_, i)\n  Sigma = read(Sigma_, i)\n  Varepsilon = read(Varepsilon_, i)\n\n  res = squeeze(tf.matmul(tf.reshape(Sigma, (size(Sigma,1), 1, 3)),(invG/Δt)))\n  F = compute_strain_energy_term(res, m, n, h) - K * U\n  rhs = Forces[i] - Δt^2 * F\n\n  td = d + Δt*v + Δt^2/2*(1-2β)*a \n  tv = v + (1-γ)*Δt*a \n  rhs = rhs - C*tv - K*td\n  \n  rhs = scatter_update(rhs, constant([bdnode; bdnode.+(m+1)*(n+1)]), constant(zeros(2*length(bdnode))))\n\n\n  ## alpha-scheme\n  a = L\\rhs # invoking the sparse solver  \n  d = td + β*Δt^2*a \n  v = tv + γ*Δt*a \n  U_new = d\n  Varepsilon_new = eval_strain_on_gauss_pts(U_new, m, n, h)\n\n  res2 = squeeze(tf.matmul(tf.reshape(Varepsilon_new-Varepsilon, (size(Sigma,1), 1, 3)),\n                        tf.matmul(invG, S)))\n  Sigma_new = res +  res2\n\n  i+1, write(a_, i+1, a), write(v_, i+1, v), write(d_, i+1, d), write(U_, i+1, U_new),\n        write(Sigma_, i+1, Sigma_new), write(Varepsilon_, i+1, Varepsilon_new)\nend\n\n\ni = constant(1, dtype=Int32)\n_, _, _, _, u, sigma, varepsilon = while_loop(condition, body, \n                  [i, a, v, d, U, Sigma, Varepsilon])\n\nU = stack(u)\nSigma = stack(sigma)\nVarepsilon = stack(varepsilon)\n\n###################################################\n\nif mode!=\"data\"\n    data = matread(\"U.mat\")\n    global Uval,Sigmaval, Varepsilonval = data[\"U\"], data[\"Sigma\"], data[\"Varepsilon\"]\n    U.set_shape((NT+1, size(U, 2)))\n    idx0 = 1:4m*n\n    Sigma = map(x->x[idx0,:], Sigma)\n\n    idx = 1:m+1 # use only surface data\n    global loss = sum((U[it0:end, idx] - Uval[it0:end, idx])^2) \nend\n\nsess = Session(); init(sess)\ncb = (v, i, l)->begin\n  println(\"[$i] loss = $l\")\n  inv_eta = v[1]\n  visualize_inv_eta(inv_eta, i)\nend\nif mode==\"data\"\n    Uval,Sigmaval, Varepsilonval = run(sess, [U, Sigma, Varepsilon])\n    matwrite(\"U.mat\", Dict(\"U\"=>Uval, \"Sigma\"=>Sigmaval, \"Varepsilon\"=>Varepsilonval))\n    close(\"all\")\n\n    figure(figsize=(15,5))\n    subplot(1,3,1)\n    idx = div(n,2)*(m+1) + m+1\n\n    plot((0:NT)*Δt, Uval[:, idx])\n    xlabel(\"time\")\n    ylabel(\"\\$u_x\\$\")\n    plt.gca().ticklabel_format(style=\"sci\", scilimits=(0,0), axis=\"y\")\n\n    ax = plt.gca().inset_axes([0.3, 0.2, 0.6, 0.7])\n    ax.plot((it0-1:NT)*Δt, Uval[it0:end, idx])\n    ax.ticklabel_format(style=\"sci\", scilimits=(0,0), axis=\"y\")\n\n    subplot(1,3,2)\n    idx = 4*(div(n,2)*m + m)\n    \n    plot((0:NT)*Δt, Sigmaval[:,idx,1])\n    xlabel(\"time\")\n    ylabel(\"\\$\\\\sigma_{xx}\\$\")\n    plt.gca().ticklabel_format(style=\"sci\", scilimits=(0,0), axis=\"y\")\n\n    ax = plt.gca().inset_axes([0.4, 0.1, 0.5, 0.5])\n    ax.plot((it0-1:NT)*Δt, Sigmaval[it0:end,idx,1])\n    ax.ticklabel_format(style=\"sci\", scilimits=(0,0), axis=\"y\")\n\n    subplot(1,3,3)\n    idx = 4*(div(n,2)*m + m)\n    plot((0:NT)*Δt, Varepsilonval[:,idx,1])\n    xlabel(\"time\")\n    ylabel(\"\\$\\\\varepsilon_{xx}\\$\")\n    plt.gca().ticklabel_format(style=\"sci\", scilimits=(0,0), axis=\"y\")\n\n    ax = plt.gca().inset_axes([0.3, 0.2, 0.6, 0.7])\n    ax.plot((it0-1:NT)*Δt, Varepsilonval[it0:end,idx,1])\n    ax.ticklabel_format(style=\"sci\", scilimits=(0,0), axis=\"y\")\n\n    savefig(\"visco_eta.png\")\n\n    cb([run(sess, invη)], \"true\", 0)\n    error(\"Generate Data\")\nend\n\n\n@info run(sess, loss)\nv_ = [];i_ = [];l_ = []\nloss_ = BFGS!(sess, loss*1e10, vars=[invη], callback=cb, var_to_bounds=Dict(invη_=>(5.0,15.0)))","category":"page"},{"location":"viscoelasticity/#Viscoelasticity-1","page":"Viscoelasticity","title":"Viscoelasticity","text":"","category":"section"},{"location":"viscoelasticity/#Viscoelasticity-Theory-1","page":"Viscoelasticity","title":"Viscoelasticity Theory","text":"","category":"section"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"To describe the viscoelasticity, we need to relate both the viscosity strain varepsilon^vp and the elasticity strain varepsilon^e to the stress sigma. The latter is given by ","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"boxedvarepsilon^e= fracsigmaE","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"The constitutive relation of varepsilon^vp is given by ","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"boxeddot varepsilon^vp = fracsigmaeta","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"We can consider the elasticity strain associated with a spring while the viscoelasticity associated with a dashed pot. Then based on how we combine the spring or the dashed pot, we can have many cases [linearvisco]","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"[linearvisco]: https://academic.csuohio.edu/duffys/LinearVisco.pdf","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"Maxwell Model Kevin Model Standard Linear Model\n(Image: image-20200128113844890) (Image: image-20200128113802583) (Image: image-20200128113907786)\nbeginalignedvarepsilon = varepsilon_1 + varepsilon_2varepsilon_1 = fracsigmaEdotvarepsilon_2 = fracsigmaetaendaligned beginalignedsigma = sigma_1 + sigma_2varepsilon_1 = fracsigmaEdotvarepsilon_2 = fracsigmaetaendaligned beginalignedsigma = sigma_1 + sigma_2varepsilon = varepsilon_1 + varepsilon_2sigma = E_1 varepsilon_1sigma_1 = E_2varepsilon_2sigma_2 = etadotvarepsilon_2endaligned","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"The most general constitutive equation has the following form ","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"p_0sigma + p_1dotsigma + p_2ddot sigma + p_3 dddot sigma + cdots = q_0varepsilon + q_1dotvarepsilon + q_2ddot varepsilon + q_3 dddot varepsilon + cdots","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"For high dimensional case, assume that the bulk modulus is K, then we have [linearvisco2]","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"[linearvisco2]: http://solidmechanics.org/text/Chapter36/Chapter36.htm","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"beginaligned e_ij = varepsilon_ij - varepsilon_kk delta_ij qquad sigma_ij = s_ij + Kvarepsilon_kkdelta_ij\n ks_ij + eta dot s_ij = ketadot e_ij  mathrmMaxwell\n s_ij = ke_ij + eta dot e_ij  mathrmKevin\n k_1s_ij + etadot s_ij = k_1k_2e_ij + (k_1+k_2) etadot e_ij  mathrmStandard mathrmLinear\nendaligned","category":"page"},{"location":"viscoelasticity/#Numerical-Example-1","page":"Viscoelasticity","title":"Numerical Example","text":"","category":"section"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"We consider the two dimensional Maxwell material","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"dot sigma_ij + fracmueta left( sigma_ij - fracsigma_kk3delta_ij right) = 2mu dot varepsilon_ij + lambda dotvarepsilon_kkdelta_ijtag1","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"along with the balance of linear momentum equation","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"sigma_ijj + rho f_i = rho ddot u_i","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"We use the implicit discretization for Eq. (1) ","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"beginbmatrix\n1 + frac23fracmuDelta teta  -frac13fracmuDelta teta  0\n-frac13fracmuDelta teta  1 + frac23fracmuDelta teta  0 \n0  0  1 + fracmuDelta teta\nendbmatrix\nbeginbmatrix\n\tsigma_xx^n+1\n\tsigma_yy^n+1\n\tsigma_xy^n+1\nendbmatrix = beginbmatrix\n\tsigma_xx^n\n\tsigma_yy^n\n\tsigma_xy^n\nendbmatrix  + beginbmatrix\n\t2mu+lambda  lambda  0\n\tlambda  2mu+lambda  0\n\t0  0  mu \nendbmatrixbeginbmatrix\n\tvarepsilon_xx^n\n\tvarepsilon_yy^n\n\tvarepsilon_xy^n\nendbmatrix","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"or in a simpler form","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"sigma^n+1 = H varepsilon^n+1 + S sigma^n  - Hvarepsilon^n","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"Here S and H are defined as ","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"S = beginbmatrix\n1 + frac23fracmuDelta teta  -frac13fracmuDelta teta  0\n-frac13fracmuDelta teta  1 + frac23fracmuDelta teta  0 \n0  0  1 + fracmuDelta teta\nendbmatrix^-1","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"S^-1beginbmatrix\n\t2mu+lambda  lambda  0\n\tlambda  2mu+lambda  0\n\t0  0  mu \nendbmatrix","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"The parameters used in the simulation are","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"lambda mu eta Delta t and T Domain and h\n0.0 0.5 1.0 0.025 and 5.0 002times 004 and 0.01","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"Description Linear Elasticity Viscoelasticity\nx displacement (Image: disp_u_linear) (Image: disp_scattered_u)\ny displacement (Image: disp_u_linear) (Image: disp_u_linear)\nVon Mises Stress (Image: disp_s_linear) (Image: disp_s_viscoelasticity)\nStatistics of Middle Right point (Image: linear) (Image: visco)","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"Simulation Code","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"Linear Elasticity","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"using Revise\nusing PoreFlow\nusing PyCall\nusing LinearAlgebra\nusing PyPlot\nusing SparseArrays\nnp = pyimport(\"numpy\")\n\nβ = 1/4; γ = 1/2\na = b = 0.1\nm = 40\nn = 20\nh = 0.01\nNT = 200\nΔt = 5/NT \nbdedge = []\nfor j = 1:n \n  push!(bdedge, [(j-1)*(m+1)+m+1 j*(m+1)+m+1])\nend\nbdedge = vcat(bdedge...)\n\nbdnode = Int64[]\nfor j = 1:n+1\n  push!(bdnode, (j-1)*(m+1)+1)\nend\n\nM = compute_fem_mass_matrix1(m, n, h)\nS = spzeros((m+1)*(n+1), (m+1)*(n+1))\nM = [M S;S M]\n\nH = [1.0 0.0 0.0\n    0.0 1.0 0.0\n    0.0 0.0 0.5]\nK = compute_fem_stiffness_matrix(H, m, n, h)\nC = a*M + b*K # damping matrix \n\nL = M + γ*Δt*C + β*Δt^2*K\nL, Lbd = fem_impose_Dirichlet_boundary_condition(L, bdnode, m, n, h)\n\na = zeros(2(m+1)*(n+1))\nv = zeros(2(m+1)*(n+1))\nd = zeros(2(m+1)*(n+1))\nU = zeros(2(m+1)*(n+1),NT+1)\n\nSigma = zeros(NT+1, 4m*n, 3)\nVarepsilon = zeros(NT+1, 4m*n, 3)\nfor i = 1:NT \n    global a, v, d\n    T = eval_f_on_boundary_edge((x,y)->0.1, bdedge, m, n, h)\n    T = [T zeros(length(T))]\n    rhs = compute_fem_traction_term(T, bdedge, m, n, h)\n    if i*Δt>3.0\n      rhs = zero(rhs)\n    end\n\n    td = d + Δt*v + Δt^2/2*(1-2β)*a \n    tv = v + (1-γ)*Δt*a \n    rhs = rhs - C*tv - K*td\n    rhs[[bdnode; bdnode.+(m+1)*(n+1)]] .= 0.0\n\n    a = L\\rhs \n    d = td + β*Δt^2*a \n    v = tv + γ*Δt*a \n    U[:,i+1] = d\n\n\n    Varepsilon[i+1,:,:] = eval_strain_on_gauss_pts(U[:,i+1], m, n, h)\n    Sigma[i+1,:,:] = Varepsilon[i+1,:,:] * H\nend\n\n\nvisualize_scattered_displacement(U, m, n, h; name = \"_linear\", xlim_=[-0.01,0.5], ylim_=[-0.05,0.22])\nvisualize_displacement(U, m, n, h;  name = \"_linear\")\nvisualize_stress(H, U, m, n, h;  name = \"_linear\")\n\n\nclose(\"all\")\nfigure(figsize=(15,5))\nsubplot(1,3,1)\nidx = div(n,2)*(m+1) + m+1\nplot((0:NT)*Δt, U[idx,:])\nxlabel(\"time\")\nylabel(\"x displacement\")\n\nsubplot(1,3,2)\nidx = 4*(div(n,2)*m + m)\nplot((0:NT)*Δt, Sigma[:,idx,1])\nxlabel(\"time\")\nylabel(\"x stress\")\n\nsubplot(1,3,3)\nidx = 4*(div(n,2)*m + m)\nplot((0:NT)*Δt, Varepsilon[:,idx,1])\nxlabel(\"time\")\nylabel(\"x strain\")\nsavefig(\"linear.png\")","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"Viscoelasticity","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"using Revise\nusing PoreFlow\nusing PyCall\nusing LinearAlgebra\nusing PyPlot\nusing SparseArrays\nnp = pyimport(\"numpy\")\n\nλ = 0.0\nμ = 0.5\nη = 1.0\n\nβ = 1/4; γ = 1/2\na = b = 0.1\nm = 40\nn = 20\nh = 0.01\nNT = 200\nΔt = 5/NT \nbdedge = []\nfor j = 1:n \n  push!(bdedge, [(j-1)*(m+1)+m+1 j*(m+1)+m+1])\nend\nbdedge = vcat(bdedge...)\n\nbdnode = Int64[]\nfor j = 1:n+1\n  push!(bdnode, (j-1)*(m+1)+1)\nend\n\nG = [1/Δt+μ/η -μ/3η 0.0\n  -μ/3η 1/Δt+μ/η-μ/3η 0.0\n  0.0 0.0 1/Δt+μ/η]\nS = [2μ/Δt+λ/Δt λ/Δt 0.0\n    λ/Δt 2μ/Δt+λ/Δt 0.0\n    0.0 0.0 μ/Δt]\ninvG = inv(G)\nH = invG*S\n\nM = compute_fem_mass_matrix1(m, n, h)\nZero = spzeros((m+1)*(n+1), (m+1)*(n+1))\nM = [M Zero;Zero M]\n\nK = compute_fem_stiffness_matrix(H, m, n, h)\nC = a*M + b*K # damping matrix \n\nL = M + γ*Δt*C + β*Δt^2*K\nL, Lbd = fem_impose_Dirichlet_boundary_condition(L, bdnode, m, n, h)\n\na = zeros(2(m+1)*(n+1))\nv = zeros(2(m+1)*(n+1))\nd = zeros(2(m+1)*(n+1))\nU = zeros(2(m+1)*(n+1),NT+1)\nSigma = zeros(NT+1, 4m*n, 3)\nVarepsilon = zeros(NT+1, 4m*n, 3)\nfor i = 1:NT \n    global a, v, d\n    T = eval_f_on_boundary_edge((x,y)->0.1, bdedge, m, n, h)\n    T = [T zeros(length(T))]\n    rhs = compute_fem_traction_term(T, bdedge, m, n, h)\n\n    if i*Δt>3.0\n      rhs = zero(rhs)\n    end\n\n    F = compute_strain_energy_term(Sigma[i,:,:]*invG/Δt, m, n, h) - K * U[:,i]\n    # @show norm(compute_strain_energy_term(Sigma[i,:,:]*invG/Δt, m, n, h)), norm(K * U[:,i])\n    rhs -= Δt^2 * F\n\n    td = d + Δt*v + Δt^2/2*(1-2β)*a \n    tv = v + (1-γ)*Δt*a \n    rhs = rhs - C*tv - K*td\n    rhs[[bdnode; bdnode.+(m+1)*(n+1)]] .= 0.0\n\n    a = L\\rhs \n    d = td + β*Δt^2*a \n    v = tv + γ*Δt*a \n    U[:,i+1] = d\n\n    Varepsilon[i+1,:,:] = eval_strain_on_gauss_pts(U[:,i+1], m, n, h)\n    Sigma[i+1,:,:] = Sigma[i,:,:]*invG/Δt +  (Varepsilon[i+1,:,:]-Varepsilon[i,:,:])*(invG*S)\nend\n\n\nvisualize_scattered_displacement(U, m, n, h; name = \"_viscoelasticity\", xlim_=[-0.01,0.5], ylim_=[-0.05,0.22])\nvisualize_displacement(U, m, n, h;  name = \"_viscoelasticity\")\nvisualize_stress(H, U, m, n, h;  name = \"_viscoelasticity\")\n\nclose(\"all\")\nfigure(figsize=(15,5))\nsubplot(1,3,1)\nidx = div(n,2)*(m+1) + m+1\nplot((0:NT)*Δt, U[idx,:])\nxlabel(\"time\")\nylabel(\"\\$u_x\\$\")\n\nsubplot(1,3,2)\nidx = 4*(div(n,2)*m + m)\nplot((0:NT)*Δt, Sigma[:,idx,1])\nxlabel(\"time\")\nylabel(\"\\$\\\\sigma_{xx}\\$\")\n\nsubplot(1,3,3)\nidx = 4*(div(n,2)*m + m)\nplot((0:NT)*Δt, Varepsilon[:,idx,1])\nxlabel(\"time\")\nylabel(\"\\$\\\\varepsilon_{xx}\\$\")\nsavefig(\"visco.png\")\n","category":"page"},{"location":"heatequation/#Heat-Equation-1","page":"Heat Equation","title":"Heat Equation","text":"","category":"section"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"The strong form of the initial/boundary-value problem of the heat equation is: given f, u_0, q, find ubarOmegatimes 0Trightarrow mathbbR such that","category":"page"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"beginaligned\nrhofracpartial upartial t - nablacdot(Knabla u) = f Omegatimes (0T)\nu = u_0  Gamma_Dtimes (0T)\nKfracpartial upartial n = q Gamma_Ntimes (0T)\nendaligned","category":"page"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"The corresponding weak form is: given f, u_0 and q , find u, such that for all w","category":"page"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"int_Omega rhofracpartial upartial tdelta u mathrmdx + int_Omega Knabla u cdot nabla delta u mathrmd x = int_Omega fdelta u mathrmd x + int_Gamma_N q delta u mathrmdx","category":"page"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"The computational domain is as follows: the top side is the inflow boundary condition and the other sides are Dirichlet boundary condition. ","category":"page"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"(Image: )","category":"page"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"We consider the manufactured solution ","category":"page"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"u(x t) = (x_1^2+x_2^2)e^-tquad rho(x) = (1+x_1^2+x_2^2)","category":"page"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"and ","category":"page"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"K = beginbmatrix\n2  1 \n1  2\nendbmatrix","category":"page"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"Then we have","category":"page"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"beginaligned\nf(x) = -(1+x_1^2+x_2^2)(x_1^2+x_2^2) e^-t - 8 e^-t\nq(x) = -(2x+4y)e^-t\nendaligned","category":"page"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"m = 40\nn = 20\nh = 0.01\nbdedge = []\nfor i = 1:m \n  push!(bdedge, [i i+1])\nend\nbdedge = vcat(bdedge...)\n\nbdnode = Int64[]\nfor j = 1:n+1\n  push!(bdnode, (j-1)*(m+1)+1)\n  push!(bdnode, (j-1)*(m+1)+m+1)\nend\nfor i = 2:m\n  push!(bdnode, n*(m+1)+i)\nend\n\nρ = eval_f_on_gauss_pts((x,y)->1+x^2+y^2, m, n, h)\nM = compute_fem_mass_matrix1(ρ, m, n, h)\n\nK_ = [2.0 1.0\n  1.0 2.0]\nK = compute_fem_stiffness_matrix1(K_, m, n, h)\n\nNT = 200\nΔt = 1/NT \nA = M/Δt+K \nA, Abd = fem_impose_Dirichlet_boundary_condition1(A, bdnode, m, n, h)\nU = zeros((m+1)*(n+1), NT+1)\nfor i = 1:m+1\n  for j = 1:n+1\n    x = (i-1)*h; y = (j-1)*h \n    U[(j-1)*(m+1)+i, 1] = x^2+y^2\n  end\nend\nfor i = 1:NT \n  F = eval_f_on_gauss_pts((x,y)->(-(1+x^2+y^2)*(x^2+y^2)-8)*exp(-i*Δt), m, n, h)\n  F = compute_fem_source_term1(F, m, n, h)\n\n  T = eval_f_on_boundary_edge((x,y)->-(2*x+4*y)*exp(-i*Δt), bdedge, m, n, h)\n  T = compute_fem_flux_term1(T, bdedge, m, n, h)\n\n  rhs = F  + M*U[:,i]/Δt + T\n  bdval = eval_f_on_boundary_node( (x,y)->(x^2+y^2)*exp(-i*Δt), bdnode, m, n, h)\n  rhs[bdnode] = bdval\n  U[:,i+1] = A\\(\n    rhs - Abd*bdval\n  )\nend\n\nUexact = zeros(n+1,m+1)\nfor j = 1:n+1\n  for i = 1:m+1\n    x = (i-1)*h; y = (j-1)*h \n    Uexact[j, i] = (x^2+y^2)*exp(-1)\n  end\nend\npcolormesh(reshape(U[:,end], m+1, n+1)'-Uexact); colorbar()","category":"page"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"(Image: )","category":"page"}]
}
