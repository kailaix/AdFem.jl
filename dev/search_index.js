var documenterSearchIndex = {"docs":
[{"location":"plasticity/#Plasticity-1","page":"Plasticity","title":"Plasticity","text":"","category":"section"},{"location":"plasticity/#Plasticity-Theory-1","page":"Plasticity","title":"Plasticity Theory","text":"","category":"section"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"The constitutive theory is about relating stress sigma and strain varepsilon. ","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"The total strain varepsilon can be decomposed into ","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"varepsilon = varepsilon^p + varepsilon^e","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"The constitutive relation must characterize the relation between the stress varepsilon for both varepsilon^p and varepsilon^e . The constitutive law for varepsilon^e is linear, i.e., ","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"sigma = Cvarepsilon^eLeftrightarrowvarepsilon^e = C^-1sigma","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"The constitutive law for varepsilon^p is described by an ordinary differential equation ","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"boxeddotvarepsilon^p_ij = phi h_ijtag1","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"Here h_ij may arise from a potential function g(sigma xi), where xi is called internal variables","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"h_ij = fracpartial gpartial sigma_ij","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"and phi is a scalar function of the form ","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"phi = eta(sigmaxi) f(sigma xi)_+ = eta(sigmaxi)max(0 f(sigma xi))","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"where f is the yield surface. ","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"example: Example\nThe Tresca yield surface is given by f(sigma xi) = frac14(sigma_1-sigma_2+sigma_2-sigma_3+sigma_3-sigma_1)-k(xi)","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"example: Example\n​In J_2 plasticity, we haveg(sigma xi) = J_2(sigma) - k(xi)^2​Thus we havedotvarepsilon^p_ij = mathrmconsttimesleft(1-frack(xi)J_2(sigma)right)_+ s_ij(Image: )","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"In the rate-indpendent plasticity, there exists lambda such that ","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"phi = dotlambda","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"Since both sides of (1) has derivatives with respect to time, it is time scale independent. That's why we call it rate-independent. Then the flow rule requires that ","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"boxeddot lambda f = 0quad lambdageq 0quad fleq 0tag2","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"If f0 (the yield surface is not hit), the inelasticity strain is not \"active\"; once f=0 is hit, the material reacts by increasing plasticity strain (since dot lambda can be nonzero). ","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"The deformation theory studies how g is related to sigma and xi. If h directs along the outward normal of the yield surface, we can the consequent g the normality rule.  For example, J_2 plasticity can be formulated is subjected to normality rule. A particular case where normality rule holds is g=f, in which case we call (1) the associated flow rule with the yield surface.","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"Finally, the dynamics of internal variable is given by ","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"boxeddotxi_alpha = tilde h_alpha(sigma xi)tag3","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"The three equations (1), (2) and (3) fully characterizes the constitutive relation of varepsilon^p.","category":"page"},{"location":"plasticity/#Numerical-Example-1","page":"Plasticity","title":"Numerical Example","text":"","category":"section"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"Description Displacement Field Vertical Displacement\nPlasticity (Image: ) (Image: )\nElasticity (Image: ) (Image: )","category":"page"},{"location":"plasticity/#","page":"Plasticity","title":"Plasticity","text":"using Revise\nusing PoreFlow\nusing SparseArrays\nusing LinearAlgebra\nusing PyPlot\nαm = 0.0\nαf = 0.0\nβ2 = 0.5*(1 - αm + αf)^2\nγ = 0.5 - αm + αf\n\nm = 40\nn = 20\nh = 0.01\nNT = 100\nΔt = 1/NT \nbdedge = []\nfor j = 1:n \n    push!(bdedge, [(j-1)*(m+1)+m+1 j*(m+1)+m+1])\nend\nbdedge = vcat(bdedge...)\n\nbdnode = Int64[]\nfor j = 1:n+1\n    push!(bdnode, (j-1)*(m+1)+1)\nend\n\nM = compute_fem_mass_matrix1(m, n, h)\nS = spzeros((m+1)*(n+1), (m+1)*(n+1))\nM = [M S;S M]\nH = diagm(0=>[1,1,0.5])\nK = 0.1\nσY = 0.03\n# σY = 1000.\n\n\nstate = zeros(2(m+1)*(n+1),NT+1)\nvelo = zeros(2(m+1)*(n+1),NT+1)\nacce = zeros(2(m+1)*(n+1),NT+1)\nstress = zeros(NT+1, 4*m*n, 3)\ninternal_variable = zeros(NT+1, 4*m*n)\n\nt = 0.0\nfor i = 1:NT \n    @info i \n        ##### STEP 1: Computes the external force ####\n\n    T = eval_f_on_boundary_edge((x,y)->0.02*sin(2π*i*Δt), bdedge, m, n, h)\n    # T = eval_f_on_boundary_edge((x,y)->0.0, bdedge, m, n, h)\n    T = [zeros(length(T)) -T]\n    T = compute_fem_traction_term(T, bdedge, m, n, h)\n    f1 = eval_f_on_gauss_pts((x,y)->0., m, n, h)\n    f2 = eval_f_on_gauss_pts((x,y)->0., m, n, h)\n    # f2 = eval_f_on_gauss_pts((x,y)->0.1, m, n, h)\n    F = compute_fem_source_term(f1, f2, m, n, h)\n    fext = F+T\n\n        ##### STEP 2: Extract Variables ####\n\n    u = state[:,i]\n    ∂∂u = acce[:,i]\n    ∂u = velo[:,i]\n\n    ε0 = eval_strain_on_gauss_pts(u, m, n, h)\n    σ0 = stress[i,:,:]\n    α0 = internal_variable[i,:]\n    \n        ##### STEP 3: Newton Iteration ####\n\n    global t += (1 - αf)*Δt\n    ∂∂up = ∂∂u[:]\n    iter = 0\n    while true\n        iter += 1\n        # @info iter\n        up = (1 - αf)*(u + Δt*∂u + 0.5 * Δt^2 * ((1 - β2)*∂∂u + β2*∂∂up)) + αf*u\n        global fint, stiff, α, σ = compute_planestressplasticity_stress_and_stiffness_matrix(\n            up, ε0, σ0, α0, K, σY, H, m, n, h\n        )\n        res = M * (∂∂up *(1 - αm) + αm*∂∂u)  + fint - fext\n        A = M*(1 - αm) + (1 - αf) * 0.5 * β2 * Δt^2 * stiff\n        A, _ = fem_impose_Dirichlet_boundary_condition(A, bdnode, m, n, h)\n        res[[bdnode; bdnode .+ (m+1)*(n+1)]] .= 0.0\n\n        Δ∂∂u = A\\res\n        ∂∂up -= Δ∂∂u\n        err = norm(res)\n        # @info err\n        if err<1e-8\n            break \n        end\n    end\n    global t += αf*Δt\n    \n        ##### STEP 3: Update State Variables ####\n\n    u += Δt * ∂u + Δt^2/2 * ((1 - β2) * ∂∂u + β2 * ∂∂up)\n    ∂u += Δt * ((1 - γ) * ∂∂u + γ * ∂∂up)\n    stress[i+1,:,:] = σ\n    internal_variable[i+1,:] = α\n    \n    state[:,i+1] = u\n    acce[:,i+1] = ∂∂up\n    velo[:,i+1] = ∂u\nend\n\nx = []\ny = []\nfor j= 1:n+1\n    for i = 1:m+1\n        push!(x, (i-1)*h)\n        push!(y, (j-1)*h)\n    end\nend\n\nfor i = 1:5:NT+1\n    close(\"all\")\n    scatter(x+state[1:(m+1)*(n+1), i], y+state[(m+1)*(n+1)+1:end, i])\n    scatter(x[m+1]+state[m+1, i],\n            y[m+1]+state[(m+1)*(n+1)+m+1, i], color=\"red\")\n    xlabel(\"x\")\n    ylabel(\"y\")\n    k = string(i)\n    k = repeat(\"0\", 3-length(k))*k \n    title(\"t = $k\")\n    ylim(-0.05,0.25)\n    xlim(-0.01, 0.45)\n    gca().invert_yaxis()\n    savefig(\"u$k.png\")\n\n    close(\"all\"); \n    plot(1:i, -state[(m+1)*(n+1)+m+1, 1:i])\n    xlim(0, NT+2)\n    ylim(0, 0.03)\n    scatter(i, -state[(m+1)*(n+1)+m+1, i], color=\"red\")\n    savefig(\"du$k.png\")\nend\n\nrun(`convert -delay 10 -loop 0 u*.png plasticity_u.gif`)\nrun(`convert -delay 10 -loop 0 du*.png plasticity_du.gif`)\n\n","category":"page"},{"location":"heatequation/#Heat-Equation-1","page":"Heat Equation","title":"Heat Equation","text":"","category":"section"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"The strong form of the initial/boundary-value problem of the heat equation is: given f, u_0, q, find ubarOmegatimes 0Trightarrow mathbbR such that","category":"page"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"beginaligned\nrhofracpartial upartial t - nablacdot(Knabla u) = f Omegatimes (0T)\nu = u_0  Gamma_Dtimes (0T)\nKfracpartial upartial n = q Gamma_Ntimes (0T)\nendaligned","category":"page"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"The corresponding weak form is: given f, u_0 and q , find u, such that for all w","category":"page"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"int_Omega rhofracpartial upartial tdelta u mathrmdx + int_Omega Knabla u cdot nabla delta u mathrmd x = int_Omega fdelta u mathrmd x + int_Gamma_N q delta u mathrmdx","category":"page"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"The computational domain is as follows: the top side is the inflow boundary condition and the other sides are Dirichlet boundary condition. ","category":"page"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"(Image: )","category":"page"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"We consider the manufactured solution ","category":"page"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"u(x t) = (x_1^2+x_2^2)e^-tquad rho(x) = (1+x_1^2+x_2^2)","category":"page"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"and ","category":"page"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"K = beginbmatrix\n2  1 \n1  2\nendbmatrix","category":"page"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"Then we have","category":"page"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"beginaligned\nf(x) = -(1+x_1^2+x_2^2)(x_1^2+x_2^2) e^-t - 8 e^-t\nq(x) = -(2x+4y)e^-t\nendaligned","category":"page"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"m = 40\nn = 20\nh = 0.01\nbdedge = []\nfor i = 1:m \n  push!(bdedge, [i i+1])\nend\nbdedge = vcat(bdedge...)\n\nbdnode = Int64[]\nfor j = 1:n+1\n  push!(bdnode, (j-1)*(m+1)+1)\n  push!(bdnode, (j-1)*(m+1)+m+1)\nend\nfor i = 2:m\n  push!(bdnode, n*(m+1)+i)\nend\n\nρ = eval_f_on_gauss_pts((x,y)->1+x^2+y^2, m, n, h)\nM = compute_fem_mass_matrix1(ρ, m, n, h)\n\nK_ = [2.0 1.0\n  1.0 2.0]\nK = compute_fem_stiffness_matrix1(K_, m, n, h)\n\nNT = 200\nΔt = 1/NT \nA = M/Δt+K \nA, Abd = fem_impose_Dirichlet_boundary_condition1(A, bdnode, m, n, h)\nU = zeros((m+1)*(n+1), NT+1)\nfor i = 1:m+1\n  for j = 1:n+1\n    x = (i-1)*h; y = (j-1)*h \n    U[(j-1)*(m+1)+i, 1] = x^2+y^2\n  end\nend\nfor i = 1:NT \n  F = eval_f_on_gauss_pts((x,y)->(-(1+x^2+y^2)*(x^2+y^2)-8)*exp(-i*Δt), m, n, h)\n  F = compute_fem_source_term1(F, m, n, h)\n\n  T = eval_f_on_boundary_edge((x,y)->-(2*x+4*y)*exp(-i*Δt), bdedge, m, n, h)\n  T = compute_fem_flux_term1(T, bdedge, m, n, h)\n\n  rhs = F  + M*U[:,i]/Δt + T\n  bdval = eval_f_on_boundary_node( (x,y)->(x^2+y^2)*exp(-i*Δt), bdnode, m, n, h)\n  rhs[bdnode] = bdval\n  U[:,i+1] = A\\(\n    rhs - Abd*bdval\n  )\nend\n\nUexact = zeros(n+1,m+1)\nfor j = 1:n+1\n  for i = 1:m+1\n    x = (i-1)*h; y = (j-1)*h \n    Uexact[j, i] = (x^2+y^2)*exp(-1)\n  end\nend\npcolormesh(reshape(U[:,end], m+1, n+1)'-Uexact); colorbar()","category":"page"},{"location":"heatequation/#","page":"Heat Equation","title":"Heat Equation","text":"(Image: )","category":"page"},{"location":"coupled_viscoelasticity/#Coupled-Viscoelasticity-and-Single-Phase-Flow-1","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"","category":"section"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"We have considered inverse modeling for viscoelasticity and coupled elasticity and single phase flow inversion. A more complex case is when the constitutive relation is given by the viscoelasticity and the dynamics is governed by the coupled viscoelasticity and single phase flow equation. We consider the same governing equation as the poreelasticity","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"beginaligned\nmathrmdivsigma(u) - b nabla p = 0\nfrac1M fracpartial ppartial t + bfracpartial varepsilon_v(u)partial t - nablacdotleft(frackB_fmunabla pright) = f(xt)\nendaligned","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"with boundary conditions","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"beginaligned\nsigma n = 0quad xin Gamma_N^u qquad u=0 quad xin Gamma_D^u\n-frackB_fmufracpartial ppartial n = 0quad xin Gamma_N^p qquad p=g quad xin Gamma_D^p\nendaligned","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"and the initial condition","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"p(x0) = 0 u(x0) =0 xin Omega","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"The only difference is that the consitutive relation is given by the Maxwell material equation, which has the following form in the discretization (for the definition of H and S, see here)","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"sigma^n+1 = H varepsilon^n+1 + S sigma^n  - Hvarepsilon^n","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"Then the discretization for the mechanics is ","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"int_Omega H varepsilon^n+1  delta varepsilon mathrmdx- int_Omega b p delta u mathrmdx = int_partial Omega mathbftdelta u mathrmds + int_Omega Hvarepsilon^n  deltavarepsilon mathrmd x - int_Omega Ssigma^n  delta varepsilon mathrmd x","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"For the discretization of the fluid equation, see here.","category":"page"},{"location":"coupled_viscoelasticity/#Forward-Simulation-1","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Forward Simulation","text":"","category":"section"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"To have an overview of the viscoelasticiy, we conduct the forward simulation in the injection-production model. An injection well is located on the left while a production well is located on the right. We impose the Dirichlet boundary conditions for u  and no flow boundary conditions for the pressure on four sides. We run the results with Lamé constants lambda=20 and mu=05, and three different viscosity eta = 10000 1, and 01. The case  eta = 10000 corresponds to a nearly linear elastic constitutive relation. The typical characteristics of viscoelasticity in our experiments are that they usually possess larger stresses and smaller displacements. ","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"Description eta=10000 eta=1 eta=01\nPressure (Image: ) (Image: ) (Image: )\nsigma_xx (Image: ) (Image: ) (Image: )\nsigma_xy (Image: ) (Image: ) (Image: )\nsigma_yy (Image: ) (Image: ) (Image: )\nu (Image: ) (Image: ) (Image: )\nv (Image: ) (Image: ) (Image: )\nsigma_xx at the center point (Image: ) (Image: ) (Image: )\nu at the center point (Image: ) (Image: ) (Image: )\nvarepsilon_xx at the center point (Image: ) (Image: ) (Image: )","category":"page"},{"location":"coupled_viscoelasticity/#Inverse-Modeling-1","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Inverse Modeling","text":"","category":"section"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"In the inverse modeling, the initial conditions and boundary conditions are ","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"Here u, sigma, and p are all initialized to zero. \nFixed Dirichlet boundaries for u on the bottom. \nTraction-free boundary conditions (free surface) for u on the other three sides\nNo-flow condition for p on all sides. ","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"We have 5 sets of training data, each corresponds to a Delta production (injection) source with the magnitude 02i, i=1234 and 5​. We show a typical dataset below. ","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"Pressure sigma_xx sigma_yy sigma_xy u v\n(Image: disp_p_inv_visco1.0) (Image: disp_sxx_inv_visco1.0) (Image: disp_syy_inv_visco1.0) (Image: disp_sxy_inv_visco1.0) (Image: disp_u_inv_visco1.0) (Image: disp_v_inv_visco1.0)","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"Displacement sigma_xx at the center point varepsilon_xx  at the center point u at the center point\n(Image: disp_scattered_u) (Image: sigmaxx1.0) (Image: varepsilonxx1.0) (Image: ux1.0)","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"The observation data is the x-direction displacement at all time steps on the surface. We will consider several kinds of inversion. ","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"Parametric inversion. In this case, we assume we already know the form of the consitutitve relation and we only need to estimate mu, lambda and eta. code\nLinear elasticity approximation. In this case, the constitutive relation is assumed to have the linear elasticity form code\nsigma = Hvarepsilon\nHere H is an unknown SPD matrix. \nDirect inversion. The constitutive relation is substituted by \nsigma^n+1 = mathcalNN(sigma^n varepsilon^n)\nwhere mathcalNN is a neural network. code\nImplicit inversion. The constitutive relation is subsituted by \nsigma^n+1 = mathcalNN(sigma^n varepsilon^n) + Hvarepsilon^n+1\nwhere mathcalNN is a neural network and H is an unknown SPD matrix. The motivation of this form is to improve the conditioning of the implicit numerical scheme.  code","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"To evaluate the inverse modeling result, we consider a test dataset which corresponds to the magnitude 0.5 for the Delta sources. We measure the displacement and Von Mises stress. For the first inversion, we report the values. ","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"For the parametric inversion, we have the following result","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"(Image: loss) (Image: s_param) (Image: u_param)\nLoss Function Von Mises Stress Displacement","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"Parameter Initial Guess Estimated True\nmu 1.5 0.49999986292871396 0.5\nlambda 1.5 1.9999997784851993 2.0\neta 1.5 0.9999969780184615 1.0","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"For the other three types of inversion, the results are presented below","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"Reference Linear Elasticity Direct Implicit\n(Image: disp_s_inv_visco_ref) (Image: s_l) (Image: s_di) (Image: s_nn)\n(Image: disp_scattered_u_inv_visco_ref) (Image: u_l) (Image: u_di) (Image: u_nn)","category":"page"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"The results are reported at 2000-th iteration. In terms of the Von Mises stress, we see that the direct training gives us the best result (note the scale of the colorbar). ","category":"page"},{"location":"coupled_viscoelasticity/#Forward-Simulation-Codes-1","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Forward Simulation Codes","text":"","category":"section"},{"location":"coupled_viscoelasticity/#","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"using Revise\nusing PoreFlow\nusing PyCall\nusing LinearAlgebra\nusing ADCME\nusing MAT\nusing PyPlot\nnp = pyimport(\"numpy\")\n\n# Domain information \nNT = 50\nΔt = 1/NT\nn = 20\nm = 2*n \nh = 1.0/n \nbdnode = Int64[]\nfor i = 1:m+1\n    for j = 1:n+1\n        if i==1 || i==m+1 || j==1|| j==n+1\n            push!(bdnode, (j-1)*(m+1)+i)\n        end\n    end\nend\n\nis_training = false\nb = 1.0\n\ninvη = 1.0\nif length(ARGS)==1\n    global invη = parse(Float64, ARGS[1])\nend\n\nλ = constant(2.0)\nμ = constant(0.5)\ninvη = constant(invη)\n\niS = tensor(\n    [1+2/3*μ*Δt*invη -1/3*μ*Δt*invη 0.0\n    -1/3*μ*Δt*invη 1+2/3*μ*Δt*invη 0.0 \n    0.0 0.0 1+μ*Δt*invη]\n)\nS = inv(iS)\nH = S * tensor([\n    2μ+λ λ 0.0\n    λ 2μ+λ 0.0\n    0.0 0.0 μ\n])\n\n\nQ = SparseTensor(compute_fvm_tpfa_matrix(m, n, h))\nK = compute_fem_stiffness_matrix(H, m, n, h)\nL = SparseTensor(compute_interaction_matrix(m, n, h))\nM = SparseTensor(compute_fvm_mass_matrix(m, n, h))\nA = [K -b*L'\nb*L/Δt 1/Δt*M-Q]\nA, Abd = fem_impose_coupled_Dirichlet_boundary_condition(A, bdnode, m, n, h)\n# error()\nU = zeros(m*n+2(m+1)*(n+1), NT+1)\nx = Float64[]; y = Float64[]\nfor j = 1:n+1\n    for i = 1:m+1\n        push!(x, (i-1)*h)\n        push!(y, (j-1)*h)\n    end\nend\n    \ninjection = (div(n,2)-1)*m + 3\nproduction = (div(n,2)-1)*m + m-3\n\n\nfunction condition(i, tas...)\n    i<=NT\nend\n\nfunction body(i, tas...)\n    ta_u, ta_ε, ta_σ = tas\n    u = read(ta_u, i)\n    σ0 = read(ta_σ, i)\n    ε0 = read(ta_ε, i)\n    rhs1 = compute_fem_viscoelasticity_strain_energy_term(ε0, σ0, S, H, m, n, h)\n    rhs2 = zeros(m*n)\n    rhs2[injection] += 1.0\n    rhs2[production] -= 1.0\n    rhs2 += b*L*u[1:2(m+1)*(n+1)]/Δt + \n            M * u[2(m+1)*(n+1)+1:end]/Δt\n    rhs = [rhs1;rhs2]\n    o = A\\rhs \n\n    ε = eval_strain_on_gauss_pts(o, m, n, h)\n    σ = σ0*S + (ε - ε0)*H\n    ta_u = write(ta_u, i+1, o)\n    ta_ε = write(ta_ε, i+1, ε)\n    ta_σ = write(ta_σ, i+1, σ)\n    i+1, ta_u, ta_ε, ta_σ\nend\n\ni = constant(1, dtype=Int32)\nta_u = TensorArray(NT+1); ta_u = write(ta_u, 1, constant(zeros(2(m+1)*(n+1)+m*n)))\nta_ε = TensorArray(NT+1); ta_ε = write(ta_ε, 1, constant(zeros(4*m*n, 3)))\nta_σ = TensorArray(NT+1); ta_σ = write(ta_σ, 1, constant(zeros(4*m*n, 3)))\n_, u_out, ε_out, σ_out = while_loop(condition, body, [i, ta_u, ta_ε, ta_σ])\nu_out = stack(u_out)\nu_out.set_shape((NT+1, size(u_out,2)))\nσ_out = stack(σ_out)\nε_out = stack(ε_out)\n\nupper_idx = Int64[]\nfor i = 1:m+1\n    push!(upper_idx, (div(n,3)-1)*(m+1)+i)\n    push!(upper_idx, (div(n,3)-1)*(m+1)+i + (m+1)*(n+1))\nend\nfor i = 1:m \n    push!(upper_idx, (div(n,3)-1)*m+i+2(m+1)*(n+1))\nend\n\nsess = Session(); init(sess)\nU, Sigma, Varepsilon, ev = run(sess, [u_out,σ_out,ε_out, invη])\nvisualize_displacement(U'|>Array, m, n, h, name=\"_visco$ev\")\nvisualize_pressure(U'|>Array, m, n, h, name=\"_visco$ev\")\nvisualize_displacement(U'|>Array, m, n, h, name=\"_visco$ev\")\nvisualize_stress(Sigma[:,:,1]'|>Array, m, n, h, name=\"xx_visco$ev\")\nvisualize_stress(Sigma[:,:,2]'|>Array, m, n, h, name=\"yy_visco$ev\")\nvisualize_stress(Sigma[:,:,3]'|>Array, m, n, h, name=\"xy_visco$ev\")\n\n\nidx = m÷2 + (n÷2)*m\nclose(\"all\")\nplot(LinRange(0,1.0, NT+1),Sigma[:,4*(idx-1)+1,1])\nxlabel(\"time\")\nylabel(\"\\$\\\\sigma_{xx}\\$\")\nsavefig(\"sigmaxx$ev.jpeg\")\n\nclose(\"all\")\nplot(LinRange(0,1.0, NT+1),Varepsilon[:,4*(idx-1)+1,1])\nxlabel(\"time\")\nylabel(\"\\$\\\\varepsilon_{xx}\\$\")\nsavefig(\"varepsilonxx$ev.jpeg\")\n\nidx = m÷2 + (n÷2)*(m+1)\nclose(\"all\")\nplot(LinRange(0,1.0, NT+1),U[:,4*(idx-1)+1])\nxlabel(\"time\")\nylabel(\"\\$u_x\\$\")\nsavefig(\"ux$ev.jpeg\")","category":"page"},{"location":"viscoelasticity_earth/#Modeling-Viscoelasticity-of-the-Earth-1","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"","category":"section"},{"location":"viscoelasticity_earth/#","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"In a previous section, we consider the viscoelasticity constitutive relation. In this section, we consider an application case: the viscoelasticity of the Earth. We show the viscoelasticity effect related with postseismic relaxation under two settings: strike-slip fault and dip-slip fault. The background of these problems can be found in Chapter 6 of Segall, P. (2010)'s book \"Earthquake and volcano deformation\".","category":"page"},{"location":"viscoelasticity_earth/#","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"In geology, a fault is a planar fracture or discontinuity in a volume of rock across which there has been significant displacement as a result of rock-mass movement. There are many types of faults based on the direction of slip. In this section, we focus on two types of slip: strike-slip, where the offset is predominantly horizontal, and dip-slip, where offset is predominately vertical. ","category":"page"},{"location":"viscoelasticity_earth/#","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"<center>\n<img src=\"../assets/visco-earth/fault.png\" width=\"60%\">\n</center>","category":"page"},{"location":"viscoelasticity_earth/#","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"We use a viscoelasticity model to describe the fault evolution. The mathematical equations are discretized on an unstructure quadrilateral mesh using the finite element method. In another section, we estimate the viscoelasticity parameter from surface displacement data using a gradient-based optimization (L-BFGS-B) technique.  We utilize the AD-capable ViscoelasticitySolver in NNFEM for forward computational and automatic differentiation. ","category":"page"},{"location":"viscoelasticity_earth/#Strike-slip-Fault-Setting-1","page":"Modeling Viscoelasticity of the Earth","title":"Strike-slip Fault Setting","text":"","category":"section"},{"location":"viscoelasticity_earth/#","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"In this case, the displacement only occurs in the z direction, so we can use a scalar valued function u(xy) to denote the displacement. ","category":"page"},{"location":"viscoelasticity_earth/#","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"<center>\n<img src=\"../assets/visco-earth/strikeslip-model.png\" width=\"60%\">\n</center>","category":"page"},{"location":"viscoelasticity_earth/#","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"The constitutive relation is described by the Maxwell viscoelasticity model","category":"page"},{"location":"viscoelasticity_earth/#","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"beginaligneddot sigma_31 + fracmueta sigma_31 = 2mudotepsilon_31 dot sigma_32 + fracmueta sigma_32 = 2mudotepsilon_32endaligned","category":"page"},{"location":"viscoelasticity_earth/#","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"Here","category":"page"},{"location":"viscoelasticity_earth/#","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"epsilon_31 = fracpartial upartial xquad epsilon_32 = fracpartial upartial y","category":"page"},{"location":"viscoelasticity_earth/#","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"To complete the equation, we also have the balance of linear momentum (kinematic equation)","category":"page"},{"location":"viscoelasticity_earth/#","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"sigma_311 + sigma_322 + f = rho ddot u","category":"page"},{"location":"viscoelasticity_earth/#","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"where f is the body force and rho is the density. ","category":"page"},{"location":"viscoelasticity_earth/#","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"note: Note\nIn the case eta is very small, the constitutive relation can be approximated by  sigma_31 = 2eta dotepsilon_31quad sigma_32 = 2eta dotepsilon_32By plugging the equations into Equation 1 (ignoring the body force), and integrate  in time2eta (epsilon_311 + epsilon_322)  = rho dot u Rightarrow 2eta Delta u = rho dot u tag1Equation 1 is a diffusion equation. ","category":"page"},{"location":"viscoelasticity_earth/#","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"note: Note\nIn the case eta is very large, the constitutive relation is reduced to linear elasticitysigma = 2muepsilonTherefore, the kinematic equation is reduced to a wave equation2mu Delta u = ddot uWe discretize the constitutive relation using an implicit schemefracsigma^n+1 - sigma^nDelta t + fracmuetasigma^n+1 = 2mu fracepsilon^n+1-epsilon^nDelta twhich is equivalent to sigma^n+1 = frac2muetaeta + muDelta tepsilon^n+1- frac2muetaeta + muDelta tepsilon^n + fracetaeta+muDelta tsigma^n","category":"page"},{"location":"viscoelasticity_earth/#Numerical-result-1","page":"Modeling Viscoelasticity of the Earth","title":"Numerical result","text":"","category":"section"},{"location":"viscoelasticity_earth/#","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"displacement u velocity dot u strain rate   partial dot u  partial x\n(Image: ) (Image: ) (Image: )","category":"page"},{"location":"viscoelasticity_earth/#Dip-slip-Fault-Setting-1","page":"Modeling Viscoelasticity of the Earth","title":"Dip-slip Fault Setting","text":"","category":"section"},{"location":"viscoelasticity_earth/#","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"The constitutive relation of a dip-slip fault can be described by a plane strain viscoelasticity model","category":"page"},{"location":"viscoelasticity_earth/#","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"Finite element model Elastic response\n(Image: ) (Image: )","category":"page"},{"location":"viscoelasticity_earth/#Numerical-result-2","page":"Modeling Viscoelasticity of the Earth","title":"Numerical result","text":"","category":"section"},{"location":"viscoelasticity_earth/#","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"horizontal slip u_x vertical slip u_y von Mises stress\n(Image: ) (Image: ) (Image: )","category":"page"},{"location":"viscoelasticity_earth/#","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"<center>\n<img src=\"../assets/visco-earth/dipslip-disp.gif\" width=\"50%\">\n</center>","category":"page"},{"location":"viscoelasticity_earth/#","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"Example code: dippingfaultviscosityforward.jl.","category":"page"},{"location":"coupled/#Coupled-Geomechanics-and-Single-Phase-Flow-1","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"","category":"section"},{"location":"coupled/#Mathematical-Formulation-1","page":"Coupled Geomechanics and Single Phase Flow","title":"Mathematical Formulation","text":"","category":"section"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"The governing equation for mechanical deformation of the solid-fluid system is ","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"boxedmathrmdiv sigma + rho_b g = 0","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"where mathrmdiv is the divergence operator, sigma is the Cauchy total-stress ","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"sigma = beginbmatrix\nsigma_xx  sigma_xy\nsigma_xy  sigma_yy\nendbmatrix","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"and ginmathbbR^2 is the gravity vector, rho_b=phi rho_f + (1-phi)rho_s  is the bulk density, rho_f is total fluid density, rho_s is the density of the solid phase and phi is the true porosity. ","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"The stress-strain relation for linear poroelasticity takes the form ","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"sigma = sigma - bpmathbfIquad sigma = beginbmatrix\nsigma_xx  sigma_xy\nsigma_xy  sigma_yy\nendbmatrix\nquadbeginbmatrix\ndeltasigma_xxdeltasigma_yydeltasigma_xy\nendbmatrix = Hbeginbmatrix\ndeltavarepsilon_xxdeltavarepsilon_yy2deltavarepsilon_xy\nendbmatrix","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"where mathbfI is the identity matrix, p is the pressure, b is the Biot coefficient, D is the elasticity matrix","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"H = fracE(1-nu^2)beginbmatrix\n1  nu 0\nnu  1  0\n0  0  1-nu\nendbmatrix","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Here E is the Young modulus,  nu is the Poisson ratio and  varepsilon is the strain","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"varepsilon = beginbmatrix\nvarepsilon_xx  varepsilon_xy\nvarepsilon_xy  varepsilon_yy\nendbmatrix","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"info: Info\nThe relation between sigma and varepsilon may be nonlinear; that's why we only write delta sigma in terms of delta varepsilon. ","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"The fluid mass convervation in terms of pressure and volumetric strain is given by ","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"boxedfrac1Mfracpartial ppartial t + bfracpartial varepsilon_vpartial t + mathrmdivmathrmv = f","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"where varepsilon_v = mathrmtr varepsilon, f is a volumetric source term and ","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"mathbfv = -frac1B_ffrackmu(nabla p - rho_f g)","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"where k is the absolute permeability tensor, mu is the fluid viscosity and B_f is the formation volume factor of the fluid. ","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"The mechanical equation and fluid equation are coupled through p and varepsilon. In the drained split scheme, in each step p is kept fixed while solving the mechanics equation and then the fluid equation is solved keeping varepsilon fixed. The drained scheme can be viewed as a Jacobian iteration of the fully coupled system. ","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"note: Note\nThe linear poroelasticity equations with g=0 can be expressed as [linear]beginaligned\nmathrmdivsigma(u) - b nabla p = 0\nfrac1M fracpartial ppartial t + bfracpartial varepsilon_v(u)partial t - nablacdotleft(frackB_fmunabla pright) = f(xt)\nendaligned​with boundary conditionsbeginaligned\nsigma n = 0quad xin Gamma_N^u qquad u=0 quad xin Gamma_D^u\n-frackB_fmufracpartial ppartial n = 0quad xin Gamma_N^p qquad p=g quad xin Gamma_D^p\nendalignedand the initial conditionp(x0) = p_0 u(x0) =0 xin Omega","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"[linear]: Kolesov, Alexandr E., Petr N. Vabishchevich, and Maria V. Vasilyeva. \"Splitting schemes for poroelasticity and thermoelasticity problems.\" Computers & Mathematics with Applications 67.12 (2014): 2185-2198.","category":"page"},{"location":"coupled/#Numerical-Discretization-1","page":"Coupled Geomechanics and Single Phase Flow","title":"Numerical Discretization","text":"","category":"section"},{"location":"coupled/#Mechanics-1","page":"Coupled Geomechanics and Single Phase Flow","title":"Mechanics","text":"","category":"section"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"We discretize the domain 0(n-1)htimes 0 (m-1)h uniformly with step size h.","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"(Image: )","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"The finite element method is usually used to solve the mechanics equation, whose discretization reads","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"int_Omega delta varepsilon sigmamathrmdx - int_Omega b p delta varepsilon_vmathrmdx = int_Gamma tcdotdelta umathrmds + int_Omega rho_b gcdotdelta u dx","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"where t = sigma n = sigma n - bpn, Gamma is the part of partial Omega with external traction,  and n is the unit normal vector pointing outwards. One each element A, define u_A as the nodal values of the basis functions whose supports overlap A, then the strain at (xy) can be expressed as (see the figure for illustration)","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"varepsilon_A = Bu_A quad varepsilon_A =beginbmatrix\nvarepsilon_xx\nvarepsilon_yy\n2varepsilon_xy\nendbmatrixquad\nu_A = beginbmatrix\nu_1\nu_2\nu_3\nu_4\nv_1\nv_2\nv_3\nv_4\nendbmatrix","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"where ","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"B = beginbmatrix\nfracpartial N_1partial x  fracpartial N_2partial x  fracpartial N_3partial x  fracpartial N_4partial x  0  0  0  0\n0  0  0  0  fracpartial N_1partial y  fracpartial N_2partial y  fracpartial N_3partial y  fracpartial N_4partial y\nfracpartial N_1partial y  fracpartial N_2partial y  fracpartial N_3partial y  fracpartial N_4partial y  fracpartial N_1partial x  fracpartial N_2partial x  fracpartial N_3partial x  fracpartial N_4partial x\nendbmatrix = beginbmatrix\n-frac1-etahfrac1-etah -fracetah  fracetah  0  0  0  0\n0  0  0  0  -frac1-xih  -fracxih  frac1-xih  fracxih\n-frac1-xih  -fracxih  frac1-xih  fracxih  -frac1-etahfrac1-etah -fracetah  fracetah\nendbmatrix","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"and","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"xi = fracx-x_0hquad eta = fracy-y_0h","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"(Image: )","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"The terms in the weak form can be expressed as ","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"int_Adelta varepsilon sigmamathrmdx = int_A u_AB^TDBdelta u_Amathrmdx","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"int_A b p delta varepsilon_vmathrmdx = int_A bp 110B^Tdelta u_Amathrmdx","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Typically, the integration is computed using Gauss quadrature; for example, we have","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"int_A u_AB^TDBdelta u_Amathrmdx = u_A leftsum_i=1^n_g B(xi_i eta_i)^T DB(xi_i eta_i)h^2w_irightdelta u_A","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"where (x_i eta_i) are Gauss quadrature points and w_i is the corresponding weight. ","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"note: Note\nWe have the following convention for bdnode and bdedge, which denote the Dirichlet boundary conditions and the Neumann boundary conditions:bdnodein mathbfR^d and each entry in bdnode represents the node index. The corresponding row and column indices can be retrieved with femidx.\nbdedgein mathbfR^dtimes 2 and each row in bdedge represents indices of two end points of the edge. The corresponding cell row and column can be retrieved with fvmidx.","category":"page"},{"location":"coupled/#Fluid-1","page":"Coupled Geomechanics and Single Phase Flow","title":"Fluid","text":"","category":"section"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"The fluid equation is discretized using finite volume method. ","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"int_A_i frac1Mfracp_i^n+1 - p_i^nDelta t mathrmdx + int_A_i b fracvarepsilon_v^n+1-varepsilon_v^nDelta t mathrmd x + int_A_i mathrmdivmathbfvmathrmdx = int_A_i fmathrmdx","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"For the divergence term, we use the two-point flux approximation and we have (assuming k is a constant scalar)","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"int_A_i mathrmdivmathbfv mathrmdx = -frackB_fmusum_j=1^n_mathrmfaces (q_j-q_i) = -frackB_fmusum_j=1^n_mathrmfaces (p_j^n+1 - p_i^n+1) + frackrho_fgB_fmusum_j=1^n_mathrmfaces (y_j-y_i)","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"where","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"q = p^n+1 - rho_fgy","category":"page"},{"location":"coupled/#Initial-and-Boundary-Conditions-1","page":"Coupled Geomechanics and Single Phase Flow","title":"Initial and Boundary Conditions","text":"","category":"section"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"For the mechanial problem we consider","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Prescribed displacement: u = bar u; or\nPrescribed traction: sigmacdot n=bar t (also called overburden).","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"For the flow problem we consider","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Prescribed pressure: p=bar p; or\nPrescribed volumetric flux: mathbfvcdot n=bar v (called no flow if bar v=0).","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"The initial displacement and strains are zero. The initial pressure is prescribed. ","category":"page"},{"location":"coupled/#Verification-1","page":"Coupled Geomechanics and Single Phase Flow","title":"Verification","text":"","category":"section"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"To verify our numerical scheme, we consider manufactured solution u(xy) = beginbmatrix x^2+y^2\nx^2-y^2 endbmatrixtquad p(xy) = x^2y^2(1-x)^2(1-y)^2e^-t","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Then we have","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"beginaligned\nf(xyt)= (-x^2y^2(x - 1)^2(y - 1)^2 - 2x^2y^2(x - 1)^2 - 2x^2y^2(y - 1)^2 - 8x^2y(x - 1)^2(y - 1) - 2x^2(x - 1)^2(y - 1)^2 - 8xy^2(x - 1)(y - 1)^2 - 2y^2(x - 1)^2(y - 1)^2 + 2(x - y)exp(t))exp(-t)\ng(xyt)= beginbmatrix\n3t-2xe^-t\n-t + 2ye^-t\nendbmatrix\nendaligned","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Description u displacement v displacement Pressure\nNumerical Result (Image: disp_u_out) (Image: disp_v_out) (Image: disp_p_out)\nError (Image: disp_u_diff) (Image: disp_v_diff) (Image: disp_p_diff)","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Code","category":"page"},{"location":"coupled/#Benchmarks-1","page":"Coupled Geomechanics and Single Phase Flow","title":"Benchmarks","text":"","category":"section"},{"location":"coupled/#Flooding-1","page":"Coupled Geomechanics and Single Phase Flow","title":"Flooding","text":"","category":"section"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Code","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"u displacement v displacement Pressure Von Mises Stress\n(Image: disp_u_flood) (Image: disp_v_flood) (Image: disp_p_flood) (Image: )","category":"page"},{"location":"coupled/#Injection-Production-in-Homogenious-Media-1","page":"Coupled Geomechanics and Single Phase Flow","title":"Injection-Production in Homogenious Media","text":"","category":"section"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Code","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"u displacement v displacement Pressure\n(Image: disp_u_flood) (Image: disp_v_flood) (Image: disp_p_flood)","category":"page"},{"location":"coupled/#Injection-Production-in-Homogenious-Media-and-with-J2-plasticity-1","page":"Coupled Geomechanics and Single Phase Flow","title":"Injection-Production in Homogenious Media and with J2 plasticity","text":"","category":"section"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Code","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Description u displacement v displacement Pressure\nK = 05 sigma_Y = 03 (Image: ) (Image: ) (Image: )\nK = 0 sigma_Y = 03 (Image: ) (Image: ) (Image: )\nK = 05 sigma_Y = 10 (Image: ) (Image: ) (Image: )","category":"page"},{"location":"coupled/#Injection-Production-in-Heterogenious-Media-1","page":"Coupled Geomechanics and Single Phase Flow","title":"Injection-Production in Heterogenious Media","text":"","category":"section"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Code","category":"page"},{"location":"coupled/#","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"u displacement v displacement Pressure\n(Image: disp_u_flood) (Image: disp_v_flood) (Image: disp_p_flood)","category":"page"},{"location":"nonlinear_viscoelasticity/#Nonlinear-Viscoelasticity-1","page":"Nonlinear Viscoelasticity","title":"Nonlinear Viscoelasticity","text":"","category":"section"},{"location":"nonlinear_viscoelasticity/#","page":"Nonlinear Viscoelasticity","title":"Nonlinear Viscoelasticity","text":"We consider the nonlinear elasticity. In this case, the viscosity depends on the stress. [^nonlinear viscosity]","category":"page"},{"location":"nonlinear_viscoelasticity/#","page":"Nonlinear Viscoelasticity","title":"Nonlinear Viscoelasticity","text":"[^nonlinear viscosity]: http://www.mate.tue.nl/~piet/inf/trc/pdf/infmamo1d.pdf","category":"page"},{"location":"nonlinear_viscoelasticity/#","page":"Nonlinear Viscoelasticity","title":"Nonlinear Viscoelasticity","text":"(Image: image-20200227153439348)","category":"page"},{"location":"nonlinear_viscoelasticity/#","page":"Nonlinear Viscoelasticity","title":"Nonlinear Viscoelasticity","text":"The constitutive equations are  $ \\begin{aligned} \\dot \\varepsilon &= \\dot \\varepsilone + \\dot \\varepsilonv\\\n\\sigma &= s + w = E\\varepsilone + H \\varepsilon\\\n\\dot \\varepsilonv &= \\frac{1}{\\eta(|s|)}s \\end{aligned} $ The high dimensional correspondence is ","category":"page"},{"location":"nonlinear_viscoelasticity/#","page":"Nonlinear Viscoelasticity","title":"Nonlinear Viscoelasticity","text":"$","category":"page"},{"location":"nonlinear_viscoelasticity/#","page":"Nonlinear Viscoelasticity","title":"Nonlinear Viscoelasticity","text":"k1s{ij} + \\eta(|s|)\\dot s{ij} = k1k2e{ij} + (k1+k2) \\eta\\dot e_{ij}$","category":"page"},{"location":"nonlinear_viscoelasticity/#","page":"Nonlinear Viscoelasticity","title":"Nonlinear Viscoelasticity","text":"where","category":"page"},{"location":"nonlinear_viscoelasticity/#","page":"Nonlinear Viscoelasticity","title":"Nonlinear Viscoelasticity","text":"e_ij = varepsilon_ij - varepsilon_kk delta_ij qquad sigma_ij = s_ij + Kvarepsilon_kkdelta_ij","category":"page"},{"location":"twophaseflow/#Coupled-Geomechanics-and-Multiphase-Flow-1","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"","category":"section"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"The main focus of this section is to describe the coupled system of geomechanics and multiphase flow equations. ","category":"page"},{"location":"twophaseflow/#Governing-Equations-1","page":"Coupled Geomechanics and Multiphase Flow","title":"Governing Equations","text":"","category":"section"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"The governing equation of coupled geomechanics and multiphase flow can be described in terms of solid and fluid equations [geomechanics].","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"[geomechanics]: Wan, Jing. Stabilized finite element methods for coupled geomechanics and multiphase flow. Diss. stanford university, 2003. ","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Equations for the Solid","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"We assume that the solid density is constant, and therefore, the mass balance equation of the deforming porous medium is","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"fracpartialpartial t (1-phi) + nablacdot(1-phi)mathbfv_s = 0 Leftrightarrow fracpartial phipartial t + nabla cdot (mathbfv_s phi) = nabla cdot mathbfv_s tag1","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"The solid velocity mathbfv_s is given by  ","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"mathbfv_s = fracdmathbfudt","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"and therefore we have ","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"nabla cdot mathbfv_s =fracddt nabla  cdot mathbfu = fracpartial varepsilon_volpartial t","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"where the volumetric strain ","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"varepsilon_vol = nabla cdot mathbfu","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"It can be shown that Equation 1 leads to the variation of porosity:","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"boxedphi = 1-(1-phi_0)exp(-varepsilon_vol)  tag2","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Equations for the Fluids","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"The mass balance equations of multiphase multicomponent fluid are given by","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"fracpartial partial t(phi S_irho _i) + nabla  cdot (rho _imathbfv_is) = rho _iq_i quad i = 12 tag3","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"The linear momentum balance equation is given by ","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"mathbfv_is =  - fracKk_ri(S_i)tildemu_i(nabla P_i - grho _inabla Z) quad i=12 tag4","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Here, K is the permeability tensor, but in our case we assume it is a space varying scalar value. k_ri(S_i) is a function of S_i, and typically the higher the saturation, the easier the corresponding phase is to flow. tilde mu_i is the viscosity. Z is the depth cordinate, rho_i is the density, phi is the porosity, q_i is the source, P_i is the fluid pressure and g is the velocity constant. We assume the movement of the solid is slow in this study, therefore Darcy’s law is still valid without acceleration terms.","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"mathbfv_is","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"is the relative velocity of the phase i with respect to mathbfv_s (also called interstitial velocity). ","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Fluid and Mechanics Coupling","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"nabla cdot sigma - nabla left( S_1P_1 + S_2P_2 right) + mathbff = 0tag5","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Here sigma should be understood as the effective stress, which allows us to treat a multiphase porous medium as a mechanically equivalent single‐phase continuum. We use the concept of equivalent pressure in (5)","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"P_E = S_1P_1 + S_2P_2 - int_Omega (S_1P_1 + S_2P_2) mathrmd x","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Constitutive Relation","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"The constitutive relation connects sigma and the displacement mathbfu. For example, the linear elastic relation is expressed as ","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"sigma = lambda mathbfInabla cdot mathbfu + 2mu varepsilon tag6","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Here, the strain is the Cauchy strain","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"varepsilon = frac12(nabla mathbfu + (nabla mathbfu)^T)","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Instead of assuming a linear elasticity model for the geomechanics, we can also model the subsurface solid material by a viscoelasticity model (see here for details). For example, the constitutive relation for the two dimensiona Maxwell material is as follows:","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"dot sigma_ij + fracmueta left( sigma_ij - fracsigma_kk3delta_ij right) = 2mu dot varepsilon_ij + lambda dotvarepsilon_kkdelta_ij","category":"page"},{"location":"twophaseflow/#Numerical-Scheme-1","page":"Coupled Geomechanics and Multiphase Flow","title":"Numerical Scheme","text":"","category":"section"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"We use an iterative algorithm to solve the coupled equation; namely, we alternatively solve the mechanics equation and flow equation. ","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"(Image: image-20200313003554865)","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Fluid Equation","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"We define the fluid potential ","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Psi_i = P_i - rho_i gZ","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"and the capillary potential ","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Psi_c = Psi_1 - Psi_2 = P_1 -P_2 - (rho_1-rho_2)gZ approx - (rho_1-rho_2)gZ","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Here the capillary pressure P_c = P_1-P_2 is assumed to be small. We define mobilities ","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"m_i(S_i) = frack_ri(S_i)tildemu_i i=12quad m_t = m_1 + m_2","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"We have the following formula from Equations 3-4:","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"-nablacdot (m_tKnabla Psi_2) = nabla cdot(m_1 Knabla Psi_c) - fracpartial phipartial t + q_1 + q_2 tag7","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"We can solve for Psi_2 using a Poisson solver. ","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Next, we have from Equations 3-4","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"phifracpartial S_2partial t + S_2 fracpartialphipartial t + nabla cdot (-K m_2 nabla Psi_2) = q_2 + q_1 fracm_2m_1 tag8","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Note we have an extra term q_1 fracm_2m_1 to account for the assumption of zero capillary pressure. ","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Equation 8 is a nonlinear equation in S_2 (m_2 is defined in terms of S_2=1-S_1) and requires a Newton-Raphson solver. ","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Solid Equation","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Upon solving the fluid equation, we obtain S_1 S_2 Psi_2. We can use Psi_2 to estimate the fluid pressure P_1 and P_2. Use Equations 5 and 6, we solve for mathbfu using","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"int_Omega sigma delta varepsilon mathrmd x + int_Omega (S_1P_1+S_2P_2)delta varepsilon_v mathrmdx = 0 Leftrightarrow int_Omega sigma delta varepsilon mathrmd x - int_Omega (Psi_2 + rho_2 gZ)delta varepsilon_v mathrmdx = 0","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Here varepsilon_v = varepsilon_xx + varepsilon_yy = u_x + u_y. ","category":"page"},{"location":"twophaseflow/#Example-1","page":"Coupled Geomechanics and Multiphase Flow","title":"Example","text":"","category":"section"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"We simulate  the coupled geomechanics  (both the linear elastic and the viscoelastic material) and two phase flow model. The two models share the same Lamé constants lambda and mu (or equivalently, E and nu), except that the viscoelasticity model has one more viscosity parameter eta. We show an animation of the von Mises stress, displacement (magnified by 50x), the fluid potential for the wet phase (Psi_2), and the saturation. Particularly, we plot the x-direction displacements on the surface. The displacement data will be used as observation in the inverse problem. ","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"The setting is as follows: we consider a layer model for the relative permeability K (the values of the space varying K are known). The blue triangle denotes the injection well, and the orange triangle denotes the production well. The blue triangles denote receivers, where we can collect horizontal displacement–-for example, we can obtain these data from satellite images. ","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"(Image: linear_disp)","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"The two flow phases are the oil and the water (the wet phase), and we use number 1 and 2 to denote them respectively. The computational domain is has 450 depth and 900 width, and it is discretized into 15times 30 uniform squares for both the finite element method (for the mechanics equation) and the finite volume method (for the fluid equation). The simulation has time horizon 01000 and is temporally discretized into 50 intervals. The other parameters for simulations are: rho_1=1053, rho_2=5019, tildemu_1=1, tildemu_2=01, g =98. In the linear elasticity case, we use E=6times 10^9 and nu=035. In the viscoelasticity case, in addition to the Lamé constants, the viscosity parameter eta=67times 10^11. ","category":"page"},{"location":"twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Model Linear Elasticity Viscoelasticity\nDisplacement u (Image: linear_disp) (Image: visco_disp)\nSaturation S_2 (Image: linear_sat) (Image: visco_sat)\nPotential Psi_2 (Image: linear_potential) (Image: visco_potential)\nPressure p (Image: linear_pressure) (Image: visco_pressure)\nVon Mises Stress sigma_mathrmvm (Image: linear_vm) (Image: visco_vm)\nObservation u_mathrmobs (Image: linear_obs) (Image: visco_obs)","category":"page"},{"location":"viscoelasticity/#Viscoelasticity-1","page":"Viscoelasticity","title":"Viscoelasticity","text":"","category":"section"},{"location":"viscoelasticity/#Viscoelasticity-Theory-1","page":"Viscoelasticity","title":"Viscoelasticity Theory","text":"","category":"section"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"To describe the viscoelasticity, we need to relate both the viscosity strain epsilon^vp and the elasticity strain epsilon^e to the stress sigma. The latter is given by ","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"boxedepsilon^e= fracsigmaE","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"The constitutive relation of epsilon^vp is given by ","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"boxeddot epsilon^vp = fracsigmaeta","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"We can consider the elasticity strain associated with a spring while the viscoelasticity associated with a dashed pot. Then based on how we combine the spring or the dashed pot, we can have many cases [linearvisco]","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"[linearvisco]: https://academic.csuohio.edu/duffys/LinearVisco.pdf","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"Maxwell Model Kevin Model Standard Linear Model\n(Image: image-20200128113844890) (Image: image-20200128113802583) (Image: image-20200128113907786)\nbeginalignedepsilon = epsilon_1 + epsilon_2epsilon_1 = fracsigmaEdotepsilon_2 = fracsigmaetaendaligned beginalignedsigma = sigma_1 + sigma_2epsilon_1 = fracsigmaEdotepsilon_2 = fracsigmaetaendaligned beginalignedsigma = sigma_1 + sigma_2epsilon = epsilon_1 + epsilon_2sigma = E_1 epsilon_1sigma_1 = E_2epsilon_2sigma_2 = etadotepsilon_2endaligned","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"The most general constitutive equation has the following form ","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"p_0sigma + p_1sigma + p_2 sigma + p_3  sigma + cdots = q_0epsilon + q_1epsilon + q_2 epsilon + q_3  epsilon + cdots","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"For high dimensional case, assume that the bulk modulus is K, then we have [linearvisco2]","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"[linearvisco2]: http://solidmechanics.org/text/Chapter36/Chapter36.htm","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"beginaligned e_ij = epsilon_ij - epsilon_kk delta_ij qquad sigma_ij = s_ij + Kepsilon_kkdelta_ij\n ks_ij + eta dot s_ij = ketadot e_ij  mathrmMaxwell\n s_ij = ke_ij + eta dot e_ij  mathrmKevin\n k_1s_ij + etadot s_ij = k_1k_2e_ij + (k_1+k_2) etadot e_ij  mathrmStandard mathrmLinear\nendaligned","category":"page"},{"location":"viscoelasticity/#Numerical-Example-1","page":"Viscoelasticity","title":"Numerical Example","text":"","category":"section"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"We consider the two dimensional Maxwell material","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"dot sigma_ij + fracmueta left( sigma_ij - fracsigma_kk3delta_ij right) = 2mu dot epsilon_ij + lambda dotepsilon_kkdelta_ijtag1","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"along with the balance of linear momentum equation","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"mathrmdiv sigma_ijj + rho f_i = rho ddot u_i","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"In the matrix format, the constitutive relation has the form","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"beginbmatrix\ndotsigma_xx \ndotsigma_yy \ndotsigma_xy\nendbmatrix + fracmuetabeginbmatrix\n23  13  0  \n13  23  0  \n0  0  1 \nendbmatrixbeginbmatrix\nsigma_xx \nsigma_yy \nsigma_xyendbmatrix = \nbeginbmatrix\n2mu + lambda  lambda  0  \nlambda  2mu + lambda  0  \n0  0  mu \nendbmatrixbeginbmatrix\ndotepsilon_xx \ndotepsilon_yy \ndotgamma_xy\nendbmatrix","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"Here gamma_xy=2epsilon_xy, where epsilon_xy is the shear modulus. Note that when eta=infty, this constitutive relation is exactly the plain strain linear elasticity.  ","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"We use the implicit discretization for Eq. (1) ","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"beginbmatrix\n1 + frac23fracmuDelta teta  -frac13fracmuDelta teta  0\n-frac13fracmuDelta teta  1 + frac23fracmuDelta teta  0 \n0  0  1 + fracmuDelta teta\nendbmatrix\nbeginbmatrix\n\tsigma_xx^n+1\n\tsigma_yy^n+1\n\tsigma_xy^n+1\nendbmatrix = beginbmatrix\n\tsigma_xx^n\n\tsigma_yy^n\n\tsigma_xy^n\nendbmatrix  + beginbmatrix\n\t2mu+lambda  lambda  0\n\tlambda  2mu+lambda  0\n\t0  0  mu \nendbmatrixleft(beginbmatrix\n\tepsilon_xx^n+1\n\tepsilon_yy^n+1\n\tgamma_xy^n+1\nendbmatrix-beginbmatrix\n\tepsilon_xx^n\n\tepsilon_yy^n\n\tgamma_xy^n\nendbmatrixright)","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"or in a simpler form","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"sigma^n+1 = H epsilon^n+1 + S sigma^n  - Hepsilon^n","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"Here S and H are defined as ","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"S = beginbmatrix\n1 + frac23fracmuDelta teta  -frac13fracmuDelta teta  0\n-frac13fracmuDelta teta  1 + frac23fracmuDelta teta  0 \n0  0  1 + fracmuDelta teta\nendbmatrix^-1","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"H = Sbeginbmatrix\n\t2mu+lambda  lambda  0\n\tlambda  2mu+lambda  0\n\t0  0  mu \nendbmatrix","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"The parameters used in the simulation are","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"lambda mu eta Delta t and T Domain and h\n0.0 0.5 1.0 0.025 and 5.0 002times 004 and 0.01","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"Description Linear Elasticity Viscoelasticity\nx displacement (Image: disp_u_linear) (Image: disp_scattered_u)\ny displacement (Image: disp_u_linear) (Image: disp_u_linear)\nVon Mises Stress (Image: disp_s_linear) (Image: disp_s_viscoelasticity)\nStatistics of Middle Right point (Image: linear) (Image: visco)","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"Simulation Code","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"Linear Elasticity","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"using Revise\nusing PoreFlow\nusing PyCall\nusing LinearAlgebra\nusing PyPlot\nusing SparseArrays\nnp = pyimport(\"numpy\")\n\nβ = 1/4; γ = 1/2\na = b = 0.1\nm = 40\nn = 20\nh = 0.01\nNT = 200\nΔt = 5/NT \nbdedge = []\nfor j = 1:n \n  push!(bdedge, [(j-1)*(m+1)+m+1 j*(m+1)+m+1])\nend\nbdedge = vcat(bdedge...)\n\nbdnode = Int64[]\nfor j = 1:n+1\n  push!(bdnode, (j-1)*(m+1)+1)\nend\n\nM = compute_fem_mass_matrix1(m, n, h)\nS = spzeros((m+1)*(n+1), (m+1)*(n+1))\nM = [M S;S M]\n\nH = [1.0 0.0 0.0\n    0.0 1.0 0.0\n    0.0 0.0 0.5]\nK = compute_fem_stiffness_matrix(H, m, n, h)\nC = a*M + b*K # damping matrix \n\nL = M + γ*Δt*C + β*Δt^2*K\nL, Lbd = fem_impose_Dirichlet_boundary_condition(L, bdnode, m, n, h)\n\na = zeros(2(m+1)*(n+1))\nv = zeros(2(m+1)*(n+1))\nd = zeros(2(m+1)*(n+1))\nU = zeros(2(m+1)*(n+1),NT+1)\n\nSigma = zeros(NT+1, 4m*n, 3)\nVarepsilon = zeros(NT+1, 4m*n, 3)\nfor i = 1:NT \n    global a, v, d\n    T = eval_f_on_boundary_edge((x,y)->0.1, bdedge, m, n, h)\n    T = [T zeros(length(T))]\n    rhs = compute_fem_traction_term(T, bdedge, m, n, h)\n    if i*Δt>3.0\n      rhs = zero(rhs)\n    end\n\n    td = d + Δt*v + Δt^2/2*(1-2β)*a \n    tv = v + (1-γ)*Δt*a \n    rhs = rhs - C*tv - K*td\n    rhs[[bdnode; bdnode.+(m+1)*(n+1)]] .= 0.0\n\n    a = L\\rhs \n    d = td + β*Δt^2*a \n    v = tv + γ*Δt*a \n    U[:,i+1] = d\n\n\n    Varepsilon[i+1,:,:] = eval_strain_on_gauss_pts(U[:,i+1], m, n, h)\n    Sigma[i+1,:,:] = Varepsilon[i+1,:,:] * H\nend\n\n\nvisualize_displacement(U, m, n, h; name = \"_linear\", xlim_=[-0.01,0.5], ylim_=[-0.05,0.22])\nvisualize_displacement(U, m, n, h;  name = \"_linear\")\nvisualize_stress(H, U, m, n, h;  name = \"_linear\")\n\n\nclose(\"all\")\nfigure(figsize=(15,5))\nsubplot(1,3,1)\nidx = div(n,2)*(m+1) + m+1\nplot((0:NT)*Δt, U[idx,:])\nxlabel(\"time\")\nylabel(\"x displacement\")\n\nsubplot(1,3,2)\nidx = 4*(div(n,2)*m + m)\nplot((0:NT)*Δt, Sigma[:,idx,1])\nxlabel(\"time\")\nylabel(\"x stress\")\n\nsubplot(1,3,3)\nidx = 4*(div(n,2)*m + m)\nplot((0:NT)*Δt, Varepsilon[:,idx,1])\nxlabel(\"time\")\nylabel(\"x strain\")\nsavefig(\"linear.png\")","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"Viscoelasticity","category":"page"},{"location":"viscoelasticity/#","page":"Viscoelasticity","title":"Viscoelasticity","text":"using Revise\nusing PoreFlow\nusing PyCall\nusing LinearAlgebra\nusing PyPlot\nusing SparseArrays\nnp = pyimport(\"numpy\")\n\nλ = 0.0\nμ = 0.5\nη = 1.0\n\nβ = 1/4; γ = 1/2\na = b = 0.1\nm = 40\nn = 20\nh = 0.01\nNT = 200\nΔt = 5/NT \nbdedge = []\nfor j = 1:n \n  push!(bdedge, [(j-1)*(m+1)+m+1 j*(m+1)+m+1])\nend\nbdedge = vcat(bdedge...)\n\nbdnode = Int64[]\nfor j = 1:n+1\n  push!(bdnode, (j-1)*(m+1)+1)\nend\n\nG = [1/Δt+μ/η -μ/3η 0.0\n  -μ/3η 1/Δt+μ/η-μ/3η 0.0\n  0.0 0.0 1/Δt+μ/η]\nS = [2μ/Δt+λ/Δt λ/Δt 0.0\n    λ/Δt 2μ/Δt+λ/Δt 0.0\n    0.0 0.0 μ/Δt]\ninvG = inv(G)\nH = invG*S\n\nM = compute_fem_mass_matrix1(m, n, h)\nZero = spzeros((m+1)*(n+1), (m+1)*(n+1))\nM = [M Zero;Zero M]\n\nK = compute_fem_stiffness_matrix(H, m, n, h)\nC = a*M + b*K # damping matrix \n\nL = M + γ*Δt*C + β*Δt^2*K\nL, Lbd = fem_impose_Dirichlet_boundary_condition(L, bdnode, m, n, h)\n\na = zeros(2(m+1)*(n+1))\nv = zeros(2(m+1)*(n+1))\nd = zeros(2(m+1)*(n+1))\nU = zeros(2(m+1)*(n+1),NT+1)\nSigma = zeros(NT+1, 4m*n, 3)\nVarepsilon = zeros(NT+1, 4m*n, 3)\nfor i = 1:NT \n    global a, v, d\n    T = eval_f_on_boundary_edge((x,y)->0.1, bdedge, m, n, h)\n    T = [T zeros(length(T))]\n    rhs = compute_fem_traction_term(T, bdedge, m, n, h)\n\n    if i*Δt>3.0\n      rhs = zero(rhs)\n    end\n\n    F = compute_strain_energy_term(Sigma[i,:,:]*invG/Δt, m, n, h) - K * U[:,i]\n    # @show norm(compute_strain_energy_term(Sigma[i,:,:]*invG/Δt, m, n, h)), norm(K * U[:,i])\n    rhs -= Δt^2 * F\n\n    td = d + Δt*v + Δt^2/2*(1-2β)*a \n    tv = v + (1-γ)*Δt*a \n    rhs = rhs - C*tv - K*td\n    rhs[[bdnode; bdnode.+(m+1)*(n+1)]] .= 0.0\n\n    a = L\\rhs \n    d = td + β*Δt^2*a \n    v = tv + γ*Δt*a \n    U[:,i+1] = d\n\n    Varepsilon[i+1,:,:] = eval_strain_on_gauss_pts(U[:,i+1], m, n, h)\n    Sigma[i+1,:,:] = Sigma[i,:,:]*invG/Δt +  (Varepsilon[i+1,:,:]-Varepsilon[i,:,:])*(invG*S)\nend\n\n\nvisualize_displacement(U, m, n, h; name = \"_viscoelasticity\", xlim_=[-0.01,0.5], ylim_=[-0.05,0.22])\nvisualize_displacement(U, m, n, h;  name = \"_viscoelasticity\")\nvisualize_stress(H, U, m, n, h;  name = \"_viscoelasticity\")\n\nclose(\"all\")\nfigure(figsize=(15,5))\nsubplot(1,3,1)\nidx = div(n,2)*(m+1) + m+1\nplot((0:NT)*Δt, U[idx,:])\nxlabel(\"time\")\nylabel(\"\\$u_x\\$\")\n\nsubplot(1,3,2)\nidx = 4*(div(n,2)*m + m)\nplot((0:NT)*Δt, Sigma[:,idx,1])\nxlabel(\"time\")\nylabel(\"\\$\\\\sigma_{xx}\\$\")\n\nsubplot(1,3,3)\nidx = 4*(div(n,2)*m + m)\nplot((0:NT)*Δt, Varepsilon[:,idx,1])\nxlabel(\"time\")\nylabel(\"\\$\\\\epsilon_{xx}\\$\")\nsavefig(\"visco.png\")\n","category":"page"},{"location":"earthquake/#Earthquake-Simulation-with-Rate-and-State-Friction-1","page":"Earthquake Simulation with Rate-and-State Friction","title":"Earthquake Simulation with Rate-and-State Friction","text":"","category":"section"},{"location":"earthquake/#","page":"Earthquake Simulation with Rate-and-State Friction","title":"Earthquake Simulation with Rate-and-State Friction","text":"(Image: )","category":"page"},{"location":"earthquake/#","page":"Earthquake Simulation with Rate-and-State Friction","title":"Earthquake Simulation with Rate-and-State Friction","text":"Here we study a case of earthquake simulation on strike-slip fault.","category":"page"},{"location":"earthquake/#","page":"Earthquake Simulation with Rate-and-State Friction","title":"Earthquake Simulation with Rate-and-State Friction","text":"The fraction on the fault is governed by rate-and-state friction with a aging law:","category":"page"},{"location":"earthquake/#","page":"Earthquake Simulation with Rate-and-State Friction","title":"Earthquake Simulation with Rate-and-State Friction","text":"beginaligned\nf(V Psi) = a sinh^-1 left(fracV2V_0 e^Phia right) \ndot Psi = fracbV_0D_c left( f - f_0 + (b-a) ln fracVV_0 right)\nendaligned","category":"page"},{"location":"earthquake/#","page":"Earthquake Simulation with Rate-and-State Friction","title":"Earthquake Simulation with Rate-and-State Friction","text":"where V is the fault slip velocity, Psi is a state variable controlling the fricional process, D_c is the state evolution distance, a and b are dimensionless frictional parameters, V_0 is a reference steady sliding velocity, and f_0 is the reference friction coefficient for the reference velocity V_0. ","category":"page"},{"location":"earthquake/#","page":"Earthquake Simulation with Rate-and-State Friction","title":"Earthquake Simulation with Rate-and-State Friction","text":"note: Note\na  b: steady state velocity weakening.a  b: steady state velocity strengthening.  ","category":"page"},{"location":"earthquake/#","page":"Earthquake Simulation with Rate-and-State Friction","title":"Earthquake Simulation with Rate-and-State Friction","text":"Using quasi-dynamic approximation, the inertial term is approximated by a radiation damping term to account for seismic waves, so force balance on the fault becomes: ","category":"page"},{"location":"earthquake/#","page":"Earthquake Simulation with Rate-and-State Friction","title":"Earthquake Simulation with Rate-and-State Friction","text":"tau = sigma_31(x=0) - eta V = f(V Psi) sigma_n","category":"page"},{"location":"earthquake/#","page":"Earthquake Simulation with Rate-and-State Friction","title":"Earthquake Simulation with Rate-and-State Friction","text":"where eta V is the radiation damping term, sigma_n is the effective normal stress. We set eta = fracmu2 c_s, where mu is the shear modulus and c_s is the shear wave speed.","category":"page"},{"location":"earthquake/#Earthquake-simulation-1","page":"Earthquake Simulation with Rate-and-State Friction","title":"Earthquake simulation","text":"","category":"section"},{"location":"earthquake/#","page":"Earthquake Simulation with Rate-and-State Friction","title":"Earthquake Simulation with Rate-and-State Friction","text":"(Image: )","category":"page"},{"location":"earthquake/#Gradients-1","page":"Earthquake Simulation with Rate-and-State Friction","title":"Gradients","text":"","category":"section"},{"location":"inverse/#Inverse-Modeling-for-Poroelasticity-Models-1","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"","category":"section"},{"location":"inverse/#","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"We have coupled geomechanics and single phase flow in Coupled Geomechanics and Single Phase Flow (poroelasticity). The governing equation for poroelasticity model is ","category":"page"},{"location":"inverse/#","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"beginaligned\nmathrmdivsigma(u) - b nabla p = 0\nfrac1M fracpartial ppartial t + bfracpartial varepsilon_v(u)partial t - nablacdotleft(frackB_fmunabla pright) = f(xt)\nsigma(u) = Hvarepsilon(u)\nendaligned","category":"page"},{"location":"inverse/#","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"We impose no-flow boundary condition on left, right, and bottom sides for p, i.e., nabla p cdot n=0, and a zero pressure boundary condition on the top side, i.e., p=0. Additionally, we assume a fixed Dirichlet boundary condition for u on the left and right side, and traction free boundary conditions for u on all other three sides, i.e., sigma(u)n = 0. We show the data in the following. ","category":"page"},{"location":"inverse/#","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"Displacement Pressure Von Mises Stress\n(Image: ) (Image: ) (Image: )","category":"page"},{"location":"inverse/#","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"We estimate the elasticity tensor H by solving a minimization problem ","category":"page"},{"location":"inverse/#","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"min_H sum_iinmathcalI (u^mathrmobs_i-u_i)^2","category":"page"},{"location":"inverse/#","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"where mathcalI is the index set for horizontal displacement  on the top side, u^mathrmobs_i is the corresponding observation. ","category":"page"},{"location":"inverse/#","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"(Image: )","category":"page"},{"location":"inverse/#","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"Initial Guess Estimated H Reference H\nbeginbmatrix1    0  0  0  1   0  0      0      1endbmatrix beginbmatrix1604938  0864197  -00 0864197  1604938  -00 -00  -00  0370371 endbmatrix beginbmatrix1604938  0864198  00 0864198  1604938  00 00  00  037037 endbmatrix","category":"page"},{"location":"inverse/#","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"To test the robustness of the method, we add noise to our observations","category":"page"},{"location":"inverse/#","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"(u_mathrmobs)_i = u_i (1+sigma varepsilon_i)","category":"page"},{"location":"inverse/#","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"where varepsilon_i are i.i.d. Gaussian noise with unit standard deviations and zero means. ","category":"page"},{"location":"inverse/#","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"using Revise\nusing PoreFlow\nusing PyCall\nusing LinearAlgebra\nusing ADCME\nusing MAT\nusing PyPlot\nusing ADCMEKit\n\nnp = pyimport(\"numpy\")\n\n# Domain information \nNT = 50\nΔt = 1/NT\nn = 15\nm = 2*n \nh = 1. ./ n\nbdnode = bcnode(\"left | right\", m, n, h)\nbdedge = bcedge(\"upper\", m, n, h) # fixed pressure on the top \n\nb = 1.0\nE = 1.0\nν = 0.35\nHref = E/(1+ν)/(1-2ν) * [1-ν ν 0.0;ν 1-ν 0.0;0.0 0.0 (1-2ν)/2]\n\nH = spd(Variable(diagm(0=>ones(3))))\n\nQ, Prhs = compute_fvm_tpfa_matrix(ones(4*m*n), bdedge, zeros(size(bdedge,1)),m, n, h)\nQ = SparseTensor(Q)\nK = compute_fem_stiffness_matrix(H, m, n, h)\nL = SparseTensor(compute_interaction_matrix(m, n, h))\nM = SparseTensor(compute_fvm_mass_matrix(m, n, h))\nA = [K -b*L'\nb*L/Δt 1/Δt*M-Q]\nA, Abd = fem_impose_coupled_Dirichlet_boundary_condition(A, bdnode, m, n, h)\nU = zeros(m*n+2(m+1)*(n+1), NT+1)\nx = Float64[]; y = Float64[]\nfor j = 1:n+1\n    for i = 1:m+1\n        push!(x, (i-1)*h)\n        push!(y, (j-1)*h)\n    end\nend\n    \n# injection and production\ninjection = (div(n,2)-1)*m + 3\nproduction = (div(n,2)-1)*m + m-3\n\n\nfunction get_disp(SOURCE_SCALE)\n    \n    function condition(i, tas...)\n        i<=NT\n    end\n\n    function body(i, tas...)\n        ta_u, ta_ε, ta_σ = tas\n        u = read(ta_u, i)\n        σ0 = read(ta_σ, i)\n        ε0 = read(ta_ε, i)\n\n        g = -ε0*H\n        rhs1 = compute_strain_energy_term(g, m, n, h)\n\n        rhs1 = scatter_update(rhs1, [bdnode; bdnode .+ (m+1)*(n+1)], zeros(2length(bdnode)))\n        rhs2 = zeros(m*n)\n        rhs2[injection] += SOURCE_SCALE * h^2\n        rhs2[production] -= SOURCE_SCALE * h^2\n        rhs2 = rhs2 + b*L*u[1:2(m+1)*(n+1)]/Δt + \n                M * u[2(m+1)*(n+1)+1:end]/Δt + Prhs\n        \n        rhs = [rhs1;rhs2]\n        o = A\\rhs \n\n        ε = eval_strain_on_gauss_pts(o, m, n, h)\n        σ = ε*H\n\n        ta_u = write(ta_u, i+1, o)\n        ta_ε = write(ta_ε, i+1, ε)\n        ta_σ = write(ta_σ, i+1, σ)\n        i+1, ta_u, ta_ε, ta_σ\n    end\n\n    i = constant(1, dtype=Int32)\n    ta_u = TensorArray(NT+1); ta_u = write(ta_u, 1, constant(zeros(2(m+1)*(n+1)+m*n)))\n    ta_ε = TensorArray(NT+1); ta_ε = write(ta_ε, 1, constant(zeros(4*m*n, 3)))\n    ta_σ = TensorArray(NT+1); ta_σ = write(ta_σ, 1, constant(zeros(4*m*n, 3)))\n    _, u_out, ε_out, σ_out = while_loop(condition, body, [i, ta_u, ta_ε, ta_σ])\n    u_out = stack(u_out)\n    u_out.set_shape((NT+1, size(u_out,2)))\n    σ_out = stack(σ_out)\n    ε_out = stack(ε_out)\n\n    upper_idx = Int64[]\n    for i = 1:m+1\n        push!(upper_idx, (div(n,3)-1)*(m+1)+i)\n        push!(upper_idx, (div(n,3)-1)*(m+1)+i + (m+1)*(n+1))\n    end\n    for i = 1:m \n        push!(upper_idx, (div(n,3)-1)*m+i+2(m+1)*(n+1))\n    end\n\n    u_out, σ_out\nend\n\nU, S = get_disp(500.0)\n\nuobs = matread(\"data.mat\")[\"U\"][:, 1:m+1]\nupred = set_shape(U,(NT+1,2(m+1)*(n+1)+m*n))[:, 1:m+1]\nloss = sum((uobs-upred)^2)\nerr = norm(H-Href)/norm(Href)\nsess = Session()\ninit(sess)\n@show run(sess, [loss, err])\nloss_ = BFGS!(sess, loss)","category":"page"},{"location":"staticelasticity/#Static-Linear-Elasticity-1","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"","category":"section"},{"location":"staticelasticity/#","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"The governing equation for static linear elasticity is","category":"page"},{"location":"staticelasticity/#","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"beginaligned\nmathrmdiv sigma(u) = f(x)  xin Omega \nsigma(u) = Cvarepsilon(u) \nu(x) = u_0(x)  xin Gamma_u\nsigma(x) n(x) = t(x)  xin Gamma_n\nendaligned","category":"page"},{"location":"staticelasticity/#","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"Here varepsilon(u) = frac12(nabla u + (nabla u)^T) is the Cauchy tensor, Gamma_u cup Gamma_n = Omega, Gamma_u cap Gamma_n = emptyset. The weak formulation is: finding u such that ","category":"page"},{"location":"staticelasticity/#","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"int_Omega delta varepsilon(u)  C varepsilon(u)mathrmd x = int_Gamma_n tcdotdelta u mathrmds - int_Omega fcdot delta u mathrmdx","category":"page"},{"location":"staticelasticity/#","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"We consider the manufactured solution ","category":"page"},{"location":"staticelasticity/#","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"u(x) = beginbmatrix\nx_1^2+x_2^2\nx_1^2-x_2^2\nendbmatrix","category":"page"},{"location":"staticelasticity/#","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"and ","category":"page"},{"location":"staticelasticity/#","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"beginbmatrix\nsigma_xx\nsigma_yy\nsigma_xy\nendbmatrix = beginbmatrix\n1  0  0\n0  1  0\n0  0  12\nendbmatrixbeginbmatrix\nvarepsilon_xx\nvarepsilon_yy\n2varepsilon_xy\nendbmatrix","category":"page"},{"location":"staticelasticity/#","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"then we have ","category":"page"},{"location":"staticelasticity/#","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"f(x) = beginbmatrix\n3\n-1\nendbmatrix","category":"page"},{"location":"staticelasticity/#","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"We let Gamma_n be the top boundary. ","category":"page"},{"location":"staticelasticity/#","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"bdedge = []\nfor i = 1:m \n    push!(bdedge, [i i+1])\nend\nbdedge = vcat(bdedge...)\n\nbdnode = Int64[]\nfor j = 1:n+1\n    push!(bdnode, (j-1)*(m+1)+1)\n    push!(bdnode, (j-1)*(m+1)+m+1)\nend\nfor i = 2:m\n    push!(bdnode, n*(m+1)+i)\nend\n\nF1 = eval_f_on_gauss_pts((x,y)->3.0, m, n, h)\nF2 = eval_f_on_gauss_pts((x,y)->-1.0, m, n, h)\nF = compute_fem_source_term(F1, F2, m, n, h)\n\nt1 = eval_f_on_boundary_edge((x,y)->-x-y, bdedge, m, n, h)\nt2 = eval_f_on_boundary_edge((x,y)->2y, bdedge, m, n, h)\nT = compute_fem_traction_term([t1 t2], bdedge, m, n, h)\n\nD = diagm(0=>[1,1,0.5])\nK = compute_fem_stiffness_matrix(D, m, n, h)\nrhs = T - F \nbdval = [eval_f_on_boundary_node((x,y)->x^2+y^2, bdnode, m, n, h);\n        eval_f_on_boundary_node((x,y)->x^2-y^2, bdnode, m, n, h)]\nrhs[[bdnode;bdnode .+ (m+1)*(n+1)]] = bdval\nK, Kbd = fem_impose_Dirichlet_boundary_condition(K, bdnode, m, n, h)\nu = K\\(rhs-Kbd*bdval)\nX, Y, U, V = plot_u(u, m, n, h)\n\nfigure(figsize=[10,4])\nsubplot(121)\npcolormesh(X, Y, (@. X^2+Y^2-U), alpha=0.6); xlabel(\"x\"); ylabel(\"y\"); title(\"Error for u\")\ncolorbar()\nsubplot(122)\npcolormesh(X, Y, (@. X^2-Y^2-V), alpha=0.6); xlabel(\"x\"); ylabel(\"y\"); title(\"Error for v\")\ncolorbar()","category":"page"},{"location":"staticelasticity/#","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"(Image: )","category":"page"},{"location":"api/#API-1","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Data-Structures-1","page":"API","title":"Data Structures","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"PoreData","category":"page"},{"location":"api/#PoreFlow.PoreData","page":"API","title":"PoreFlow.PoreData","text":"PoreData is a collection of physical parameters for coupled geomechanics and flow simulation\n\nM: Biot modulus\nb: Biot coefficient\nρb: Bulk density\nρf: Fluid density\nkp: Permeability\nE: Young modulus\nν: Poisson ratio\nμ: Fluid viscosity\nPi: Initial pressure\nBf: formation volume, B_f=fracrho_f0rho_f\ng: Gravity acceleration\n\n\n\n\n\n","category":"type"},{"location":"api/#Matrix-Assembling-Functions-1","page":"API","title":"Matrix Assembling Functions","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"compute_fem_stiffness_matrix\ncompute_interaction_matrix\ncompute_fvm_tpfa_matrix\ncompute_fem_mass_matrix\ncompute_fvm_mass_matrix\ncompute_fem_mass_matrix1\ncompute_fem_stiffness_matrix1\ncompute_fvm_advection_matrix\ncompute_fem_laplace_matrix1\ncompute_fem_laplace_matrix\ncompute_fem_advection_matrix1","category":"page"},{"location":"api/#PoreFlow.compute_fem_stiffness_matrix","page":"API","title":"PoreFlow.compute_fem_stiffness_matrix","text":"compute_fem_stiffness_matrix(K::Array{Float64,2}, m::Int64, n::Int64, h::Float64)\n\nComputes the term \n\nint_Adelta varepsilon sigmamathrmdx = int_A u_AB^TKBdelta u_Amathrmdx\n\nwhere the constitutive relation is given by \n\nbeginbmatrixsigma_xxsigma_yysigma_xyendbmatrix = K beginbmatrixvarepsilon_xxvarepsilon_yy2varepsilon_xyendbmatrix\n\n\n\n\n\ncompute_fem_stiffness_matrix(hmat::PyObject,m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel. hmat has one of the following sizes \n\n3times 3\n4mn times 3 times 3\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_interaction_matrix","page":"API","title":"PoreFlow.compute_interaction_matrix","text":"compute_interaction_matrix(m::Int64, n::Int64, h::Float64)\n\nComputes the interaction term \n\nint_A p delta varepsilon_vmathrmdx = int_A p 110B^Tdelta u_Amathrmdx\n\nHere varepsilon_v = texttr varepsilon = textdiv mathbfu.\n\nThe output is a mn times 2(m+1)(n+1) matrix. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fvm_tpfa_matrix","page":"API","title":"PoreFlow.compute_fvm_tpfa_matrix","text":"compute_fvm_tpfa_matrix(m::Int64, n::Int64, h::Float64)\n\nComputes the term with two-point flux approximation \n\nint_A_i Delta p mathrmdx = sum_j=1^n_mathrmfaces (p_j-p_i)\n\n(Image: )\n\nwarning: Warning\nNo flow boundary condition is assumed. \n\n\n\n\n\ncompute_fvm_tpfa_matrix(K::Array{Float64}, m::Int64, n::Int64, h::Float64)\n\nComputes the term with two-point flux approximation with distinct permeability at each cell\n\nint_A_i K_i Delta p mathrmdx = K_isum_j=1^n_mathrmfaces (p_j-p_i)\n\nNote that K is a length mn vector, representing values per cell.\n\n\n\n\n\ncompute_fvm_tpfa_matrix(K::Array{Float64}, bc::Array{Int64,2}, pval::Array{Float64,1}, m::Int64, n::Int64, h::Float64)\n\nComputes the term with two-point flux approximation with distinct permeability at each cell\n\nint_A_i K_i Delta p mathrmdx = K_isum_j=1^n_mathrmfaces (p_j-p_i)\n\nHere K is a length mn vector, representing values per cell.\n\nAdditionally, Dirichlet boundary conditions are imposed on the boundary edges bc (a Ntimes 2 integer matrix),  i.e., the i-th edge has value pval. The ghost node method is used for imposing the Dirichlet boundary condition.  The other boundaries are no-blow boundaries, i.e., fracpartial Tpartial n = 0.  The function outputs a length mn vector and mntimes mn matrix M. \n\nint_A_i K_i Delta p mathrmdx = f_i + M_imathbfp\n\nReturns both the sparse matrix A and the right hand side rhs.\n\ninfo: Info\nK can also be missing, in which case K is treated as a all-one vector. \n\n\n\n\n\ncompute_fvm_tpfa_matrix(K::PyObject, bc::Array{Int64,2}, pval::Union{Array{Float64},PyObject}, m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel for compute_fvm_tpfa_matrix. \n\n\n\n\n\ncompute_fvm_tpfa_matrix(K::PyObject, m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel for compute_fvm_tpfa_matrix. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_mass_matrix","page":"API","title":"PoreFlow.compute_fem_mass_matrix","text":"compute_fem_mass_matrix(m::Int64, n::Int64, h::Float64)\n\nComputes the finite element mass matrix \n\nint_Omega u delta u mathrmdx\n\nThe matrix size is 2(m+1)(n+1) times 2(m+1)(n+1).\n\n\n\n\n\ncompute_fem_mass_matrix(ρ::PyObject,m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel. rho is a vector of length 4mn or 8mn\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fvm_mass_matrix","page":"API","title":"PoreFlow.compute_fvm_mass_matrix","text":"compute_fvm_mass_matrix(m::Int64, n::Int64, h::Float64)\n\nReturns the FVM mass matrix \n\nint_A_i p_i mathrmdx = h^2 p_i \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_mass_matrix1","page":"API","title":"PoreFlow.compute_fem_mass_matrix1","text":"compute_fem_mass_matrix1(ρ::Array{Float64,1}, m::Int64, n::Int64, h::Float64)\n\nComputes the mass matrix for a scalar value u\n\nint_A rho u delta u mathrmd x\n\nThe output is a (m+1)(n+1)times (m+1)(n+1) sparse matrix. \n\n\n\n\n\ncompute_fem_mass_matrix1(m::Int64, n::Int64, h::Float64)\n\nComputes the mass matrix for a scalar value u\n\nint_A u delta u mathrmd x\n\nThe output is a (m+1)(n+1)times (m+1)(n+1) sparse matrix. \n\n\n\n\n\ncompute_fem_mass_matrix1(ρ::PyObject,m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_stiffness_matrix1","page":"API","title":"PoreFlow.compute_fem_stiffness_matrix1","text":"compute_fem_stiffness_matrix1(K::Array{Float64,2}, m::Int64, n::Int64, h::Float64)\n\nComputes the term \n\nint_A (K nabla u) cdot nabla delta u mathrmdx = int_A u_A B^T K B delta u_Amathrmdx\n\nReturns a (m+1)times (n+1) matrix\n\n\n\n\n\ncompute_fem_stiffness_matrix1(hmat::PyObject, m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel for computing the stiffness matrix.  Two possible shapes for hmat are supported: \n\n4mn times 2times 2\n2 times 2\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fvm_advection_matrix","page":"API","title":"PoreFlow.compute_fvm_advection_matrix","text":"compute_fvm_advection_matrix(v::Union{PyObject, Array{Float64, 2}},\n    bc::Array{Int64, 2},bcval::Union{PyObject, Array{Float64}},m::Int64,n::Int64,h::Float64)\n\nComputes the advection matrix for use in the implicit scheme \n\nint_A mathbfv cdot nabla u dx \n\nHere v is a 2mn vector, where the first mn entries corresponds to the first dimension of   mathbfv and the remaining mn entries corresponds to the second dimension. \n\nIt returns a matrix mntimes mn matrix K and an auxilliary term mathbff due to boundary conditions.\n\nint_Omega mathbfv cdot nabla u dx = K mathbfu + mathbff\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_laplace_matrix1","page":"API","title":"PoreFlow.compute_fem_laplace_matrix1","text":"compute_fem_laplace_matrix1(K::Array{Float64, 1}, m::Int64, n::Int64, h::Float64)\n\nComputes the coefficient matrix for \n\nint_Omega K nabla u cdot nabla (delta u)  dx \n\nHere Kin mathbfR^2times 2, u is a scalar variable, and K is a 4mn times 2 times 2 matrix. \n\nReturns a (m+1)(n+1)times (m+1)(n+1) sparse matrix. \n\n\n\n\n\ncompute_fem_laplace_matrix1(K::Array{Float64, 2}, m::Int64, n::Int64, h::Float64)\n\nK is duplicated on each Gauss point. \n\n\n\n\n\ncompute_fem_laplace_matrix1(K::Array{Float64, 1}, m::Int64, n::Int64, h::Float64)\n\nComputes the coefficient matrix for \n\nint_Omega Knabla u cdot nabla (delta u)  dx \n\nHere K is a vector with length 4mn (defined on Gauss points). \n\nReturns a (m+1)(n+1)times (m+1)(n+1) sparse matrix. \n\n\n\n\n\ncompute_fem_laplace_matrix1(m::Int64, n::Int64, h::Float64)\n\nComputes the coefficient matrix for \n\nint_Omega nabla u cdot nabla (delta u)  dx \n\nReturns a (m+1)(n+1)times (m+1)(n+1) sparse matrix. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_laplace_matrix","page":"API","title":"PoreFlow.compute_fem_laplace_matrix","text":"compute_fem_laplace_matrix(m::Int64, n::Int64, h::Float64)\n\nComputes the coefficient matrix for \n\nint_Omega nabla mathbfu cdot nabla (delta mathbfu)  dx \n\nHere\n\n$\n\n\\mathbf{u}  = \\begin{bmatrix} u \\ v \\end{bmatrix}$\n\nand \n\nnabla mathbfu = beginbmatrixu_x  u_y  v_x  v_y endbmatrix\n\nReturns a 2(m+1)(n+1)times 2(m+1)(n+1) sparse matrix. \n\n\n\n\n\ncompute_fem_laplace_matrix(K::Array{Float64, 1}, m::Int64, n::Int64, h::Float64)\n\nComputes the coefficient matrix for \n\nint_Omega K nabla mathbfu cdot nabla (delta mathbfu)  dx \n\nHere K is a scalar defined on Gauss points. K is a vector of length 4mn\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_advection_matrix1","page":"API","title":"PoreFlow.compute_fem_advection_matrix1","text":"compute_fem_advection_matrix1(u0::PyObject,v0::PyObject,m::Int64,n::Int64,h::Float64)\n\nComputes the advection term for a scalar function u defined on an FEM grid. The weak form is \n\nint_Omega (mathbfu_0 cdot nabla u)  delta u  dx = int_Omega left(u0 fracpartial upartial x delta u + v0 fracpartial upartial x  delta uright) dx\n\nHere u0 and v0 are both vectors of length 4mn. \n\nReturns a sparse matrix of size (m+1)(n+1)times (m+1)(n+1)\n\n\n\n\n\n","category":"function"},{"location":"api/#Vector-Assembling-Functions-1","page":"API","title":"Vector Assembling Functions","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"compute_fem_source_term\ncompute_fvm_source_term\ncompute_fvm_mechanics_term\ncompute_fem_normal_traction_term\ncompute_fem_traction_term\ncompute_von_mises_stress_term\ncompute_fem_source_term1\ncompute_fem_flux_term1\ncompute_strain_energy_term\ncompute_strain_energy_term1\ncompute_fem_viscoelasticity_strain_energy_term\ncompute_fvm_advection_term","category":"page"},{"location":"api/#PoreFlow.compute_fem_source_term","page":"API","title":"PoreFlow.compute_fem_source_term","text":"compute_fem_source_term(f1::Array{Float64}, f2::Array{Float64},\nm::Int64, n::Int64, h::Float64)\n\nComputes the term \n\nint_Omega mathbffcdotdelta u mathrmdx\n\nReturns a 2(m+1)(n+1) vector. \n\n\n\n\n\ncompute_fem_source_term(f1::PyObject, f2::PyObject,\nm::Int64, n::Int64, h::Float64)\n\nA differentiable kernel.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fvm_source_term","page":"API","title":"PoreFlow.compute_fvm_source_term","text":"compute_fvm_source_term(f::Array{Float64}, m::Int64, n::Int64, h::Float64)\n\nComputes the source term \n\nint_A_i fmathrmdx\n\nHere f has length 4mn or mn. In the first case, an average value of four quadrature nodal values of f is used per cell.\n\n\n\n\n\ncompute_fvm_source_term(f::PyObject, m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fvm_mechanics_term","page":"API","title":"PoreFlow.compute_fvm_mechanics_term","text":"compute_fvm_mechanics_term(u::Array{Float64}, m::Int64, n::Int64, h::Float64)\n\nComputes the mechanic interaction term \n\nint_A_i varepsilon_vmathrmdx\n\nHere \n\nvarepsilon_v = mathrmtr varepsilon = varepsilon_xx + varepsilon_yy\n\nNumerically, we have \n\nvarepsilon_v = 1  1  0 B^T delta u_A\n\n\n\n\n\ncompute_fvm_mechanics_term(u::PyObject, m::Int64, n::Int64, h::Float64)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_normal_traction_term","page":"API","title":"PoreFlow.compute_fem_normal_traction_term","text":"compute_fem_normal_traction_term(t::Array{Float64,1}, bdedge::Array{Int64},\nm::Int64, n::Int64, h::Float64)\ncompute_fem_normal_traction_term(t::Float64, bdedge::Array{Int64},\nm::Int64, n::Int64, h::Float64)\n\nComputes the normal traction term \n\nint_Gamma t(mathbfn)cdotdelta u mathrmd\n\nHere t(mathbfn)parallelmathbfn points outward to the domain and the magnitude is given by t.  bdedge is a Ntimes2 matrix and each row denotes the indices of two endpoints of the boundary edge. \n\nSee compute_fem_traction_term for graphical illustration.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_traction_term","page":"API","title":"PoreFlow.compute_fem_traction_term","text":"compute_fem_traction_term(t::Array{Float64, 2},\nbdedge::Array{Int64,2}, m::Int64, n::Int64, h::Float64)\n\nComputes the traction term \n\nint_Gamma t(mathbfn)cdotdelta u mathrmd\n\nThe number of rows of t is equal to the number of edges in bdedge.  The first component of t describes the x direction traction, while the second  component of t describes the y direction traction. \n\nAlso see compute_fem_normal_traction_term. \n\n(Image: )\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_von_mises_stress_term","page":"API","title":"PoreFlow.compute_von_mises_stress_term","text":"compute_von_mises_stress_term(K::Array{Float64}, u::Array{Float64}, m::Int64, n::Int64, h::Float64)\n\nCompute the von Mises stress on the Gauss quadrature nodes. \n\n\n\n\n\ncompute_von_mises_stress_term(Se::Array{Float64,2},  m::Int64, n::Int64, h::Float64)\n\nSe is a 4mntimes3 array that stores the stress data at each Gauss point. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_source_term1","page":"API","title":"PoreFlow.compute_fem_source_term1","text":"compute_fem_source_term1(f::Array{Float64},\nm::Int64, n::Int64, h::Float64)\n\nComputes the term \n\nint_Omega f delta u dx\n\nReturns a (m+1)times (n+1) vector. f is a length 4mn vector, given by its values on Gauss points. \n\n\n\n\n\ncompute_fem_source_term1(f::PyObject,\nm::Int64, n::Int64, h::Float64)\n\nA differentiable kernel.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_flux_term1","page":"API","title":"PoreFlow.compute_fem_flux_term1","text":"compute_fem_flux_term1(t::Array{Float64},\nbdedge::Array{Int64,2}, m::Int64, n::Int64, h::Float64)\n\nComputes the traction term \n\nint_Gamma q delta u mathrmd\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_strain_energy_term","page":"API","title":"PoreFlow.compute_strain_energy_term","text":"compute_strain_energy_term(S::Array{Float64, 2}, m::Int64, n::Int64, h::Float64)\n\nComputes the strain energy \n\nint_A sigma  delta varepsilon mathrmdx\n\nwhere sigma is provided by S, a 4mn times 3 matrix.  The values sigma_11 sigma_22 sigma_12 are defined on 4 Gauss points per element. \n\n\n\n\n\ncompute_strain_energy_term(S::PyObject,m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_strain_energy_term1","page":"API","title":"PoreFlow.compute_strain_energy_term1","text":"compute_strain_energy_term1(S::PyObject, m::Int64, n::Int64, h::Float64)\n\nComputes the strain energy \n\nint_A sigma  delta varepsilon mathrmdx\n\nwhere sigma is provided by S, a 4mn times 2 matrix.  The values sigma_31 sigma_32 are defined on 4 Gauss points per element. \n\n\n\n\n\ncompute_strain_energy_term1(sigma::PyObject, m::Int64, n::Int64, h::Float64)\n\nA differentiable  operator.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_viscoelasticity_strain_energy_term","page":"API","title":"PoreFlow.compute_fem_viscoelasticity_strain_energy_term","text":"compute_fem_viscoelasticity_strain_energy_term(ε0, σ0, ε, A, B, m, n, h)\n\nGiven the constitutive relation\n\nsigma^n+1 = S sigma^n + H (varepsilon^n+1-varepsilon^n)\n\nthis function computes \n\nint_A sigmadelta varepsilonmathrmd x = underbraceint_A  B varepsilon^n+1delta varepsilonmathrmd x  + underbrace int_A  A sigma^n+1delta varepsilonmathrmd x - int_A  B varepsilon^n+1delta varepsilonmathrmd x _f\n\nand returns f\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fvm_advection_term","page":"API","title":"PoreFlow.compute_fvm_advection_term","text":"compute_fvm_advection_term(v::Union{PyObject, Array{Float64, 2}},\nu::Union{PyObject, Array{Float64,1}},m::Int64,n::Int64,h::Float64)\n\nComputes the advection term using upwind schemes\n\nint_A mathbfv cdot nabla u dx \n\nHere mathbfv is a mntimes 2 matrix and u is a length mn vector. Zero boundary conditions are assumed.  u is a vector of length mtimes n.\n\n\n\n\n\n","category":"function"},{"location":"api/#Evaluation-Functions-1","page":"API","title":"Evaluation Functions","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"eval_f_on_gauss_pts\neval_f_on_boundary_node\neval_f_on_boundary_edge\neval_strain_on_gauss_pts\neval_strain_on_gauss_pts1\neval_f_on_fvm_pts\neval_f_on_fem_pts\neval_grad_on_gauss_pts1\neval_grad_on_gauss_pts","category":"page"},{"location":"api/#PoreFlow.eval_f_on_gauss_pts","page":"API","title":"PoreFlow.eval_f_on_gauss_pts","text":"eval_f_on_gauss_pts(f::Function, m::Int64, n::Int64, h::Float64)\n\nEvaluates f at Gaussian points and return the result as 4mn vector out (4 Gauss points per element)\n\n(Image: )\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.eval_f_on_boundary_node","page":"API","title":"PoreFlow.eval_f_on_boundary_node","text":"eval_f_on_boundary_node(f::Function, bdnode::Array{Int64}, m::Int64, n::Int64, h::Float64)\n\nReturns a vector of the same length as bdnode whose entries corresponding to bdnode nodes are filled with values computed from f.\n\nf has the following signature \n\nf(x::Float64, y::Float64)::Float64\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.eval_f_on_boundary_edge","page":"API","title":"PoreFlow.eval_f_on_boundary_edge","text":"eval_f_on_boundary_edge(f::Function, bdedge::Array{Int64,2}, m::Int64, n::Int64, h::Float64)\n\nReturns a vector of the same length as bdedge whose entries corresponding to bdedge nodes are filled with values computed from f.\n\nf has the following signature \n\nf(x::Float64, y::Float64)::Float64\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.eval_strain_on_gauss_pts","page":"API","title":"PoreFlow.eval_strain_on_gauss_pts","text":"eval_strain_on_gauss_pts(u::Array{Float64}, m::Int64, n::Int64, h::Float64)\n\nComputes the strain on Gauss points.  Returns a 4mntimes3 matrix, where each row denotes (varepsilon_11 varepsilon_22 2varepsilon_12) at the corresponding Gauss point. \n\n\n\n\n\neval_strain_on_gauss_pts(u::PyObject, m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.eval_strain_on_gauss_pts1","page":"API","title":"PoreFlow.eval_strain_on_gauss_pts1","text":"eval_strain_on_gauss_pts1(u::PyObject, m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.eval_f_on_fvm_pts","page":"API","title":"PoreFlow.eval_f_on_fvm_pts","text":"eval_f_on_fvm_pts(f::Function, m::Int64, n::Int64, h::Float64)\n\nReturns f(x_i y_i) where (x_iy_i) are FVM nodes. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.eval_f_on_fem_pts","page":"API","title":"PoreFlow.eval_f_on_fem_pts","text":"eval_f_on_fem_pts(f::Function, m::Int64, n::Int64, h::Float64)\n\nReturns f(x_i y_i) where (x_iy_i) are FEM nodes. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.eval_grad_on_gauss_pts1","page":"API","title":"PoreFlow.eval_grad_on_gauss_pts1","text":"eval_grad_on_gauss_pts1(u::Array{Float64,1}, m::Int64, n::Int64, h::Float64)\n\nEvaluates nabla u on each Gauss point. Here u is a scalar function. \n\nThe input u is a vector of length (m+1)*(n+1). The output is a matrix of size 4mntimes 2. \n\n\n\n\n\neval_grad_on_gauss_pts1(u::PyObject, m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.eval_grad_on_gauss_pts","page":"API","title":"PoreFlow.eval_grad_on_gauss_pts","text":"eval_grad_on_gauss_pts(u::Array{Float64,1}, m::Int64, n::Int64, h::Float64)\n\nEvaluates nabla u on each Gauss point. Here mathbfu = (u v).\n\ntextttgi = beginbmatrix u_x  u_y v_x  v_y endbmatrix\n\nThe input u is a vector of length 2(m+1)*(n+1). The output is a matrix of size 4mntimes 2 times 2. \n\n\n\n\n\neval_grad_on_gauss_pts(u::PyObject, m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel. \n\n\n\n\n\n","category":"function"},{"location":"api/#Boundary-Conditions-1","page":"API","title":"Boundary Conditions","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"fem_impose_Dirichlet_boundary_condition\nfem_impose_Dirichlet_boundary_condition1","category":"page"},{"location":"api/#PoreFlow.fem_impose_Dirichlet_boundary_condition","page":"API","title":"PoreFlow.fem_impose_Dirichlet_boundary_condition","text":"fem_impose_Dirichlet_boundary_condition(A::SparseMatrixCSC{Float64,Int64}, \nbd::Array{Int64}, m::Int64, n::Int64, h::Float64)\n\nImposes the Dirichlet boundary conditions on the matrix A.\n\nReturns 2 matrix, \n\nbeginbmatrix\nA_BB  A_BI  \nA_IB  A_II \nendbmatrix Rightarrow beginbmatrix\nI  0  \n0  A_II \nendbmatrix quad beginbmatrix\n0  \nA_IB \nendbmatrix\n\n\n\n\n\nfem_impose_Dirichlet_boundary_condition(L::SparseTensor, bdnode::Array{Int64}, m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel for imposing the Dirichlet boundary of a vector-valued function. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.fem_impose_Dirichlet_boundary_condition1","page":"API","title":"PoreFlow.fem_impose_Dirichlet_boundary_condition1","text":"fem_impose_Dirichlet_boundary_condition1(A::SparseMatrixCSC{Float64,Int64}, \n    bd::Array{Int64}, m::Int64, n::Int64, h::Float64)\n\nImposes the Dirichlet boundary conditions on the matrix A Returns 2 matrix, \n\nbeginbmatrix\nA_BB  A_BI  \nA_IB  A_II \nendbmatrix Rightarrow beginbmatrix\nI  0  \n0  A_II \nendbmatrix quad beginbmatrix\n0  \nA_IB \nendbmatrix\n\nbd must NOT have duplicates. \n\n\n\n\n\nfem_impose_Dirichlet_boundary_condition1(L::SparseTensor, bdnode::Array{Int64}, m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel for imposing the Dirichlet boundary of a scalar-valued function. \n\n\n\n\n\n","category":"function"},{"location":"api/#Visualization-1","page":"API","title":"Visualization","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"visualize_pressure\nvisualize_displacement\nvisualize_stress\nvisualize_von_mises_stress\nvisualize_scalar_on_gauss_points\nvisualize_scalar_on_fem_points\nvisualize_scalar_on_fvm_points","category":"page"},{"location":"api/#PoreFlow.visualize_pressure","page":"API","title":"PoreFlow.visualize_pressure","text":"visualize_pressure(U::Array{Float64, 2}, m::Int64, n::Int64, h::Float64)\n\nVisualizes pressure. U is the solution vector. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.visualize_displacement","page":"API","title":"PoreFlow.visualize_displacement","text":"visualize_displacement(u::Array{Float64, 2}, m::Int64, n::Int64, h::Float64)\n\nGenerates scattered plot animation for displacement uin mathbbR^(NT+1)times 2(m+1)(n+1).\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.visualize_stress","page":"API","title":"PoreFlow.visualize_stress","text":"visualize_stress(K::Array{Float64, 2}, U::Array{Float64, 2}, m::Int64, n::Int64, h::Float64; name::String=\"\")\n\nVisualizes displacement. U is the solution vector, K is the elasticity matrix (3times 3).\n\n\n\n\n\nvisualize_stress(Se::Array{Float64, 2}, m::Int64, n::Int64, h::Float64; name::String=\"\")\n\nVisualizes the Von Mises stress. Se is the Von Mises at the cell center. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.visualize_von_mises_stress","page":"API","title":"PoreFlow.visualize_von_mises_stress","text":"visualize_von_mises_stress(Se::Array{Float64, 2}, m::Int64, n::Int64, h::Float64; name::String=\"\")\n\nVisualizes the Von Mises stress. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.visualize_scalar_on_gauss_points","page":"API","title":"PoreFlow.visualize_scalar_on_gauss_points","text":"visualize_scalar_on_gauss_points(u::Array{Float64,1}, m::Int64, n::Int64, h::Float64, args...;kwargs...)\n\nVisualizes the scalar u using pcolormesh. Here u is a length 4mn vector and the values are defined on the Gauss points\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.visualize_scalar_on_fem_points","page":"API","title":"PoreFlow.visualize_scalar_on_fem_points","text":"visualize_scalar_on_fem_points(u::Array{Float64,1}, m::Int64, n::Int64, h::Float64, args...;kwargs...)\n\nVisualizes the scalar u using pcolormesh. Here u is a length (m+1)(n+1) vector and the values are defined on the FEM points\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.visualize_scalar_on_fvm_points","page":"API","title":"PoreFlow.visualize_scalar_on_fvm_points","text":"visualize_potential(φ::Array{Float64, 3}, m::Int64, n::Int64, h::Float64)\n\nGenerates scattered potential animation for the potential phiin mathbbR^(NT+1)times n times m.\n\n\n\n\n\n","category":"function"},{"location":"api/#Modeling-Tools-1","page":"API","title":"Modeling Tools","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"layer_model\ncompute_vel\ncompute_plane_strain_matrix\ncompute_space_varying_tangent_elasticity_matrix\nmantle_viscosity\nantiplane_viscosity","category":"page"},{"location":"api/#PoreFlow.layer_model","page":"API","title":"PoreFlow.layer_model","text":"layer_model(u::Array{Float64, 1}, m::Int64, n::Int64, h::Float64)\n\nConvert the vertical profile of a quantity to a layer model.  The input u is a length n vector, the output is a length 4mn vector, representing the 4mn Gauss points. \n\n\n\n\n\nlayer_model(u::PyObject, m::Int64, n::Int64, h::Float64)\n\nA differential kernel for layer_model. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_vel","page":"API","title":"PoreFlow.compute_vel","text":"compute_vel(a::Union{PyObject, Array{Float64, 1}},\nv0::Union{PyObject, Float64},psi::Union{PyObject, Array{Float64, 1}},\nsigma::Union{PyObject, Array{Float64, 1}},\ntau::Union{PyObject, Array{Float64, 1}},eta::Union{PyObject, Float64})\n\nComputes x = u_3(x_1 x_2) from rate and state friction. The governing equation is \n\na sinh^-1left( fracx - uDelta t frac12V_0 e^fracPsia right) sigma - tau + eta fracx-uDelta t = 0\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_plane_strain_matrix","page":"API","title":"PoreFlow.compute_plane_strain_matrix","text":"compute_plane_strain_matrix(E::Float64, ν::Float64)\n\nComputes the elasticity matrix for 2D plane strain\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_space_varying_tangent_elasticity_matrix","page":"API","title":"PoreFlow.compute_space_varying_tangent_elasticity_matrix","text":"compute_space_varying_tangent_elasticity_matrix(mu::Union{PyObject, Array{Float64,1}},m::Int64,n::Int64,h::Float64,type::Int64=1)\n\nComputes the space varying tangent elasticity matrix given mu. It returns a matrix of size 4mntimes 2times 2\n\nIf type==1, the i-th matrix will be \n\nbeginbmatrixmu_i  0  0  mu_i endbmatrix\n\nIf type==2, the i-th matrix will be \n\nbeginbmatrixmu_i  0  0  mu_i+4mn endbmatrix\n\nIf type==3, the i-th matrix will be \n\nbeginbmatrixmu_i  mu_i+8mn  mu_i+8mn  mu_i+4mnendbmatrix\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.mantle_viscosity","page":"API","title":"PoreFlow.mantle_viscosity","text":"mantle_viscosity(u::Union{Array{Float64}, PyObject},\n    T::Union{Array{Float64}, PyObject}, m::Int64, n::Int64, h::Float64;\n    σ_yield::Union{Float64, PyObject} = 300e6, \n    ω::Union{Float64, PyObject}, \n    η_min::Union{Float64, PyObject} = 1e18, \n    η_max::Union{Float64, PyObject} = 1e23, \n    E::Union{Float64, PyObject} = 9.0, \n    C::Union{Float64, PyObject} = 1000., N::Union{Float64, PyObject} = 2.)\n\neta = eta_min + minleft( fracsigma_textyield2sqrtepsilon_II omegamin(eta_max eta) right)\n\nwith  \n\nepsilon_II = frac12 epsilon(u)qquad eta = C e^E(05-T) (epsilon_II)^(1-n)2n\n\nHere epsilon_II is the second invariant of the strain rate tensor, C  0 is a viscosity pre-factor, E  0 is the non-dimensional activation energy, n  0 is the nonlinear exponent, η_min, η_max act as minimum and maximum bounds for the effective viscosity, and σ_textyield  0 is the yield stress. win (0 1 is the weakening factor, which is used to incorporate phenomenological aspects that cannot be represented in a purely viscous flow model, such as processes which govern mega-thrust faults along the subduction interface, or partial melting near a mid-ocean ridge.\n\nThe viscosity of the mantle is governed by the high-temperature creep of silicates, for which laboratory experiments show that the creep strength is temperature-, pressure-, compositional- and stress-dependent. \n\nThe output is a length 4mn vector. \n\ninfo: Info\nSee Towards adjoint-based inversion of time-dependent mantle convection with nonlinear viscosity for details.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.antiplane_viscosity","page":"API","title":"PoreFlow.antiplane_viscosity","text":"antiplane_viscosity(ε::Union{PyObject, Array{Float64}}, σ::Union{PyObject, Array{Float64}}, \nμ::Union{PyObject, Float64}, η::Union{PyObject, Float64}, Δt::Float64)\n\nCalculates the stress at time t_n+1 given the strain at t_n+1 and stress at t_n. The governing equation is \n\ndotsigma + fracmuetasigma = 2mu dotepsilon\n\nThe discretization form is \n\nsigma^n+1 = frac1frac1Delta t+fracmueta(2mudotepsilon^n+1 + fracsigma^nDelta t)\n\n\n\n\n\n","category":"function"},{"location":"api/#Misc-1","page":"API","title":"Misc","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"trim_coupled\ncoupled_impose_pressure\nbcnode\nbcedge\ninterior_node\nfemidx\nfvmidx\nsubdomain\ngauss_nodes\nfem_nodes\nfvm_nodes\ncholesky_factorize\ncholesky_outproduct\nfem_to_fvm","category":"page"},{"location":"api/#PoreFlow.trim_coupled","page":"API","title":"PoreFlow.trim_coupled","text":"trim_coupled(pd::PoreData, Q::SparseMatrixCSC{Float64,Int64}, L::SparseMatrixCSC{Float64,Int64}, \nM::SparseMatrixCSC{Float64,Int64}, \nbd::Array{Int64}, Δt::Float64, m::Int64, n::Int64, h::Float64)\n\nAssembles matrices from mechanics and flow and assemble the coupled matrix \n\nbeginbmatrix\nhat M  -hat L^T\nhat L  hat Q\nendbmatrix\n\nQ is obtained from compute_fvm_tpfa_matrix, M is obtained from compute_fem_stiffness_matrix, and L is obtained from compute_interaction_matrix.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.coupled_impose_pressure","page":"API","title":"PoreFlow.coupled_impose_pressure","text":"coupled_impose_pressure(A::SparseMatrixCSC{Float64,Int64}, pnode::Array{Int64}, \nm::Int64, n::Int64, h::Float64)\n\nReturns a trimmed matrix.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.bcnode","page":"API","title":"PoreFlow.bcnode","text":"bcnode(desc::String, m::Int64, n::Int64, h::Float64)\n\nReturns the node indices for the description. Multiple descriptions can be concatented via |\n\n                upper\n        |------------------|\nleft    |                  | right\n        |                  |\n        |__________________|\n\n                lower\n\nExample\n\nbcnode(\"left|upper\", m, n, h)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.bcedge","page":"API","title":"PoreFlow.bcedge","text":"bcedge(desc::String, m::Int64, n::Int64, h::Float64)\n\nReturns the edge indices for description. See bcnode\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.interior_node","page":"API","title":"PoreFlow.interior_node","text":"interior_node(desc::String, m::Int64, n::Int64, h::Float64)\n\nIn contrast to bcnode, interior_node returns the nodes that are not specified by desc, including thosee on the boundary.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.femidx","page":"API","title":"PoreFlow.femidx","text":"femidx(d::Int64, m::Int64)\n\nReturns the FEM index of the dof d. Basically, femidx is the inverse of \n\n(i,j) → d = (j-1)*(m+1) + i\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.fvmidx","page":"API","title":"PoreFlow.fvmidx","text":"fvmidx(d::Int64, m::Int64)\n\nReturns the FVM index of the dof d. Basically, femidx is the inverse of \n\n(i,j) → d = (j-1)*m + i\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.subdomain","page":"API","title":"PoreFlow.subdomain","text":"subdomain(f::Function, m::Int64, n::Int64, h::Float64)\n\nReturns the subdomain defined by f(x, y)==true.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.gauss_nodes","page":"API","title":"PoreFlow.gauss_nodes","text":"gauss_nodes(m::Int64, n::Int64, h::Float64)\n\nReturns the node matrix of Gauss points for all elements. The matrix has a size 4mntimes 2\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.fem_nodes","page":"API","title":"PoreFlow.fem_nodes","text":"fem_nodes(m::Int64, n::Int64, h::Float64)\n\nReturns the FEM node matrix of size (m+1)(n+1)times 2\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.fvm_nodes","page":"API","title":"PoreFlow.fvm_nodes","text":"fvm_nodes(m::Int64, n::Int64, h::Float64)\n\nReturns the FVM node matrix of size (m+1)(n+1)times 2\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.cholesky_factorize","page":"API","title":"PoreFlow.cholesky_factorize","text":"cholesky_factorize(A::Union{Array{<:Real,2}, PyObject})\n\nReturns the cholesky factor of A. See cholesky_outproduct for details. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.cholesky_outproduct","page":"API","title":"PoreFlow.cholesky_outproduct","text":"cholesky_outproduct(L::Union{Array{<:Real,2}, PyObject})\n\nReturns  A = LL where L (length=6) is a vectorized form of L L = beginmatrix l_1  0  0  l_4  l_2  0   l_5  l_6  l_3 endmatrix and A (length=9) is also a vectorized form of A\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.fem_to_fvm","page":"API","title":"PoreFlow.fem_to_fvm","text":"fem_to_fvm(u::Union{PyObject, Array{Float64}}, m::Int64, n::Int64, h::Float64)\n\nInterpolates the nodal values of u to cell values. \n\n\n\n\n\n","category":"function"},{"location":"advection_diffusion/#Advection-Diffusion-Equation-1","page":"Advection Diffusion Equation","title":"Advection Diffusion Equation","text":"","category":"section"},{"location":"inv_twophaseflow/#Coupled-Geomechanics-and-Multiphase-Flow-1","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"","category":"section"},{"location":"inv_twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"This section is dedicated to the inverse problem of Coupled Geomechanics and Multiphase Flow. We only consider the parameter inverse problem here, i.e., estimating the Lamé constants and the viscosity parameter from surface horizontal displacement data. We have tried solving the function inverse problem–-estimating a nonparametric constitutive relation–-using the neural network approach in the single phase flow problem, but unfortunately it appears that the limited displacement data are insufficient to train a neural network. ","category":"page"},{"location":"inv_twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"To this end, we generate the observation data–-x-direction displacement on the surface with the following parameters","category":"page"},{"location":"inv_twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Linear Elasticity: E=6times 10^9quad nu=035","category":"page"},{"location":"inv_twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Viscoelasticity: E=6times 10^9quad nu=035quad eta = 6667times 10^11","category":"page"},{"location":"inv_twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"(Image: linear_disp)","category":"page"},{"location":"inv_twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"To test the robustness of the algorithm, we add different levels of noise to the observation data u_mathrmobs:","category":"page"},{"location":"inv_twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"(tilde u_mathrmobs)_i = (u_mathrmobs)_i(1+sigma w_i)","category":"page"},{"location":"inv_twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"where sigma = 0 001 005 and 01, and w_i is a standard normal variable. ","category":"page"},{"location":"inv_twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Linear Elasticity","category":"page"},{"location":"inv_twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"We measure the error by fracH-H^*_2H^*_2, where H is the exact elastic tangent matrix. The exact matrix is ","category":"page"},{"location":"inv_twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"H^* = beginbmatrix962963  518519  00    \n 518519  962963  00    \n 00      00      222222endbmatrix","category":"page"},{"location":"inv_twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"The initial guess for the matrix is","category":"page"},{"location":"inv_twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"H_0 = 10^9 times beginbmatrix1  0  00  1  0  0  0  1endbmatrix","category":"page"},{"location":"inv_twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"We also ensure that the matrix is symmetric positive semidefinite by optimizating H = DD, where D is a free variable of size 3times 3.  ","category":"page"},{"location":"inv_twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Noise Level sigma=0 sigma=001 sigma=005 $\\sigma=0.1 $\nEstimated (times 10^9) leftbeginarrayccc96302  51853  -00001 51853  96318  00001 -00001  00001  22234 endarrayright leftbeginarrayccc96925  52306  -00201 52306  97894  -00037 -00201  -00037  23537 endarrayright leftbeginarrayccc10409  50079  -03379 50079  111585  -01039 -03379  -01039  35966 endarrayright leftbeginarrayccc103964  50069  -03472 50069  119231  0009 -03472  0009  39155 endarrayright\nError 16200times 10^-4 14554times 10^-2 14518times 10^-1 19220times 10^-1\nIterations 72 88 81 72","category":"page"},{"location":"inv_twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Viscoelasticity","category":"page"},{"location":"inv_twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"We report the relative error for each parameter mu, lambda, and eta^-1 (for convenience, we use the reciprocal of eta for numerical simulations). The initial guesses are 10^9, 10^9 and 10^-12 respectively. The exact values are ","category":"page"},{"location":"inv_twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"mu^* = 222 times 10^9quad lambda^* =  519times 10^9quad (eta^*)^-1 = 15times 10^-12","category":"page"},{"location":"inv_twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Noise Level sigma=0 sigma=001 sigma=005 sigma=01\nmu ($\\times 10^9 $) 2.2222 2.2339 2.1949 2.1711\nError 201times 10^-6 525times 10^-3 1.23e-02 230times 10^-2\nlambda (times 10^9) 5.1852 5.1729 5.222 5.2602\nError 132times 10^-7 238times 10^-3 710times 10^-3 145times 10^-2\neta^-1 (times 10^-12) 1.5 1.4936 1.5154 1.5242\nError 802times 10^-7 428times 10^-3 102times 10^-2 161times 10^-2\nIterations 29 29 29 30","category":"page"},{"location":"inv_twophaseflow/#","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"We can see our inversion method is quite accurate and robust. ","category":"page"},{"location":"inv_viscoelasticity_earth/#Viscoelasticity-Model-for-the-Earth-1","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"","category":"section"},{"location":"inv_viscoelasticity_earth/#","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"In previous section, we show how to conduct forward computation of viscoelasticity models for the earth. In this section, we use a gradient-based optimization (L-BFGS-S) approach for calibrating the spatial-varying viscoelasticity parameters for the viscoelasticity model. The major function we use is ViscoelasticitySolver in NNFEM in the NNFEM package.  ","category":"page"},{"location":"inv_viscoelasticity_earth/#","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"In the following examples, we calibrate the viscoelasticity parameters eta from displacement data on the surface. ","category":"page"},{"location":"inv_viscoelasticity_earth/#Strike-slip-Fault-1","page":"Viscoelasticity Model for the Earth","title":"Strike-slip Fault","text":"","category":"section"},{"location":"inv_viscoelasticity_earth/#","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"In this example, we consider a layer model. In each layer, eta is a constant. The left panel in the following graph shows the ground truth, while the inversion result is shown in the right panel. We can see the inverted eta is quite accurate after 2000 iterations.  ","category":"page"},{"location":"inv_viscoelasticity_earth/#","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"True model Inverted result\n(Image: ) (Image: )","category":"page"},{"location":"inv_viscoelasticity_earth/#","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"We show the inversion results in each iteration:","category":"page"},{"location":"inv_viscoelasticity_earth/#","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"<center>\n<img src=\"../assets/visco-earth/strikeslip-inv_visco.gif\" width=60%>\n</center>","category":"page"},{"location":"inv_viscoelasticity_earth/#","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"Code:  antiplaneviscosityinverse.jl","category":"page"},{"location":"inv_viscoelasticity_earth/#Dip-slip-Fault-1","page":"Viscoelasticity Model for the Earth","title":"Dip-slip Fault","text":"","category":"section"},{"location":"inv_viscoelasticity_earth/#","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"In this example, we consider a linear viscosity model with an increasing viscosity effect at a deeper depth. Because of the limited observation data (displacement on the surface), we do not expect to calibrate a spatially-varying eta for each location. Therefore, we reduce the number of optimizable variables b dividing the computational domain into multiple patches. The patch is obtained using K-means algorithm provided by Clustering.jl: ","category":"page"},{"location":"inv_viscoelasticity_earth/#","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"<center>\n<img src=\"../assets/visco-earth/dipslip-patch.png\" width=50%>\n</center>","category":"page"},{"location":"inv_viscoelasticity_earth/#","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"The true vsicoelasticity parameter distribution is shown in the left panel in the following graph. The right panel shows the inverted result after 200 iterations. We can see that the inverted result is reasonably good. ","category":"page"},{"location":"inv_viscoelasticity_earth/#","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"True model Inverted result\n(Image: ) (Image: )","category":"page"},{"location":"inv_viscoelasticity_earth/#","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"We also show the inversion results in each iteration:","category":"page"},{"location":"inv_viscoelasticity_earth/#","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"<center>\n<img src=\"../assets/visco-earth/dipslip-inv_visco.gif\" width=80%>\n</center>","category":"page"},{"location":"inv_viscoelasticity_earth/#","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"Code: dippingfaultviscosityforward.jl, dippingfaultviscosityinversion.jl, loaddomainfunction.jl.","category":"page"},{"location":"mantle/#Mantle-Convection-1","page":"Mantle Convection","title":"Mantle Convection","text":"","category":"section"},{"location":"mantle/#","page":"Mantle Convection","title":"Mantle Convection","text":"We study the mantle convection and plate motion in this article. We can model this physical phenomenon using a coupled system of velocity and temperature, where the governing equation for the velocity is the balance of linear momentum and incompressibility","category":"page"},{"location":"mantle/#","page":"Mantle Convection","title":"Mantle Convection","text":"beginaligned\ntextdiv cdot u = 0 \n-nabla cdot sigma = Re T e_y\nendaligned","category":"page"},{"location":"mantle/#","page":"Mantle Convection","title":"Mantle Convection","text":"Here u is the velocity, Re is the Raleigh number, e_y is the unit vector pointing in the y direction, T is the temperature, and sigma is the stress tensor. ","category":"page"},{"location":"mantle/#","page":"Mantle Convection","title":"Mantle Convection","text":"The conservation of energy is given by ","category":"page"},{"location":"mantle/#","page":"Mantle Convection","title":"Mantle Convection","text":"fracpartial Tpartial t + u cdot nabla T - nabla^2 T = 0","category":"page"},{"location":"mantle/#","page":"Mantle Convection","title":"Mantle Convection","text":"We close the system with the following constitutive relation ","category":"page"},{"location":"mantle/#","page":"Mantle Convection","title":"Mantle Convection","text":"sigma = -pI +2eta_eff epsilon(u)","category":"page"},{"location":"mantle/#","page":"Mantle Convection","title":"Mantle Convection","text":"Here epsilon(u) is the Cauchy strain. The effective viscosity parameter is given by ","category":"page"},{"location":"mantle/#","page":"Mantle Convection","title":"Mantle Convection","text":"eta_eff = eta_min + minleft( frac sigma_yield2sqrtepsilon_II omega min(eta_max eta) right)","category":"page"},{"location":"mantle/#","page":"Mantle Convection","title":"Mantle Convection","text":"Here epsilon_II = frac12 epsilon(u)  epsilon(u), and ","category":"page"},{"location":"mantle/#","page":"Mantle Convection","title":"Mantle Convection","text":"eta = Ce^E(05-T)(epsilon_II)^frac1-n2n)","category":"page"},{"location":"mantle/#","page":"Mantle Convection","title":"Mantle Convection","text":"We consider a Dirichlet boundary conditions for the temperature on the top and bottom","category":"page"},{"location":"mantle/#","page":"Mantle Convection","title":"Mantle Convection","text":"T_partial Gamma_d = T_d","category":"page"},{"location":"mantle/#","page":"Mantle Convection","title":"Mantle Convection","text":"and a no-flux conditions on the remaining  boundaries","category":"page"},{"location":"mantle/#","page":"Mantle Convection","title":"Mantle Convection","text":"nabla Tcdot n_partial Omega backslash Gamma_d = 0","category":"page"},{"location":"mantle/#","page":"Mantle Convection","title":"Mantle Convection","text":"where n is the unit normal at the boundary. For the Stokes equation, we assume a free-slip mechanical condition on all boundaries","category":"page"},{"location":"mantle/#","page":"Mantle Convection","title":"Mantle Convection","text":"u cdot n = 0qquad n times (ntimes sigma n) = 0","category":"page"},{"location":"elastodynamics/#Elastodynamics-1","page":"Elastodynamics","title":"Elastodynamics","text":"","category":"section"},{"location":"elastodynamics/#","page":"Elastodynamics","title":"Elastodynamics","text":"The governing equation for elastodynamics is ","category":"page"},{"location":"elastodynamics/#","page":"Elastodynamics","title":"Elastodynamics","text":"beginaligned\nfracpartial^2 upartial t^2 = mathrmdivsigma + f Omegatimes 0T\nsigma n = t  Gamma_Ntimes 0T\nu = u_0  Gamma_Dtimes0T\nendaligned","category":"page"},{"location":"elastodynamics/#","page":"Elastodynamics","title":"Elastodynamics","text":"The constitutive law is given by ","category":"page"},{"location":"elastodynamics/#","page":"Elastodynamics","title":"Elastodynamics","text":"sigma = Cvarepsilon","category":"page"},{"location":"elastodynamics/#","page":"Elastodynamics","title":"Elastodynamics","text":"We fix the left side of the plate. We use the alpha method [alpha].","category":"page"},{"location":"elastodynamics/#","page":"Elastodynamics","title":"Elastodynamics","text":"[alpha]: Hughes, Thomas JR. The finite element method: linear static and dynamic finite element analysis. Courier Corporation, 2012. ","category":"page"},{"location":"elastodynamics/#","page":"Elastodynamics","title":"Elastodynamics","text":"Gravity External Force\n(Image: ) (Image: )","category":"page"},{"location":"elastodynamics/#","page":"Elastodynamics","title":"Elastodynamics","text":"β = 1/4; γ = 1/2\na = b = 0.1\nm = 40\nn = 20\nh = 0.01\nNT = 200\nΔt = 1/NT \nbdedge = []\nfor j = 1:n \n  push!(bdedge, [(j-1)*(m+1)+m+1 j*(m+1)+m+1])\nend\nbdedge = vcat(bdedge...)\n\nbdnode = Int64[]\nfor j = 1:n+1\n  push!(bdnode, (j-1)*(m+1)+1)\nend\n\nM = compute_fem_mass_matrix1(m, n, h)\nS = spzeros((m+1)*(n+1), (m+1)*(n+1))\nM = [M S;S M]\n\nK = compute_fem_stiffness_matrix(D, m, n, h)\nC = a*M + b*K # damping matrix \n\nL = M + γ*Δt*C + β*Δt^2*K\nL, Lbd = fem_impose_Dirichlet_boundary_condition(L, bdnode, m, n, h)\n\na = zeros(2(m+1)*(n+1))\nv = zeros(2(m+1)*(n+1))\nd = zeros(2(m+1)*(n+1))\nU = zeros(2(m+1)*(n+1),NT+1)\nfor i = 1:NT \n  T = eval_f_on_boundary_edge((x,y)->0.01, bdedge, m, n, h)\n  # T = eval_f_on_boundary_edge((x,y)->0.0, bdedge, m, n, h)\n  T = [zeros(length(T)) -T]\n  T = compute_fem_traction_term(T, bdedge, m, n, h)\n  f1 = eval_f_on_gauss_pts((x,y)->0., m, n, h)\n  f2 = eval_f_on_gauss_pts((x,y)->0., m, n, h)\n  # f2 = eval_f_on_gauss_pts((x,y)->0.1, m, n, h)\n  F = compute_fem_source_term(f1, f2, m, n, h)\n\n  rhs = F+T\n\n  td = d + Δt*v + Δt^2/2*(1-2β)*a \n  tv = v + (1-γ)*Δt*a \n  rhs = rhs - C*tv - K*td\n  rhs[[bdnode; bdnode.+(m+1)*(n+1)]] .= 0.0\n\n  a = L\\rhs \n  d = td + β*Δt^2*a \n  v = tv + γ*Δt*a \n  U[:,i+1] = d\nend\n\nx = []\ny = []\nfor j= 1:n+1\n  for i = 1:m+1\n    push!(x, (i-1)*h)\n    push!(y, (j-1)*h)\n  end\nend\nfor i = 1:10:NT+1\n  close(\"all\")\n  scatter(x+U[1:(m+1)*(n+1), i], y+U[(m+1)*(n+1)+1:end, i])\n  xlabel(\"x\")\n  ylabel(\"y\")\n  k = string(i)\n  k = repeat(\"0\", 3-length(k))*k \n  title(\"t = $k\")\n  ylim(-0.05,0.25)\n  gca().invert_yaxis()\n  savefig(\"u$k.png\")\nend","category":"page"},{"location":"gallery/#PDE-Galleries-1","page":"PDE Galleries","title":"PDE Galleries","text":"","category":"section"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"Here is a collection of common partial differential equations and how you can solve them using the PoreFlow library. Unless we specify particularly, the computational domain will be Omega = 01^2. The configuration of the computational domain is as follows","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"(Image: )","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"We only show the forward modeling, but the inverse modeling is a by-product of the AD-capable implementation!","category":"page"},{"location":"gallery/#Poisson's-Equation-1","page":"PDE Galleries","title":"Poisson's Equation","text":"","category":"section"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"Consider the Poisson's equation ","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"-Delta u = f qquad u_partial Omega = 0","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"The analytical solution is given by ","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"u(xy) = sin pi x sin pi y","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"We have","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"f(xy) = 2pi^2 sin pi x sin pi y","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"using PyPlot \nusing PoreFlow\n\nm = 50; n = 50; h = 1/n \n\nA = constant(compute_fem_laplace_matrix1(m, n, h))\nF = eval_f_on_gauss_pts((x,y)->2π^2*sin(π*x)*sin(π*y), m, n, h)\nbd = bcnode(\"all\", m, n, h)\nA, _ = fem_impose_Dirichlet_boundary_condition1(A, bd, m, n, h)\nrhs = compute_fem_source_term1(F, m, n, h)\nrhs[bd] .= 0.0\nsol = A\\rhs\n\nsess = Session(); init(sess)\nS = run(sess, sol)\n\nfigure(figsize=(10,4))\nsubplot(121)\nvisualize_scalar_on_fem_points(S, m, n, h)\ntitle(\"Computed\")\nsubplot(122)\nvisualize_scalar_on_fem_points(eval_f_on_fem_pts((x,y)->sin(π*x)*sin(π*y), m, n, h), m, n, h)\ntitle(\"Reference\")","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"(Image: )","category":"page"},{"location":"gallery/#Stokes's-Problem-1","page":"PDE Galleries","title":"Stokes's Problem","text":"","category":"section"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"The Stokes problem is given by ","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"beginaligned\n-nuDelta mathbfu + nabla p = mathbff  text in  Omega  \nnabla cdot mathbfu = 0  text in  Omega  \nmathbfu = mathbf0  text on  partial Omega\nendaligned","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"Here nu denotes the fluid viscosity, f is the unit external volumetric force acting on the fluid, p is the pressure, and mathbfu is the fluid velocity. ","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"The boundary conditions are given by ","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"beginaligned\nmathbfu  = mathbf0  text in  Gamma_1  \nmathbfu times mathbfn  = mathbf0  text on  Gamma_2  \np = p_0  text on  Gamma_2\nendaligned","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"Here partial Omega = barGamma_1cup bar Gamma_2, Gamma_1cap Gamma_2 = emptyset. ","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"The second boundary condition indicates that there is no tangential flow. A realistic example is  the cerebral venous network. Gamma_1  corresponds to the lateral boundary (the vessel wall), and Gamma_2 corresponds to the the union of inflow/outflow boundaries. ","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"info: Info\nIn the weak form, the boundary term from -nuDeltamathbfu is  int_Omega u_x v_1 n_1 + u_y v_1 n_2 + v_x v_2 n_1 + v_2 v_2 n_2 dmathbfx Note that on the no tangential flow boundary gives  un_2 = n_1 v Rightarrow u_y n_2  = v_y n_1 Additionally, we have from incompressibility  u_x + v_y = 0Combining the above two equations we have u_x v_1 n_1 + u_y v_1 n_2 = 0Likewise, v_x v_2 n_1 + v_2 v_2 n_2 = 0 on the no tangential boundary. For the other boundary Gamma_1, these two terms vanishes because v_1 = v_2 = 0. Therefore, the current boundary condition leads to a zero boundary term. ","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"We consider the following analytical solution ","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"beginaligned\nu(xy) = 2pisin(pi x)sin(pi x)cos(pi y)sin(pi y) \nv(xy) = -2pisin(pi x)sin(pi y)cos(pi x)sin(pi y)  \np(xy) = sin(pi x)sin(pi y)\nendaligned","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"and we let nu=05. ","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"using PoreFlow\nusing PyPlot\nusing SparseArrays\n\nm = 60\nn = 60\nh = 1/n\n\nfunction f1func(x,y)\n    18.8495559215388*pi^2*sin(pi*x)^2*sin(pi*y)*cos(pi*y) - 6.28318530717959*pi^2*sin(pi*y)*cos(pi*x)^2*cos(pi*y) + pi*sin(pi*y)*cos(pi*x)\nend\nfunction f2func(x,y)\n    -18.8495559215388*pi^2*sin(pi*x)*sin(pi*y)^2*cos(pi*x) + 6.28318530717959*pi^2*sin(pi*x)*cos(pi*x)*cos(pi*y)^2 + pi*sin(pi*x)*cos(pi*y)\nend\n\n\nν = 0.5\nK = ν*constant(compute_fem_laplace_matrix(m, n, h))\nB = constant(compute_interaction_matrix(m, n, h))\nZ = [K -B'\n-B spdiag(zeros(size(B,1)))]\n\nbd = bcnode(\"all\", m, n, h)\nbd = [bd; bd .+ (m+1)*(n+1); ((1:m) .+ 2(m+1)*(n+1))]\nZ, _ = fem_impose_Dirichlet_boundary_condition1(Z, bd, m, n, h)\n\n\nF1 = eval_f_on_gauss_pts(f1func, m, n, h)\nF2 = eval_f_on_gauss_pts(f2func, m, n, h)\nF = compute_fem_source_term(F1, F2, m, n, h)\nxy = fvm_nodes(m, n, h)\nrhs = [F;zeros(m*n)]\nrhs[bd] .= 0.0\nsol = Z\\rhs \n\nsess = Session(); init(sess)\nS = run(sess, sol)\n\nxy = fem_nodes(m, n, h)\nx, y = xy[:,1], xy[:,2]\nU = @. 2*pi*sin(pi*x)*sin(pi*x)*cos(pi*y)*sin(pi*y)\nfigure(figsize=(12,5))\nsubplot(121)\nvisualize_scalar_on_fem_points(U, m, n, h)\ntitle(\"Reference\")\nsubplot(122)\nvisualize_scalar_on_fem_points(S[1:(m+1)*(n+1)], m, n, h)\ntitle(\"Computed\")\nsavefig(\"stokes1.png\")\n\nU = @. -2*pi*sin(pi*x)*sin(pi*y)*cos(pi*x)*sin(pi*y)\nfigure(figsize=(12,5))\nsubplot(121)\nvisualize_scalar_on_fem_points(U, m, n, h)\ntitle(\"Reference\")\nsubplot(122)\nvisualize_scalar_on_fem_points(S[(m+1)*(n+1)+1:2(m+1)*(n+1)], m, n, h)\ntitle(\"Computed\")\nsavefig(\"stokes2.png\")\n\n\nxy = fvm_nodes(m, n, h)\nx, y = xy[:,1], xy[:,2]\np = @. sin(pi*x)*sin(pi*y)\nfigure(figsize=(12,5))\nsubplot(121)\nvisualize_scalar_on_fvm_points(p, m, n, h)\ntitle(\"Reference\")\nsubplot(122)\nvisualize_scalar_on_fvm_points(S[2(m+1)*(n+1)+1:end], m, n, h)\ntitle(\"Computed\")","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"Variable Result\nu (Image: )\nv (Image: )\np (Image: )","category":"page"},{"location":"gallery/#Heat-Transfer-1","page":"PDE Galleries","title":"Heat Transfer","text":"","category":"section"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"We consider the following heat transfer equation ","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"beginaligned\nfracpartial Tpartial t + mathbfu cdot nabla T - nabla^2 T = f  \nT_partial Omega = 0\nendaligned","category":"page"},{"location":"gallery/#Test-Problem-1","page":"PDE Galleries","title":"Test Problem","text":"","category":"section"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"Let us first consider a test problem and consider the analytical solution ","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"T(xy) = (1-x)x(1-y)ye^-t","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"and mathbfu = beginpmatrix 1 1 endpmatrix. The right hand side is given by ","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"using SymPy\nx, y, t = @vars x y t \nT = (1-x)*x*(1-y)*y*exp(-t)\nf = diff(T, t) + diff(T, x) + diff(T, y) - diff(diff(T, x), x) - diff(diff(T, y), y)\nprintln(replace(replace(sympy.julia_code(f), \".*\"=>\"*\"), \".^\"=>\"^\"))","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"We can plug the source term into the code ","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"using PoreFlow\nusing PyPlot\n\nm = 50\nn = 50\nh = 1/n\nNT = 100\nΔt = 1/NT \n\n\nu = [ones(m*n);ones(m*n)]\n\nbd = bcedge(\"all\", m, n, h)\n\nM = compute_fvm_mass_matrix(m, n, h)\nK, rhs1 = compute_fvm_advection_matrix(u, bd, zeros(size(bd, 1)), m, n, h)\nS, rhs2 = compute_fvm_tpfa_matrix(missing, bd, zeros(size(bd, 1)), m, n, h)\n\nfunction Func(x, y, t)\n    -x*y*(1 - x)*(1 - y)*exp(-t) - x*y*(1 - x)*exp(-t) - x*y*(1 - y)*exp(-t) + x*(1 - x)*(1 - y)*exp(-t) + 2*x*(1 - x)*exp(-t) + y*(1 - x)*(1 - y)*exp(-t) + 2*y*(1 - y)*exp(-t)\nend\n\nA = M/Δt + K - S \nA = factorize(A)\nU = zeros(m*n, NT+1)\nxy = fvm_nodes(m, n, h)\nx, y = xy[:,1], xy[:,2]\nu0 = @. x*(1-x)*y*(1-y)\nF = zeros(NT+1, m*n)\nSolution = zeros(NT+1, m*n)\nfor i = 1:NT+1\n    t = (i-1)*Δt\n    F[i,:] = h^2 * @. Func(x, y, t)\n    Solution[i,:] = eval_f_on_fvm_pts((x,y)->(1-x)*x*(1-y)*y*exp(-t), m,n, h)\nend\nF = constant(F)\n\nfunction condition(i, args...)\n    i <= NT\nend\n\nfunction body(i, u_arr)\n    u = read(u_arr, i)\n    u_arr = write(u_arr, i+1, A\\(M*u/Δt - rhs1 + rhs2 + F[i+1]))\n    return i+1, u_arr\nend\n\ni = constant(1, dtype = Int32)\nu_arr = TensorArray(NT+1)\nu_arr = write(u_arr, 1, u0)\n_, u = while_loop(condition, body, [i, u_arr])\nu = set_shape(stack(u), (NT+1, m*n))\n\n\nsess = Session(); init(sess)\nU = run(sess, u)\nZ = zeros(NT+1, n, m)\n\n\np = visualize_scalar_on_fvm_points(U, m, n, h)\n# saveanim(p, \"heat_sol.gif\")\n\np = visualize_scalar_on_fvm_points(abs.(U-Solution), m, n, h)\n# saveanim(p, \"heat_error.gif\")\n","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"Computed Error\n(Image: ) (Image: )","category":"page"},{"location":"gallery/#Advection-Effect-1","page":"PDE Galleries","title":"Advection Effect","text":"","category":"section"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"Now let us consider the advection effect. The upper and lower boundaries are fixed Dirichlet boundaries. The left and right are no-flow boundaries ","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"fracpartial Tpartial n = 0","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"using PoreFlow\nusing PyPlot\n\nm = 40\nn = 20\nh = 1/n\nNT = 100\nΔt = 1/NT \n\n\nu = 0.5*[ones(m*n);zeros(m*n)]\n\nup_and_down = bcedge(\"upper|lower\", m, n, h)\n\nM = compute_fvm_mass_matrix(m, n, h)\nK, rhs1 = compute_fvm_advection_matrix(u, up_and_down, zeros(size(up_and_down, 1)), m, n, h)\nS, rhs2 = compute_fvm_tpfa_matrix(missing, up_and_down, zeros(size(up_and_down, 1)), m, n, h)\n\nA = M/Δt + K - 0.01*S \nA = factorize(A)\n\nU = zeros(m*n, NT+1)\nxy = fvm_nodes(m, n, h)\nu0 = @. exp( - 10 * ((xy[:,1]-1.0)^2 + (xy[:,2]-0.5)^2))\n\nfunction condition(i, args...)\n    i <= NT\nend\n\nfunction body(i, u_arr)\n    u = read(u_arr, i)\n    u_arr = write(u_arr, i+1, A\\(M*u/Δt - rhs1 + rhs2))\n    return i+1, u_arr\nend\n\ni = constant(1, dtype = Int32)\nu_arr = TensorArray(NT+1)\nu_arr = write(u_arr, 1, u0)\n_, u = while_loop(condition, body, [i, u_arr])\nu = set_shape(stack(u), (NT+1, m*n))\n\n\nsess = Session(); init(sess)\nU = run(sess, u)\nZ = zeros(NT+1, n, m)\nfor i = 1:NT+1\n    Z[i,:,:] = reshape(U[i,:], m, n)'\nend\np = visualize_scalar_on_fvm_points(Z, m, n, h)\nsaveanim(p, \"advec.gif\")\n","category":"page"},{"location":"gallery/#","page":"PDE Galleries","title":"PDE Galleries","text":"(Image: )","category":"page"},{"location":"inv_viscoelasticity/#Inverse-Modeling-for-Space-Varying-Viscoelasticity-1","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"","category":"section"},{"location":"inv_viscoelasticity/#Problem-Description-1","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Problem Description","text":"","category":"section"},{"location":"inv_viscoelasticity/#","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"In this example, we consider the Maxwell viscoelasticity model. The governing equations are","category":"page"},{"location":"inv_viscoelasticity/#","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"Momentum Balance:","category":"page"},{"location":"inv_viscoelasticity/#","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"sigma_ijj + rho f_i = rho ddot u_i","category":"page"},{"location":"inv_viscoelasticity/#","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"Constitutive Relation (Plane Strain Viscoelasticity):","category":"page"},{"location":"inv_viscoelasticity/#","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"dot sigma_ij + fracmueta left( sigma_ij - fracsigma_kk3delta_ij right) = 2mu dot varepsilon_ij + lambda dotvarepsilon_kkdelta_ij","category":"page"},{"location":"inv_viscoelasticity/#","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"Boundary Conditions:","category":"page"},{"location":"inv_viscoelasticity/#","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"beginaligned\nbmsigma mathbfn =\nbegincases\n0  textTop or Bottom  \n-T 0  textRight \nendcases  \nmathbfu =0 texthspace31cm Left \nendaligned","category":"page"},{"location":"inv_viscoelasticity/#","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"(Image: )","category":"page"},{"location":"inv_viscoelasticity/#","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"We assume that the Lamé constants lambda and mu are given. The viscosity eta is spatial varying. We want to estimate eta based on the measurement of surface horizontal displacements. The true model consists of two layers of different vicosity. ","category":"page"},{"location":"inv_viscoelasticity/#","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"True Viscosity Distribution Von Mises Stress Displacement\n(Image: ) (Image: ) (Image: )","category":"page"},{"location":"inv_viscoelasticity/#Forward-simulation-1","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Forward simulation","text":"","category":"section"},{"location":"inv_viscoelasticity/#","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"We implement the forward simulation using finite element analysis discretization and alpha-scheme, an implicit time stepping scheme that offers good stability and accuracy. ","category":"page"},{"location":"inv_viscoelasticity/#Inversion-Method-1","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inversion Method","text":"","category":"section"},{"location":"inv_viscoelasticity/#","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"We formulate the loss function as the discrepancy between observations and predictions","category":"page"},{"location":"inv_viscoelasticity/#","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"mathcalJ(eta) = sum_i=1^N_T sum_k=1^m+1 (mathbfu_ik^mathrmobs- mathbfu_i(x_k 0))^2","category":"page"},{"location":"inv_viscoelasticity/#","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"Unlike the linear elasticity case, in the viscoelasticity case, the stress is history-dependent. Therefore, when we calculate the gradients fracpartialmathcalJpartial eta, the state variables are both mathbfu and bmsigma. Additionally, in each time step, since we have used an implicit scheme, we need to solve an equation ","category":"page"},{"location":"inv_viscoelasticity/#","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"A(eta bmsigma^n+1) mathbfu^n+1 = mathbff(bmsigma^n mathbfu^n)","category":"page"},{"location":"inv_viscoelasticity/#","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"The state adjoint method requires us to compute the gradients of ","category":"page"},{"location":"inv_viscoelasticity/#","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"mathbfu^n+1(bmsigma^n eta mathbfu^n) = A(eta bmsigma^n+1)^-1 mathbff(bmsigma^n mathbfu^n)tag1","category":"page"},{"location":"inv_viscoelasticity/#","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"with respect to bmsigma^n, eta and mathbfu^n. ","category":"page"},{"location":"inv_viscoelasticity/#","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"Surprisingly, the seemingly complex formula (1) admits a simple implementation using automatic differentiation (of course a special technique called physics constrained learning is needed). Once the gradients fracpartialmathcalJpartial eta is computed, the inversion problem can be solved using gradient-based optimization techniques (e.g., LBFGS).","category":"page"},{"location":"inv_viscoelasticity/#","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"(Image: )","category":"page"},{"location":"inv_viscoelasticity/#Numerical-Example-1","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Numerical Example","text":"","category":"section"},{"location":"inv_viscoelasticity/#","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"We present the numerical example here. The true model and inverted model are shown as follows. We assume that the viscosity values are the same horizontally. ","category":"page"},{"location":"inv_viscoelasticity/#","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"True model Inverted result\n(Image: ) (Image: )","category":"page"},{"location":"inv_viscoelasticity/#","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"We also show the inversion results in each iteration:","category":"page"},{"location":"inv_viscoelasticity/#","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"(Image: )","category":"page"},{"location":"inv_viscoelasticity/#Codes-1","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Codes","text":"","category":"section"},{"location":"inv_viscoelasticity/#","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"The highlights of the implementation are","category":"page"},{"location":"inv_viscoelasticity/#","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"The alpha-scheme for time stepping. A stable scheme is important for inversion since we need to try out different parameters, which may crash the simulation if the scheme is sensitive to physical parameters. Therefore, we chose the alpha scheme, which is an implicit scheme that offers satisfactory stability. \nwhile_loop. while_loop mechanism allows us to create only one computational graph for all the iterations. This is essential for simulations that span large time horizons. Fortunately, TensorFlow offers this functionality. \nCustom sparse solver. We have used custom sparse solvers in ADCME, which uses Eigen SparseLU as the backend. The sparse solver is the key for efficient implementation of physics constrained learning; otherwise, direct implementation in TensorFlow will convert the sparse matrix to dense and then invoke BLAS libraries. ","category":"page"},{"location":"inv_viscoelasticity/#","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"using Revise\nusing PoreFlow\nusing PyCall\nusing LinearAlgebra\nusing PyPlot\nusing SparseArrays\nusing MAT\nusing ADCMEKit\nnp = pyimport(\"numpy\")\n\n\nstepsize = 1\nif length(ARGS)==1\n  global stepsize = parse(Int64, ARGS[1])\nend\n@info stepsize\n\nmode = \"training\"\n\n## alpha-scheme\nβ = 1/4; γ = 1/2\na = b = 0.1\n\nn = 15\nm = 2n \nh = 0.01\nNT = 100\nΔt = 2.0/NT\nηmax = 1\nηmin = 0.5\n\nobs_idx = collect(1:stepsize:m+1)\n\nbdedge = bcedge(\"right\", m, n, h)\nbdnode = bcnode(\"lower\", m, n, h)\n\n# λ = Variable(1.0)\n# μ = Variable(1.0)\n# invη = Variable(1.0)\n\nfunction eta_model(idx)\n  if idx == 1\n    out = ηmin * ones(n)\n    out[1:div(n,3)] .= ηmax\n    out\n  elseif idx==2\n    out = ηmin * ones(4, m, n)\n    out[:, :, 1:div(n,3)] .= ηmax\n    out[:, :, 2div(n,3):end] .= ηmax\n    out[:]\n  end\nend\n\nfunction visualize_inv_eta(X, k)\n    x = LinRange(0.5h,m*h, m)\n    y = LinRange(0.5h,n*h, n)\n    V = zeros(m, n)\n    for i = 1:m  \n        for j = 1:n \n            elem = (j-1)*m + i \n            V[i, j] = mean(X[4(elem-1)+1:4elem])\n        end\n    end\n    close(\"all\")\n    pcolormesh(x, y, V'/50.0, vmin=ηmin-(ηmax-ηmin)/4, vmax=ηmax+(ηmax-ηmin)/4)\n    colorbar(shrink=0.5)\n    xlabel(\"x\")\n    ylabel(\"y\")\n    # title(\"Iteration = $k\")\n    axis(\"scaled\")\n    gca().invert_yaxis()\n    if k == \"true\"\n      title(\"True Model\")\n      savefig(\"true.png\")\n      return \n    end\n    k_ = string(k)\n    k_ = reduce(*, \"0\" for i = 1:3-length(k_))*k_\n    title(\"Iteration = $k_\")\n    savefig(\"iter$k_.png\")\nend\n\nλ = constant(2.0)\nμ = constant(0.2)\nif mode==\"data\"\n  global invη_var = constant(eta_model(1))\n  invη = reshape(repeat(invη_var, 1, 4m), (-1,))\n  global invη *= 50.0\nelse\n    global invη_var = Variable((ηmin + ηmax)/2*ones(n))\n    invη_ = reshape(repeat(invη_var, 1, 4m), (-1,))\n    # invη_ = constant(eta_model(1))\n    global invη = 50.0*invη_\nend\n\n\n\nfn_G = invη->begin \n  G = tensor([1/Δt+2/3*μ*invη -μ/3*invη 0.0\n    -μ/3*invη 1/Δt+2/3*μ*invη 0.0\n    0.0 0.0 1/Δt+μ*invη])\n  invG = inv(G)\nend\ninvG = map(fn_G, invη)\nS = tensor([2μ/Δt+λ/Δt λ/Δt 0.0\n    λ/Δt 2μ/Δt+λ/Δt 0.0\n    0.0 0.0 μ/Δt])\nH = invG*S\n\n\nM = compute_fem_mass_matrix1(m, n, h)\nZero = spzeros((m+1)*(n+1), (m+1)*(n+1))\nM = SparseTensor([M Zero;Zero M])\n\nK = compute_fem_stiffness_matrix(H, m, n, h)\nC = a*M + b*K # damping matrix \nL = M + γ*Δt*C + β*Δt^2*K\nL, Lbd = fem_impose_Dirichlet_boundary_condition_experimental(L, bdnode, m, n, h)\n\n\na = TensorArray(NT+1); a = write(a, 1, zeros(2(m+1)*(n+1))|>constant)\nv = TensorArray(NT+1); v = write(v, 1, zeros(2(m+1)*(n+1))|>constant)\nd = TensorArray(NT+1); d = write(d, 1, zeros(2(m+1)*(n+1))|>constant)\nU = TensorArray(NT+1); U = write(U, 1, zeros(2(m+1)*(n+1))|>constant)\nSigma = TensorArray(NT+1); Sigma = write(Sigma, 1, zeros(4*m*n, 3)|>constant)\nVarepsilon = TensorArray(NT+1); Varepsilon = write(Varepsilon, 1,zeros(4*m*n, 3)|>constant)\n\n\nForces = zeros(NT, 2(m+1)*(n+1))\nfor i = 1:NT\n  T = eval_f_on_boundary_edge((x,y)->0.1, bdedge, m, n, h)\n\n  # if i>=NT÷2\n  #   T *= 0.0\n  # end\n  T = [-T T]\n#   T = [T T]\n  rhs = compute_fem_traction_term(T, bdedge, m, n, h)\n\n#   if i*Δt>0.5\n#     rhs = zero(rhs)\n#   end\n  Forces[i, :] = rhs\nend\nForces = constant(Forces)\n\nfunction condition(i, tas...)\n  i <= NT\nend\n\nfunction body(i, tas...)\n  a_, v_, d_, U_, Sigma_, Varepsilon_ = tas\n  a = read(a_, i)\n  v = read(v_, i)\n  d = read(d_, i)\n  U = read(U_, i)\n  Sigma = read(Sigma_, i)\n  Varepsilon = read(Varepsilon_, i)\n\n  res = batch_matmul(invG/Δt, Sigma)\n  F = compute_strain_energy_term(res, m, n, h) - K * U\n  rhs = Forces[i] - F\n\n  td = d + Δt*v + Δt^2/2*(1-2β)*a \n  tv = v + (1-γ)*Δt*a \n  rhs = rhs - C*tv - K*td\n  rhs = scatter_update(rhs, constant([bdnode; bdnode.+(m+1)*(n+1)]), constant(zeros(2*length(bdnode))))\n\n\n  ## alpha-scheme\n  a = L\\rhs # bottleneck  \n  d = td + β*Δt^2*a \n  v = tv + γ*Δt*a \n  U_new = d\n\n  Varepsilon_new = eval_strain_on_gauss_pts(U_new, m, n, h)\n\n  res2 = batch_matmul(invG * S, Varepsilon_new-Varepsilon)\n  Sigma_new = res +  res2\n\n  i+1, write(a_, i+1, a), write(v_, i+1, v), write(d_, i+1, d), write(U_, i+1, U_new),\n        write(Sigma_, i+1, Sigma_new), write(Varepsilon_, i+1, Varepsilon_new)\nend\n\n\ni = constant(1, dtype=Int32)\n_, _, _, _, u, sigma, varepsilon = while_loop(condition, body, \n                  [i, a, v, d, U, Sigma, Varepsilon])\n\nU = stack(u)\nSigma = stack(sigma)\nVarepsilon = stack(varepsilon)\n\nif mode!=\"data\"\n  data = matread(\"viscoelasticity.mat\")\n  global Uval,Sigmaval, Varepsilonval = data[\"U\"], data[\"Sigma\"], data[\"Varepsilon\"]\n  U.set_shape((NT+1, size(U, 2)))\n  idx0 = 1:4m*n\n  Sigma = map(x->x[idx0,:], Sigma)\n  global loss = sum((U[:, obs_idx] - Uval[:, obs_idx])^2) \nend\n\nif !isdir(string(stepsize));mkdir(string(stepsize)); end\nsess = Session(); init(sess)\n\ncb = (v, i, l)->begin\n  println(\"[$i] loss = $l\")\n  if i==\"true\" || mod(i,20)==0\n    inv_eta = v[1]\n    matwrite(\"$stepsize/eta$i.mat\", Dict(\"eta\"=>inv_eta))\n  end\nend\n\nif mode==\"data\"\n  Uval,Sigmaval, Varepsilonval = run(sess, [U, Sigma, Varepsilon])\n  matwrite(\"viscoelasticity.mat\", Dict(\"U\"=>Uval, \"Sigma\"=>Sigmaval, \"Varepsilon\"=>Varepsilonval))\n\n  # p = visualize_von_mises_stress(Sigmaval[1:5:end,:,:], m, n, h); saveanim(p, \"space_s.gif\")\n  # p = visualize_displacement(Uval[1:5:end,:], m, n, h); saveanim(p, \"space_u.gif\")\n\n  visualize_inv_eta(run(sess, invη), \"true\")\n  # cb([run(sess, invη)], \"true\", 0.0)\n  error(\"Stop!\")\nend\n\nv_ = []\ni_ = []\nl_ = []\n\n\nloss_ = BFGS!(sess, loss*1e10, vars=[invη], callback=cb, var_to_bounds=Dict(invη_var=>(0.1,2.0)))\n","category":"page"},{"location":"#PoreFlow.jl-Documentation-1","page":"PoreFlow.jl Documentation","title":"PoreFlow.jl Documentation","text":"","category":"section"},{"location":"#","page":"PoreFlow.jl Documentation","title":"PoreFlow.jl Documentation","text":"PoreFlow is a package for inverse modeling in geomechanics and fluid equations. Although many features of this package focus on geomechanics (linear elasticity, poroelasticity, plasticity, etc.) and single/multiphase flows, PoreFlow will also benefit other applications due to the general design and method. ","category":"page"},{"location":"#Install-PoreFlow.jl-1","page":"PoreFlow.jl Documentation","title":"Install PoreFlow.jl","text":"","category":"section"},{"location":"#","page":"PoreFlow.jl Documentation","title":"PoreFlow.jl Documentation","text":"using Pkg\nPkg.add(\"PoreFlow\")","category":"page"},{"location":"inv_viscoelasticity_nonparametric/#Inverse-Modeling-for-Nonparametric-Viscoelasticity-1","page":"Inverse Modeling for Nonparametric Viscoelasticity","title":"Inverse Modeling for Nonparametric Viscoelasticity","text":"","category":"section"},{"location":"inv_viscoelasticity_nonparametric/#","page":"Inverse Modeling for Nonparametric Viscoelasticity","title":"Inverse Modeling for Nonparametric Viscoelasticity","text":"In this section, we consider learning a nonparametric viscoelasticity model. We assume the Maxwell model for the material. However, the viscosity parameter is assumed to be a function of the stress","category":"page"},{"location":"inv_viscoelasticity_nonparametric/#","page":"Inverse Modeling for Nonparametric Viscoelasticity","title":"Inverse Modeling for Nonparametric Viscoelasticity","text":"eta(sigma) = 10 + frac51+1000 (sigma_xx^2 + sigma_yy^2 + sigma_xy^2) tag2","category":"page"},{"location":"inv_viscoelasticity_nonparametric/#","page":"Inverse Modeling for Nonparametric Viscoelasticity","title":"Inverse Modeling for Nonparametric Viscoelasticity","text":"This relation makes the constitutive equation (1) in this section nonlinear. ","category":"page"},{"location":"inv_viscoelasticity_nonparametric/#","page":"Inverse Modeling for Nonparametric Viscoelasticity","title":"Inverse Modeling for Nonparametric Viscoelasticity","text":"For the numerical simulation, we fix the bottom side of the computational domain and impose external pressure on the right hand side. Traction-free conditions are assumed for all other sides. ","category":"page"},{"location":"inv_viscoelasticity_nonparametric/#","page":"Inverse Modeling for Nonparametric Viscoelasticity","title":"Inverse Modeling for Nonparametric Viscoelasticity","text":"To model the constitutive relation (2), we approximate eta by a neural network. The neural network takes the 3-dimensional stress as input and outputs a 1-dimensional viscosity parameter. The alpha-scheme is used for the numerical simulation for stability. Using a robust and stable numerical scheme is very important in these NN-FEM hybrid models because the neural network might yield an ill-conditioned relation and causes numerical instabilities.","category":"page"},{"location":"inv_viscoelasticity_nonparametric/#","page":"Inverse Modeling for Nonparametric Viscoelasticity","title":"Inverse Modeling for Nonparametric Viscoelasticity","text":"The observation data are the x-direction displacement on the surface.  ","category":"page"},{"location":"inv_viscoelasticity_nonparametric/#","page":"Inverse Modeling for Nonparametric Viscoelasticity","title":"Inverse Modeling for Nonparametric Viscoelasticity","text":"We have tried different neural network architectures with different activation functions, widths, and depths and found that different architectures all perform reasonably well. Here we present the result for a fully-connected neural network with 3 hidden layers, 20 neurons per layer, and with the tanh activation function.   The following plots show both the x-direction displacement and the stresses of the left top point. The dashed line show the exact displacement","category":"page"},{"location":"inv_viscoelasticity_nonparametric/#","page":"Inverse Modeling for Nonparametric Viscoelasticity","title":"Inverse Modeling for Nonparametric Viscoelasticity","text":"Initial Learned\n(Image: disp0) (Image: disp8)","category":"page"},{"location":"inv_viscoelasticity_nonparametric/#","page":"Inverse Modeling for Nonparametric Viscoelasticity","title":"Inverse Modeling for Nonparametric Viscoelasticity","text":"We also show the movies of displacement and stress changes using the learned constitutive relations","category":"page"},{"location":"inv_viscoelasticity_nonparametric/#","page":"Inverse Modeling for Nonparametric Viscoelasticity","title":"Inverse Modeling for Nonparametric Viscoelasticity","text":"Displacement Stress\n(Image: disp_scattered_u_nn08) (Image: disp_s_nn8)","category":"page"}]
}
