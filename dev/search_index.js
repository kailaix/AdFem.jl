var documenterSearchIndex = {"docs":
[{"location":"NavierStokes2/#Navier-Stokes-equations","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"","category":"section"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"The Navier-Stokes equations describe the motion of viscous flow formed by a fluid material. Assume the material has density rho, dynamic viscosity mu, velocity bf u, pressure p, and body accelerations bf g, the Navier-Stokes equations include the the continuity equation, which describes the conservation of mass:","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"fracpartial rhopartial t + sum_i fracpartial rho u_ipartial x_i = 0","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"and the momentum equation, which describes the conservation of momentum in each spatial direction:","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"fracpartial rho u_ipartial t + sum_j fracpartial rho u_i u_jpartial x_j = sum_j fracpartial tau_ijpartial x_j - fracpartial p partial x_i+rho g_i quad forall i","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"where the stress tensor tau_ij is defined as tau_ij = mu left(fracpartial u_ipartial x_j + fracpartial u_jpartial x_i right) - frac23 mu delta_ij fracpartial u_jpartial x_j","category":"page"},{"location":"NavierStokes2/#Navier-Stokes-equations-for-incompressible-flow","page":"Navier-Stokes equations","title":"Navier-Stokes equations for incompressible flow","text":"","category":"section"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"We assume the fluid material is incompressible, i.e., has constant density rho, and we denote its the kinematic viscosity as nu=mu  rho. The incompressible Navier-Stokes equations in the absence of body accelerations, and in two spatial dimensions, are given by","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"fracpartial upartial x+fracpartial vpartial y=0 tag1","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"fracpartial upartial t+u fracpartial upartial x+v fracpartial upartial y=-frac1rho fracpartial ppartial x+nuleft(fracpartial^2 upartial x^2+fracpartial^2 upartial y^2right) tag2","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"fracpartial vpartial t+u fracpartial vpartial x+v fracpartial vpartial y=-frac1rho fracpartial ppartial y+nuleft(fracpartial^2 vpartial x^2+fracpartial^2 vpartial y^2right) tag3","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"where (1) is the continuity equation and (2)-(3) are the momentum equations.","category":"page"},{"location":"NavierStokes2/#The-implicit-scheme","page":"Navier-Stokes equations","title":"The implicit scheme","text":"","category":"section"},{"location":"NavierStokes2/#Step-1:","page":"Navier-Stokes equations","title":"Step 1:","text":"","category":"section"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"The first step is to solve a nonlinear equation","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"fracpartial (u+Delta u) partial t+(u+Delta u) fracpartial (u+Delta u)partial x+(v+Delta v) fracpartial (u+Delta u)partial y=-frac1rho fracpartial ppartial x+nuleft(fracpartial^2 (u+Delta u)partial x^2+fracpartial^2 (u+Delta u)partial y^2right) tag4","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"fracpartial (v+Delta v)partial t+(u+Delta u) fracpartial (v+Delta v)partial x+(v+Delta v) fracpartial (v+Delta v)partial y=-frac1rho fracpartial ppartial y+nuleft(fracpartial^2 (v+Delta v)partial x^2+fracpartial^2 (v+Delta v)partial y^2right) tag5","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"Here the inputs u v are defined in the finite element space, and p in defined in the finite volume space. We solve for Delta u Delta v using the finite element method by linearizing (4)-(5). ","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"Let delta u denote the finite element basis for u, and delta v denote the finite element basis for v. To derive the weak form of (4)-(5), we multiply both sides of (4)-(5) by delta u and delta v, respectively.","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"int_Omega left( fracpartial (u+Delta u) partial t+(u+Delta u) fracpartial (u+Delta u)partial x+(v+Delta v) fracpartial (u+Delta u)partial y  delta uright) dOmega=int_Omega left( -frac1rho fracpartial ppartial x+nuleft(fracpartial^2 (u+Delta u)partial x^2+fracpartial^2 (u+Delta u)partial y^2right) delta uright) dOmega\nint_Omega left( fracpartial (v+Delta v)partial t+(u+Delta u) fracpartial (v+Delta v)partial x+(v+Delta v) fracpartial (v+Delta v)partial y delta vright) dOmega=int_Omega left( -frac1rho fracpartial ppartial y+nuleft(fracpartial^2 (v+Delta v)partial x^2+fracpartial^2 (v+Delta v)partial y^2right) delta vright) dOmega","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"We use a backward Euler's method to discretize the equation in time, i.e., ","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"fracpartial (u + Delta u)partial t approx fracDelta uDelta t","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"Then we have the following formula ","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"int_Omega left( frac Delta u Delta t+(u+Delta u) fracpartial (u+Delta u)partial x+(v+Delta v) fracpartial (u+Delta u)partial y  delta uright)dOmega =int_Omega left( -frac1rho fracpartial ppartial x+nuleft(fracpartial^2 (u+Delta u)partial x^2+fracpartial^2 (u+Delta u)partial y^2right) delta uright) dOmega \nint_Omega left( fracDelta vDelta t+(u+Delta u) fracpartial (v+Delta v)partial x+(v+Delta v) fracpartial (v+Delta v)partial y delta vright) dOmega=int_Omega left( -frac1rho fracpartial ppartial y+nuleft(fracpartial^2 (v+Delta v)partial x^2+fracpartial^2 (v+Delta v)partial y^2right) delta vright)dOmega","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"By ignoring the nonlinear term in the weak form, we finally have the following bilinear and linear forms in the weak formulation ","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"beginbmatrixA_11  A_12  A_21  A_22endbmatrix qquad beginbmatrixF_1 F_2endbmatrix","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"Here","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"A_11 = frac1Delta tleft( Delta u delta u right) + left(  fracpartial upartial xDelta u delta u right) + left( u fracpartial Delta upartial x delta u right) + left( v fracpartial Delta upartial y delta u right) + nu left( nabla (Delta u) nabla (delta u) right)","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"A_12 = left(fracpartial upartial y Delta v delta u right)","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"A_21 = left(fracpartial vpartial x Delta u delta v right)","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"A_22 = frac1Delta tleft( Delta v delta v right) + left(  fracpartial vpartial yDelta v delta v right) + left(  vfracpartial Delta vpartial y delta v right) + left( u fracpartial Delta vpartial x delta v right) + nu left( nabla (Delta v) nabla (delta v) right)","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"F_1 = frac1rho left( p fracpartial delta upartial xright) - nu (nabla u nabla delta u) - left( ufracpartial upartial x delta u right) -  left( vfracpartial upartial y delta u right)","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"F_2 = frac1rho  left( p fracpartial delta vpartial yright)- nu (nabla v nabla delta v) - left( vfracpartial vpartial y delta v right) -  left( ufracpartial vpartial x delta v right)","category":"page"},{"location":"NavierStokes2/#Step-2:","page":"Navier-Stokes equations","title":"Step 2:","text":"","category":"section"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"We solve the following Poisson equation for the pressure correction term Delta p:","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"fracDelta trho left( fracpartial^2 Delta ppartial x^2  +  fracpartial^2 Delta ppartial y^2  right) =fracpartial u^*partial x + fracpartial u^*partial y","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"where the input is obtained by u^* = u + Delta u v^* = v + Delta v and defined in the finite element method, and we solve for Delta p defined in the finite volume method.","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"Then, we can compute the pressure at the next discrete time point","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"p_new = p+ Delta p","category":"page"},{"location":"NavierStokes2/#Step-3:","page":"Navier-Stokes equations","title":"Step 3:","text":"","category":"section"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"Finally, we obtain the velocity field at the next discrete time point by solving the following equation using the finite element method:","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"u_new = u^* - fracDelta trho fracpartial Delta p partial x","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"v_new = v^* - fracDelta trho  fracpartial Delta  ppartial y","category":"page"},{"location":"NavierStokes2/#Example","page":"Navier-Stokes equations","title":"Example","text":"","category":"section"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"We consider the (scaled) Taylor–Green vortex as an example to solve the system of equations (1)-(3).","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"u(xyt)=cos(2pi x)sin(2pi y)exp(-8pi^2 nu t)","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"v(xyt)=-sin(2pi x)cos(2pi y)exp(-8pi^2 nu t)","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"p(xyt)=-fracrho4left( cos(4pi x) + cos(4pi y) right)exp(-16pi^2 nu t)","category":"page"},{"location":"NavierStokes2/","page":"Navier-Stokes equations","title":"Navier-Stokes equations","text":"using ADCME\nusing PoreFlow\nusing PyPlot\nusing SparseArrays\n\n# grid setup\nm = 30\nn = 30\nh = 1/n\nbc = bcedge(\"all\", m, n, h)\nbd = bcnode(\"all\", m, n, h)\nbd_2d = [bd; (m+1)*(n+1) .+ bd]\n\n# time step setup\nt = 0;\nt_final = 0.01;\nNT = 20;\ndt = t_final/NT;\n\n# physical constants\nρ = 1\nμ = 1\nν = μ / ρ\n\n# pre-compute constant matrices\nmass_mat = constant(compute_fem_mass_matrix1(m, n, h))\nmass_mat_2d = constant(compute_fem_mass_matrix(m, n, h))\nmass_mat_2d_bdry, _ = fem_impose_Dirichlet_boundary_condition(mass_mat_2d, bd, m, n, h) # 2D boundary condition\nlaplace_mat = constant(compute_fem_laplace_matrix1(m, n, h))\nlaplace_mat_2d = constant(compute_fem_laplace_matrix(m, n, h))\ninteract_mat = constant(compute_interaction_matrix(m, n, h))\ntpfa_mat_bdry, _ = compute_fvm_tpfa_matrix(ones(m*n), bc, zeros(size(bc,1)), m, n, h)\ntpfa_mat_bdry = constant(tpfa_mat_bdry)\n\n# exact solutions\nfunction u_exact(x,y,t)\n    cos(2*pi*x) * sin(2*pi*y) * exp(-8*pi*pi*ν*t)\nend\n\nfunction v_exact(x1,x2,t)\n    -sin(2*pi*x) * cos(2*pi*y) * exp(-8*pi*pi*ν*t)\nend\n\nfunction p_exact(x, y, t, ρ)\n    -ρ/4 * (cos(4*pi*x) + cos(4*pi*y)) * exp(-16*pi*pi*ν*t)\nend\n\nfunction step1(U, p0, Source = missing)\n    Source = coalesce(Source, zeros(2*(m+1)*(n+1)))\n    u0 = U[1:(m+1)*(n+1)]\n    v0 = U[(m+1)*(n+1)+1:end]\n    u0_gauss = fem_to_gauss_points(u0, m, n, h)\n    v0_gauss = fem_to_gauss_points(v0, m, n, h)\n\n    gradu = eval_grad_on_gauss_pts1(u0, m, n, h) # du/dx = gradu[:,1], du/dy = gradu[:,2]\n    gradv = eval_grad_on_gauss_pts1(v0, m, n, h) # dv/dx = gradv[:,1], dv/dy = gradv[:,2]\n\n    M1 = mass_mat\n    M2 = compute_fem_mass_matrix1(gradu[:,1], m, n, h)\n    M3 = compute_fem_advection_matrix1(u0_gauss, v0_gauss, m, n, h)\n    M4 = laplace_mat\n    A11 = 1/dt * M1 + M2 + M3 + ν * M4\n\n    A12 = compute_fem_mass_matrix1(gradu[:,2], m, n, h)\n\n    A21 = compute_fem_mass_matrix1(gradv[:,1], m, n, h)\n\n    M2 = compute_fem_mass_matrix1(gradv[:,2], m, n, h) \n    A22 = 1/dt * M1 + M2 + M3 + ν * M4    # M1, M3, M4 are same as A11\n\n    A = [A11 A12\n        A21 A22]\n\n    grad_p = compute_interaction_term(p0, m, n, h) # weak form of [dp/dx; dp/dy] on fem points\n\n    s1 = u0_gauss .* gradu[:,1] + v0_gauss .* gradu[:,2]\n    s2 = u0_gauss .* gradv[:,1] + v0_gauss .* gradv[:,2]\n    b3 = compute_fem_source_term(s1, s2, m, n, h)\n\n    F = Source + 1/ρ * grad_p - ν * laplace_mat_2d * [u0;v0] - b3\n\n    A, _ = fem_impose_Dirichlet_boundary_condition(A, bd, m, n, h)\n    F = scatter_update(F, bd_2d, zeros(length(bd_2d)))\n\n    sol = A \\ F\n    return sol\nend\n\nfunction step2(U_int)\n    rhs = ρ / dt * interact_mat * U_int\n    sol = tpfa_mat_bdry \\ rhs\n    return sol\nend\n\nfunction step3(U_int, dp)\n    grad_dp = - compute_interaction_term(dp, m, n, h)\n    rhs = mass_mat_2d * U_int - dt/ρ * grad_dp\n    rhs = scatter_update(rhs, bd_2d, zeros(length(bd_2d)))\n    sol = mass_mat_2d_bdry \\ rhs\n    return sol\nend\n\n# input: U length 2(m+1)(n+1)\n# input: p length mn\nfunction solve_ns_one_step(U, p)\n    dU = step1(U, p)\n    U_int = U + dU\n    dp = step2(U_int)\n    p_new = p + dp\n    U_new = step3(U_int, dp)\n    return U_new, p_new\nend\n\nfunction condition(i, velo_arr, p_arr)\n    i <= NT + 1\nend\n\nfunction body(i, velo_arr, p_arr)\n    velo = read(velo_arr, i-1)\n    pres = read(p_arr, i-1)\n    op = tf.print(\"i=\",i)\n    i = bind(i, op)\n    velo_new, pres_new = solve_ns_one_step(velo, pres)\n    velo_arr = write(velo_arr, i, velo_new)\n    p_arr = write(p_arr, i, pres_new)\n    return i+1, velo_arr, p_arr\nend\n\n# fem nodes\nxy = fem_nodes(m, n, h)\nx, y = xy[:,1], xy[:,2]\nu0 = @.  u_exact(x, y, 0.0)\nv0 = @.  v_exact(x, y, 0.0)\nvelo_arr = TensorArray(NT+1)\nvelo_arr = write(velo_arr, 1, [u0; v0])\n\n# fvm nodes\nxy = fvm_nodes(m, n, h)\nx, y = xy[:,1], xy[:,2]\np0 = @.  p_exact(x, y, 0.0, ρ)\np_arr = TensorArray(NT+1)\np_arr = write(p_arr, 1, p0)\n\ni = constant(2, dtype=Int32)\n\n_, velo, p = while_loop(condition, body, [i, velo_arr, p_arr])\nvelo = set_shape(stack(velo), (NT+1, 2*(m+1)*(n+1)))\np = set_shape(stack(p), (NT+1, m*n))\n\nsess = Session(); init(sess)\noutput = run(sess, [velo, p])\nout_v = output[1]\nout_p = output[2]\n\n\nfigure(figsize=(18,12))\nsubplot(231)\nvisualize_scalar_on_fem_points(out_v[1, 1:(1+m)*(1+n)], m, n, h)\ntitle(\"initial velocity in x direction\")\nsubplot(232)\nvisualize_scalar_on_fem_points(out_v[1, (1+m)*(1+n)+1:end], m, n, h)\ntitle(\"initial velocity in y direction\")\nsubplot(233)\nvisualize_scalar_on_fvm_points(out_p[1, :], m, n, h)\ntitle(\"initial pressure\")\nsubplot(234) \nvisualize_scalar_on_fem_points(out_v[NT+1, 1:(1+m)*(1+n)], m, n, h)\ntitle(\"final velocity in x direction\")\nsubplot(235) \nvisualize_scalar_on_fem_points(out_v[NT+1, (1+m)*(1+n)+1:end], m, n, h)\ntitle(\"final velocity in y direction\")\nsubplot(236)\nvisualize_scalar_on_fvm_points(out_p[NT+1, :], m, n, h)\ntitle(\"final pressure\")\n","category":"page"},{"location":"fwd_mixed_poisson/#Mixed-Finite-Element-Methods-for-Poisson's-Equation","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"","category":"section"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"In this section, we consider solving the Poisson's equation using mixed finite element methods","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"-nabla cdot (nabla u(x)) = f text in  Omegatag1","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"with boundary conditions","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"u = g_D text on  partial Omega","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"We reformulate the Eq. 1 as ","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"beginalignedsigma + nabla u = 0  nabla cdot sigma  = f endaligned","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"The mixed variational formulation is to find (sigma u)in H(textdiv Omega) times L^2(Omega), such that ","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"beginaligned(sigma tau) - (nabla cdot tau u) = -(taucdot mathbfn g_D)_partial Omega (nabla cdot sigma v) = (f v)endaligned","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"We use the following stable pair of elements: BDM_1-P_0, where the stress space is approximated using a BDM element while the displacement space is approximated using a piecewise constant element. ","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"The code is as follows:","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"# Solves the Poisson equation using the Mixed finite element method \nusing Revise\nusing PoreFlow\nusing DelimitedFiles\nusing SparseArrays\nusing PyPlot\n\n\nn = 50\nmmesh = Mesh(n, n, 1/n, degree = BDM1)\n\ntestCase = [\n    ((x, y)->begin\n        x * (1-x) * y * (1-y)\n    end, \n    (x, y)->begin\n        -2x*(1-x) -2y*(1-y)\n    end),  # test case 1\n    ((x, y)->begin\n        x^2 * (1-x) * y * (1-y)^2\n    end, \n    (x, y)->begin\n        2*x^2*y*(1 - x) + 2*x^2*(1 - x)*(2*y - 2) - 4*x*y*(1 - y)^2 + 2*y*(1 - x)*(1 - y)^2\n    end) ,# test case 2\n    (\n        (x, y)->x*y, \n        (x, y)->0.0\n    ), # test case 3\n    (\n        (x, y)->x^2 * y^2 + 1/(1+x^2), \n        (x, y)->2*x^2 + 8*x^2/(x^2 + 1)^3 + 2*y^2 - 2/(x^2 + 1)^2\n    ), # test case 4\n]\n\nfor k = 1:4\n    @info \"TestCase $k...\"\n    ufunc, ffunc = testCase[k]\n\n    A = compute_fem_bdm_mass_matrix1(mmesh)\n    B = compute_fem_bdm_div_matrix1(mmesh)\n    C = [A -B'\n        -B spzeros(mmesh.nelem, mmesh.nelem)]\n\n    gD = bcedge(mmesh)\n    t1 = eval_f_on_boundary_edge(ufunc, gD, mmesh)\n    g = compute_fem_traction_term1(t1, gD, mmesh) \n    t2 = eval_f_on_gauss_pts(ffunc, mmesh)\n    f = compute_fvm_source_term(t2, mmesh)\n    rhs = [-g; f]\n\n    sol = C\\rhs\n    u = sol[mmesh.ndof+1:end]\n    close(\"all\")\n    figure(figsize=(15, 5))\n    subplot(131)\n    title(\"Reference\")\n    xy = fvm_nodes(mmesh)\n    x, y = xy[:,1], xy[:,2]\n    uf = ufunc.(x, y)\n    visualize_scalar_on_fvm_points(uf, mmesh)\n    subplot(132)\n    title(\"Numerical\")\n    visualize_scalar_on_fvm_points(u, mmesh)\n    subplot(133)\n    title(\"Absolute Error\")\n    visualize_scalar_on_fvm_points( abs.(u - uf) , mmesh)\n    savefig(\"bdm$k.png\")\nend","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"Here we have 4 test cases, and we show the results for each test case:","category":"page"},{"location":"fwd_mixed_poisson/#Test-Case-1","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Test Case 1","text":"","category":"section"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"Analytical solution:","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"u(x y) = x(1-x)y(1-y)","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"(Image: )","category":"page"},{"location":"fwd_mixed_poisson/#Test-Case-2","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Test Case 2","text":"","category":"section"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"Analytical solution:","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"u(x y) = x^2  (1-x)  y  (1-y)^2","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"(Image: )","category":"page"},{"location":"fwd_mixed_poisson/#Test-Case-3","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Test Case 3","text":"","category":"section"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"Analytical solution:","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"u(x y) = xy","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"(Image: )","category":"page"},{"location":"fwd_mixed_poisson/#Test-Case-4","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Test Case 4","text":"","category":"section"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"u(xy) = x^2  y^2 + frac11+x^2","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"(Image: )","category":"page"},{"location":"fwd_mixed_poisson/#Traction-Boundary-Condition","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Traction Boundary Condition","text":"","category":"section"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"We consider the case where the boundary conditions are given by ","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"sigma cdot mathbfn = g_N xin Gamma_N quad u = g_D xin Gamma_D","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"The weak form is ","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"beginaligned(sigma tau) - (nabla cdot tau u) = -(taucdot mathbfn g_D)_Gamma_D (nabla cdot sigma v) = (f v)endaligned","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"In this case, the traction boundary condition does not appear in the weak form, but determines the coefficients for the representation of sigma for the DOFs on the boundary Gamma_N. Consider an edge E_l = e_s e_t st, then we have","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"sigma = aphi_l1 + b phi_l 2","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"which leads to ","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"E_lg_N = a lambda_s + b lambda_t","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"To calculate a b, we solve the following linear system ","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"beginbmatrix(lambda_s lambda_s)  (lambda_s lambda_t)  (lambda_s lambda_t)  (lambda_t lambda_t)endbmatrixbeginbmatrixabendbmatrix = E_lbeginbmatrix(g_N lambda_s) (g_N lambda_t)endbmatrix","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"The boundary condition can be computed using impose_bdm_traction_boundary_condition1. ","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"# Solves the Poisson equation using the Mixed finite element method \nusing Revise\nusing PoreFlow\nusing DelimitedFiles\nusing SparseArrays\nusing PyPlot\n\n\nn = 50\nmmesh = Mesh(n, n, 1/n, degree = BDM1)\n\nfunction ufunc(x, y)\n    x * (1-x) * y * (1-y)\nend\n\nfunction ffunc(x, y)\n    -2x*(1-x) -2y*(1-y)\nend\n\nfunction gfunc(x, y)\n    (1-2x)*y*(1-y)\nend\n\nA = compute_fem_bdm_mass_matrix1(mmesh)\nB = compute_fem_bdm_div_matrix1(mmesh)\nC = [A -B'\n    -B spzeros(mmesh.nelem, mmesh.nelem)]\n\ngD = (x1, y1, x2, y2)->!( (x1<1e-3 && y1>1e-3 && y1<1-1e-3) ||  (x2<1e-3 && y2>1e-3 && y2<1-1e-3))\ngN = (x1, y1, x2, y2)->x1<1e-5 && x2<1e-5\n\nD_bdedge = bcedge(gD, mmesh)\nN_bdedge = bcedge(gN, mmesh)\n\nt1 = eval_f_on_boundary_edge(ufunc, D_bdedge, mmesh)\ng = compute_fem_traction_term1(t1, D_bdedge, mmesh) \nt2 = eval_f_on_gauss_pts(ffunc, mmesh)\nf = compute_fvm_source_term(t2, mmesh)\n\ngN = eval_f_on_boundary_edge(gfunc, N_bdedge, mmesh)\ndof, val = impose_bdm_traction_boundary_condition1(gN, N_bdedge, mmesh)\nrhs = [-g; f]\nC, rhs = impose_Dirichlet_boundary_conditions(C, rhs, dof, val)\n\nsol = C\\rhs\nu = sol[mmesh.ndof+1:end]\nclose(\"all\")\nfigure(figsize=(15, 5))\nsubplot(131)\ntitle(\"Reference\")\nxy = fvm_nodes(mmesh)\nx, y = xy[:,1], xy[:,2]\nuf = ufunc.(x, y)\nvisualize_scalar_on_fvm_points(uf, mmesh)\nsubplot(132)\ntitle(\"Numerical\")\nvisualize_scalar_on_fvm_points(u, mmesh)\nsubplot(133)\ntitle(\"Absolute Error\")\nvisualize_scalar_on_fvm_points( abs.(u - uf) , mmesh)\nsavefig(\"mixed_poisson_neumann.png\")","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"The result is shown below","category":"page"},{"location":"fwd_mixed_poisson/","page":"Mixed Finite Element Methods for Poisson's Equation","title":"Mixed Finite Element Methods for Poisson's Equation","text":"(Image: ) ","category":"page"},{"location":"fwd_linear_elasticity/#Mixed-Finite-Element-Methods-for-Linear-Elasticity","page":"Mixed Finite Element Methods for Linear Elasticity","title":"Mixed Finite Element Methods for Linear Elasticity","text":"","category":"section"},{"location":"fwd_linear_elasticity/","page":"Mixed Finite Element Methods for Linear Elasticity","title":"Mixed Finite Element Methods for Linear Elasticity","text":"The equations of linear elasticity can be written as a system of equations of the form ","category":"page"},{"location":"fwd_linear_elasticity/","page":"Mixed Finite Element Methods for Linear Elasticity","title":"Mixed Finite Element Methods for Linear Elasticity","text":"Asigma = varepsilon(u) quad textdiv sigma = f text in  Omegatag1","category":"page"},{"location":"fwd_linear_elasticity/","page":"Mixed Finite Element Methods for Linear Elasticity","title":"Mixed Finite Element Methods for Linear Elasticity","text":"Here the unknowns sigma and u denote the stress and displacement fields, and f is the body force. The stress takes values in the space mathbbSin mathbbR^2times 2_textsym of symmetric matrices. The compliance tensor A mathbbSrightarrow mathbbS is a bounded and symmetric, uniformly positive definite operator reflecting the properties of the body. ","category":"page"},{"location":"fwd_linear_elasticity/","page":"Mixed Finite Element Methods for Linear Elasticity","title":"Mixed Finite Element Methods for Linear Elasticity","text":"This section considers a very simple isotropic case where ","category":"page"},{"location":"fwd_linear_elasticity/","page":"Mixed Finite Element Methods for Linear Elasticity","title":"Mixed Finite Element Methods for Linear Elasticity","text":"Asigma = frac12muleft(sigma - fraclambda2mu + 3lambdatexttrsigma Iright)","category":"page"},{"location":"fwd_linear_elasticity/","page":"Mixed Finite Element Methods for Linear Elasticity","title":"Mixed Finite Element Methods for Linear Elasticity","text":"and we use the weak formulation of Eq. 1","category":"page"},{"location":"fwd_linear_elasticity/","page":"Mixed Finite Element Methods for Linear Elasticity","title":"Mixed Finite Element Methods for Linear Elasticity","text":"Find (sigma v rho)in H(textdiv Omega M) times L^2(Omega V) times L^2(Omega K), such that for all (tau w eta)in H(textdiv Omega M) times L^2(Omega V) times L^2(Omega K)","category":"page"},{"location":"fwd_linear_elasticity/","page":"Mixed Finite Element Methods for Linear Elasticity","title":"Mixed Finite Element Methods for Linear Elasticity","text":"beginaligned(Asigma tau) + (textdivtau u) + (tau rho) = (taumathbfn u)_partial Omega  (textdivsigma w) =(f w) (sigma eta)  = 0endaligned","category":"page"},{"location":"fwd_linear_elasticity/","page":"Mixed Finite Element Methods for Linear Elasticity","title":"Mixed Finite Element Methods for Linear Elasticity","text":"Here we have used a skew symmetric trial function rho and test function eta as a Lagrange multiplier to relax the symmetry condition on sigma.","category":"page"},{"location":"fwd_linear_elasticity/","page":"Mixed Finite Element Methods for Linear Elasticity","title":"Mixed Finite Element Methods for Linear Elasticity","text":"The code is as follows:","category":"page"},{"location":"fwd_linear_elasticity/","page":"Mixed Finite Element Methods for Linear Elasticity","title":"Mixed Finite Element Methods for Linear Elasticity","text":"# Solves the Poisson equation using the Mixed finite element method \nusing Revise\nusing PoreFlow\nusing DelimitedFiles\nusing SparseArrays\nusing PyPlot\n\n\nλ = 1.0\nμ = 1.0\nn = 50\nmmesh = Mesh(n, n, 1/n, degree = BDM1)\na = 1/2μ\nb = -λ/(2μ*(2μ+2λ))\n\nTestCase = [\n    (\n        (x,y)->begin;x*y*(x - 1)*(y - 1);end,\n        (x,y)->begin;x*y*(x - 1)*(y - 1);end,\n        (x,y)->begin;2.0*x^2 + 8.0*x*y - 6.0*x + 6.0*y^2 - 10.0*y + 2.0;end,\n        (x,y)->begin;6.0*x^2 + 8.0*x*y - 10.0*x + 2.0*y^2 - 6.0*y + 2.0;end,\n    ),\n    (\n        (x,y)->begin;x^2*y^2*(x - 1)*(y^2 - 1);end,\n        (x,y)->begin;x^2*y^2*(x - 1)*(y^2 - 1);end,\n        (x,y)->begin;12.0*x^3*y^2 - 2.0*x^3 + 24.0*x^2*y^3 - 12.0*x^2*y^2 - 12.0*x^2*y + 2.0*x^2 + 18.0*x*y^4 - 16.0*x*y^3 - 18.0*x*y^2 + 8.0*x*y - 6.0*y^4 + 6.0*y^2;end,\n        (x,y)->begin;36.0*x^3*y^2 - 6.0*x^3 + 24.0*x^2*y^3 - 36.0*x^2*y^2 - 12.0*x^2*y + 6.0*x^2 + 6.0*x*y^4 - 16.0*x*y^3 - 6.0*x*y^2 + 8.0*x*y - 2.0*y^4 + 2.0*y^2;end,\n    ),\n    (\n        (x,y)->begin;x^2*y^2*(x - 1)*(y^2 - 1);end,\n        (x,y)->begin;x*y*(x - 1)*(y - 1);end,\n        (x,y)->begin;12.0*x^3*y^2 - 2.0*x^3 - 12.0*x^2*y^2 + 2.0*x^2 + 18.0*x*y^4 - 18.0*x*y^2 + 8.0*x*y - 4.0*x - 6.0*y^4 + 6.0*y^2 - 4.0*y + 2.0;end,\n        (x,y)->begin;24.0*x^2*y^3 - 12.0*x^2*y + 6.0*x^2 - 16.0*x*y^3 + 8.0*x*y - 6.0*x + 2.0*y^2 - 2.0*y;end,\n    )\n\n]\n\nfor k = 1:length(TestCase)\n    @info \"Running TestCase $k...\"\n    ufunc, vfunc, gfunc, hfunc = TestCase[k]\n\n    A = compute_fem_bdm_mass_matrix(a*ones(get_ngauss(mmesh)), b*ones(get_ngauss(mmesh)), mmesh)\n    B = compute_fem_bdm_div_matrix(mmesh)\n    C = compute_fem_bdm_skew_matrix(mmesh)\n\n    D = [A B' C'\n        B spzeros(2mmesh.nelem, 3mmesh.nelem)\n        C spzeros(mmesh.nelem, 3mmesh.nelem)]\n\n    gD = bcedge(mmesh) \n    t1 = eval_f_on_gauss_pts(gfunc, mmesh)\n    t2 = eval_f_on_gauss_pts(hfunc, mmesh)\n    f1 = compute_fvm_source_term(t1, mmesh)\n    f2 = compute_fvm_source_term(t2, mmesh)\n\n    rhs = [zeros(2mmesh.ndof); f1; f2; zeros(mmesh.nelem)]\n\n    sol = D\\rhs\n    u = sol[2mmesh.ndof+1:2mmesh.ndof+2mmesh.nelem]\n    close(\"all\")\n    figure(figsize=(15, 10))\n    subplot(231)\n    title(\"Reference\")\n    xy = fvm_nodes(mmesh)\n    x, y = xy[:,1], xy[:,2]\n    uf = ufunc.(x, y)\n    visualize_scalar_on_fvm_points(uf, mmesh)\n    subplot(232)\n    title(\"Numerical\")\n    visualize_scalar_on_fvm_points(u[1:mmesh.nelem], mmesh)\n    subplot(233)\n    title(\"Absolute Error\")\n    visualize_scalar_on_fvm_points( abs.(u[1:mmesh.nelem] - uf) , mmesh)\n\n    subplot(234)\n    xy = fvm_nodes(mmesh)\n    x, y = xy[:,1], xy[:,2]\n    uf = vfunc.(x, y)\n    visualize_scalar_on_fvm_points(uf, mmesh)\n    subplot(235)\n    visualize_scalar_on_fvm_points(u[mmesh.nelem+1:end], mmesh)\n    subplot(236)\n    visualize_scalar_on_fvm_points( abs.(u[mmesh.nelem+1:end] - uf) , mmesh)\n    savefig(\"varying_elasticity$k.png\")\nend","category":"page"},{"location":"fwd_linear_elasticity/","page":"Mixed Finite Element Methods for Linear Elasticity","title":"Mixed Finite Element Methods for Linear Elasticity","text":"We have 3 test cases and the results are shown below:","category":"page"},{"location":"fwd_linear_elasticity/#Test-Case-1","page":"Mixed Finite Element Methods for Linear Elasticity","title":"Test Case 1","text":"","category":"section"},{"location":"fwd_linear_elasticity/","page":"Mixed Finite Element Methods for Linear Elasticity","title":"Mixed Finite Element Methods for Linear Elasticity","text":"Analytical Solution:","category":"page"},{"location":"fwd_linear_elasticity/","page":"Mixed Finite Element Methods for Linear Elasticity","title":"Mixed Finite Element Methods for Linear Elasticity","text":"u(xy) = xy(x-1)(y-1) quad v(xy) = xy(x-1)(y-1)","category":"page"},{"location":"fwd_linear_elasticity/","page":"Mixed Finite Element Methods for Linear Elasticity","title":"Mixed Finite Element Methods for Linear Elasticity","text":"(Image: )","category":"page"},{"location":"fwd_linear_elasticity/#Test-Case-2","page":"Mixed Finite Element Methods for Linear Elasticity","title":"Test Case 2","text":"","category":"section"},{"location":"fwd_linear_elasticity/","page":"Mixed Finite Element Methods for Linear Elasticity","title":"Mixed Finite Element Methods for Linear Elasticity","text":"Analytical Solution:","category":"page"},{"location":"fwd_linear_elasticity/","page":"Mixed Finite Element Methods for Linear Elasticity","title":"Mixed Finite Element Methods for Linear Elasticity","text":"u(xy) = x^2y^2(x-1)(y^2-1) quad v(xy) = x^2y^2(x-1)(y^2-1)","category":"page"},{"location":"fwd_linear_elasticity/","page":"Mixed Finite Element Methods for Linear Elasticity","title":"Mixed Finite Element Methods for Linear Elasticity","text":"(Image: )","category":"page"},{"location":"fwd_linear_elasticity/#Test-Case-3","page":"Mixed Finite Element Methods for Linear Elasticity","title":"Test Case 3","text":"","category":"section"},{"location":"fwd_linear_elasticity/","page":"Mixed Finite Element Methods for Linear Elasticity","title":"Mixed Finite Element Methods for Linear Elasticity","text":"Analytical Solution:","category":"page"},{"location":"fwd_linear_elasticity/","page":"Mixed Finite Element Methods for Linear Elasticity","title":"Mixed Finite Element Methods for Linear Elasticity","text":"u(xy) = x^2y^2(x-1)(y^2-1) quad v(xy) = xy(x-1)(y-1)","category":"page"},{"location":"fwd_linear_elasticity/","page":"Mixed Finite Element Methods for Linear Elasticity","title":"Mixed Finite Element Methods for Linear Elasticity","text":"(Image: )","category":"page"},{"location":"CHTEnergy/#Conjugate-heat-transfer-energy-equation","page":"Conjugate heat transfer energy equation","title":"Conjugate heat transfer energy equation","text":"","category":"section"},{"location":"CHTEnergy/","page":"Conjugate heat transfer energy equation","title":"Conjugate heat transfer energy equation","text":"The steady-state energy equation for the conjugate heat transfer problem in two spatial dimensions is given by","category":"page"},{"location":"CHTEnergy/","page":"Conjugate heat transfer energy equation","title":"Conjugate heat transfer energy equation","text":"rho  C_p  bf ucdot nabla T  = nabla cdot (k nabla T) + Q","category":"page"},{"location":"CHTEnergy/","page":"Conjugate heat transfer energy equation","title":"Conjugate heat transfer energy equation","text":"where c is the specific heat capacity, rho is the density, bf u = u  v is the steady-state velocity field, T is the steady-state tempearture, k is the conductivity, and Q is the heat source.","category":"page"},{"location":"CHTEnergy/","page":"Conjugate heat transfer energy equation","title":"Conjugate heat transfer energy equation","text":"The transient energy equation for the conjugate heat transfer problem in two spatial dimensions is given by","category":"page"},{"location":"CHTEnergy/","page":"Conjugate heat transfer energy equation","title":"Conjugate heat transfer energy equation","text":"rho  C_p  fracpartial Tpartial t  + rho  C_p  bf ucdot nabla T  = nabla cdot (k nabla T) + Q","category":"page"},{"location":"CHTEnergy/#Steady-state-energy-equation","page":"Conjugate heat transfer energy equation","title":"Steady-state energy equation","text":"","category":"section"},{"location":"CHTEnergy/","page":"Conjugate heat transfer energy equation","title":"Conjugate heat transfer energy equation","text":"rho  C_p left(u fracpartial Tpartial x+v fracpartial Tpartial yright)=kleft(fracpartial^2 Tpartial x^2+fracpartial^2 Tpartial y^2right)+Q","category":"page"},{"location":"CHTEnergy/#Transient-energy-equation","page":"Conjugate heat transfer energy equation","title":"Transient energy equation","text":"","category":"section"},{"location":"plasticity/#Plasticity","page":"Plasticity","title":"Plasticity","text":"","category":"section"},{"location":"plasticity/#Plasticity-Theory","page":"Plasticity","title":"Plasticity Theory","text":"","category":"section"},{"location":"plasticity/","page":"Plasticity","title":"Plasticity","text":"The constitutive theory is about relating stress sigma and strain varepsilon. ","category":"page"},{"location":"plasticity/","page":"Plasticity","title":"Plasticity","text":"The total strain varepsilon can be decomposed into ","category":"page"},{"location":"plasticity/","page":"Plasticity","title":"Plasticity","text":"varepsilon = varepsilon^p + varepsilon^e","category":"page"},{"location":"plasticity/","page":"Plasticity","title":"Plasticity","text":"The constitutive relation must characterize the relation between the stress varepsilon for both varepsilon^p and varepsilon^e . The constitutive law for varepsilon^e is linear, i.e., ","category":"page"},{"location":"plasticity/","page":"Plasticity","title":"Plasticity","text":"sigma = Cvarepsilon^eLeftrightarrowvarepsilon^e = C^-1sigma","category":"page"},{"location":"plasticity/","page":"Plasticity","title":"Plasticity","text":"The constitutive law for varepsilon^p is described by an ordinary differential equation ","category":"page"},{"location":"plasticity/","page":"Plasticity","title":"Plasticity","text":"boxeddotvarepsilon^p_ij = phi h_ijtag1","category":"page"},{"location":"plasticity/","page":"Plasticity","title":"Plasticity","text":"Here h_ij may arise from a potential function g(sigma xi), where xi is called internal variables","category":"page"},{"location":"plasticity/","page":"Plasticity","title":"Plasticity","text":"h_ij = fracpartial gpartial sigma_ij","category":"page"},{"location":"plasticity/","page":"Plasticity","title":"Plasticity","text":"and phi is a scalar function of the form ","category":"page"},{"location":"plasticity/","page":"Plasticity","title":"Plasticity","text":"phi = eta(sigmaxi) f(sigma xi)_+ = eta(sigmaxi)max(0 f(sigma xi))","category":"page"},{"location":"plasticity/","page":"Plasticity","title":"Plasticity","text":"where f is the yield surface. ","category":"page"},{"location":"plasticity/","page":"Plasticity","title":"Plasticity","text":"example: Example\nThe Tresca yield surface is given by f(sigma xi) = frac14(sigma_1-sigma_2+sigma_2-sigma_3+sigma_3-sigma_1)-k(xi)","category":"page"},{"location":"plasticity/","page":"Plasticity","title":"Plasticity","text":"example: Example\n​In J_2 plasticity, we haveg(sigma xi) = J_2(sigma) - k(xi)^2​Thus we havedotvarepsilon^p_ij = mathrmconsttimesleft(1-frack(xi)J_2(sigma)right)_+ s_ij(Image: )","category":"page"},{"location":"plasticity/","page":"Plasticity","title":"Plasticity","text":"In the rate-indpendent plasticity, there exists lambda such that ","category":"page"},{"location":"plasticity/","page":"Plasticity","title":"Plasticity","text":"phi = dotlambda","category":"page"},{"location":"plasticity/","page":"Plasticity","title":"Plasticity","text":"Since both sides of (1) has derivatives with respect to time, it is time scale independent. That's why we call it rate-independent. Then the flow rule requires that ","category":"page"},{"location":"plasticity/","page":"Plasticity","title":"Plasticity","text":"boxeddot lambda f = 0quad lambdageq 0quad fleq 0tag2","category":"page"},{"location":"plasticity/","page":"Plasticity","title":"Plasticity","text":"If f0 (the yield surface is not hit), the inelasticity strain is not \"active\"; once f=0 is hit, the material reacts by increasing plasticity strain (since dot lambda can be nonzero). ","category":"page"},{"location":"plasticity/","page":"Plasticity","title":"Plasticity","text":"The deformation theory studies how g is related to sigma and xi. If h directs along the outward normal of the yield surface, we can the consequent g the normality rule.  For example, J_2 plasticity can be formulated is subjected to normality rule. A particular case where normality rule holds is g=f, in which case we call (1) the associated flow rule with the yield surface.","category":"page"},{"location":"plasticity/","page":"Plasticity","title":"Plasticity","text":"Finally, the dynamics of internal variable is given by ","category":"page"},{"location":"plasticity/","page":"Plasticity","title":"Plasticity","text":"boxeddotxi_alpha = tilde h_alpha(sigma xi)tag3","category":"page"},{"location":"plasticity/","page":"Plasticity","title":"Plasticity","text":"The three equations (1), (2) and (3) fully characterizes the constitutive relation of varepsilon^p.","category":"page"},{"location":"plasticity/#Numerical-Example","page":"Plasticity","title":"Numerical Example","text":"","category":"section"},{"location":"plasticity/","page":"Plasticity","title":"Plasticity","text":"Description Displacement Field Vertical Displacement\nPlasticity (Image: ) (Image: )\nElasticity (Image: ) (Image: )","category":"page"},{"location":"plasticity/","page":"Plasticity","title":"Plasticity","text":"using Revise\nusing PoreFlow\nusing SparseArrays\nusing LinearAlgebra\nusing PyPlot\nαm = 0.0\nαf = 0.0\nβ2 = 0.5*(1 - αm + αf)^2\nγ = 0.5 - αm + αf\n\nm = 40\nn = 20\nh = 0.01\nNT = 100\nΔt = 1/NT \nbdedge = []\nfor j = 1:n \n    push!(bdedge, [(j-1)*(m+1)+m+1 j*(m+1)+m+1])\nend\nbdedge = vcat(bdedge...)\n\nbdnode = Int64[]\nfor j = 1:n+1\n    push!(bdnode, (j-1)*(m+1)+1)\nend\n\nM = compute_fem_mass_matrix1(m, n, h)\nS = spzeros((m+1)*(n+1), (m+1)*(n+1))\nM = [M S;S M]\nH = diagm(0=>[1,1,0.5])\nK = 0.1\nσY = 0.03\n# σY = 1000.\n\n\nstate = zeros(2(m+1)*(n+1),NT+1)\nvelo = zeros(2(m+1)*(n+1),NT+1)\nacce = zeros(2(m+1)*(n+1),NT+1)\nstress = zeros(NT+1, 4*m*n, 3)\ninternal_variable = zeros(NT+1, 4*m*n)\n\nt = 0.0\nfor i = 1:NT \n    @info i \n        ##### STEP 1: Computes the external force ####\n\n    T = eval_f_on_boundary_edge((x,y)->0.02*sin(2π*i*Δt), bdedge, m, n, h)\n    # T = eval_f_on_boundary_edge((x,y)->0.0, bdedge, m, n, h)\n    T = [zeros(length(T)) -T]\n    T = compute_fem_traction_term(T, bdedge, m, n, h)\n    f1 = eval_f_on_gauss_pts((x,y)->0., m, n, h)\n    f2 = eval_f_on_gauss_pts((x,y)->0., m, n, h)\n    # f2 = eval_f_on_gauss_pts((x,y)->0.1, m, n, h)\n    F = compute_fem_source_term(f1, f2, m, n, h)\n    fext = F+T\n\n        ##### STEP 2: Extract Variables ####\n\n    u = state[:,i]\n    ∂∂u = acce[:,i]\n    ∂u = velo[:,i]\n\n    ε0 = eval_strain_on_gauss_pts(u, m, n, h)\n    σ0 = stress[i,:,:]\n    α0 = internal_variable[i,:]\n    \n        ##### STEP 3: Newton Iteration ####\n\n    global t += (1 - αf)*Δt\n    ∂∂up = ∂∂u[:]\n    iter = 0\n    while true\n        iter += 1\n        # @info iter\n        up = (1 - αf)*(u + Δt*∂u + 0.5 * Δt^2 * ((1 - β2)*∂∂u + β2*∂∂up)) + αf*u\n        global fint, stiff, α, σ = compute_planestressplasticity_stress_and_stiffness_matrix(\n            up, ε0, σ0, α0, K, σY, H, m, n, h\n        )\n        res = M * (∂∂up *(1 - αm) + αm*∂∂u)  + fint - fext\n        A = M*(1 - αm) + (1 - αf) * 0.5 * β2 * Δt^2 * stiff\n        A, _ = fem_impose_Dirichlet_boundary_condition(A, bdnode, m, n, h)\n        res[[bdnode; bdnode .+ (m+1)*(n+1)]] .= 0.0\n\n        Δ∂∂u = A\\res\n        ∂∂up -= Δ∂∂u\n        err = norm(res)\n        # @info err\n        if err<1e-8\n            break \n        end\n    end\n    global t += αf*Δt\n    \n        ##### STEP 3: Update State Variables ####\n\n    u += Δt * ∂u + Δt^2/2 * ((1 - β2) * ∂∂u + β2 * ∂∂up)\n    ∂u += Δt * ((1 - γ) * ∂∂u + γ * ∂∂up)\n    stress[i+1,:,:] = σ\n    internal_variable[i+1,:] = α\n    \n    state[:,i+1] = u\n    acce[:,i+1] = ∂∂up\n    velo[:,i+1] = ∂u\nend\n\nx = []\ny = []\nfor j= 1:n+1\n    for i = 1:m+1\n        push!(x, (i-1)*h)\n        push!(y, (j-1)*h)\n    end\nend\n\nfor i = 1:5:NT+1\n    close(\"all\")\n    scatter(x+state[1:(m+1)*(n+1), i], y+state[(m+1)*(n+1)+1:end, i])\n    scatter(x[m+1]+state[m+1, i],\n            y[m+1]+state[(m+1)*(n+1)+m+1, i], color=\"red\")\n    xlabel(\"x\")\n    ylabel(\"y\")\n    k = string(i)\n    k = repeat(\"0\", 3-length(k))*k \n    title(\"t = $k\")\n    ylim(-0.05,0.25)\n    xlim(-0.01, 0.45)\n    gca().invert_yaxis()\n    savefig(\"u$k.png\")\n\n    close(\"all\"); \n    plot(1:i, -state[(m+1)*(n+1)+m+1, 1:i])\n    xlim(0, NT+2)\n    ylim(0, 0.03)\n    scatter(i, -state[(m+1)*(n+1)+m+1, i], color=\"red\")\n    savefig(\"du$k.png\")\nend\n\nrun(`convert -delay 10 -loop 0 u*.png plasticity_u.gif`)\nrun(`convert -delay 10 -loop 0 du*.png plasticity_du.gif`)\n\n","category":"page"},{"location":"fwd_stress_based_viscoelasticity/#Mixed-Finite-Element-Methods-for-Linear-Viscoelasticity","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"","category":"section"},{"location":"fwd_stress_based_viscoelasticity/#Introduction","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Introduction","text":"","category":"section"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"One classical approach to linear isotropic elasticity is the displacement-based discretization for ","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"textdiv(2muvarepsilon(u) + lambda textdiv u I) = g","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"Typically u is discretized using continuous piecewise vector polynomials. This method yields accurate approximation for u. However, in practice","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"The stress is usually the quantity of primary physical interest and pure displacement methods will yield stress approximations of lower order accuracy. \nThe method performs poorly in the incompressible and nearly incompressible case, i.e., lambda rightarrow infty.","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"An alternative approach, the stress-based formulation, addresses this problem by considering a mixed formulation. However, the main obstacle is to construct a stable pair of finite element spaces for symmetric tensors. ","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"Instead of imposing the symmetry condition on the finite element space directly, we enforce the condition weakly by adding an additional equation and an associated Lagrange multiplier. ","category":"page"},{"location":"fwd_stress_based_viscoelasticity/#Mathematical-Formulation","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mathematical Formulation","text":"","category":"section"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"Consider the linear viscoelastic Maxwell model ","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"beginalignedA_1dot sigma + A_0 sigma = varepsilon(dot u) textdivsigma + rho f = rhoddot uendalignedtag1","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"Here sigma is the stress tensor, and A_0, A_1 are fourth-order material tensors. We introduce the velocity vector ","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"v = dot u","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"and the rotation of the velocity vector","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"rho = nabla v - varepsilon(v)","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"Let M, V, and K be the space of matrices, vectors, and skew symmetric matrices on Omega, then the weak form for Eq. 1 is:","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"Find (sigma v rho)in H(textdiv Omega M) times L^2(Omega V) times L^2(Omega K), such that for all (tau w eta)in H(textdiv Omega M) times L^2(Omega V) times L^2(Omega K)","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"beginaligned(A_0sigma tau) + (A_1dot sigma tau)  + (v textdivtau) + (rho tau) = (tau mathbfn v)_Gamma_D (w textdivsigma) -(rho dot v w) =(-rho f w) (sigma eta)   =0endaligned","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"Here Gamma_D is the Dirichlet boundary condition for the velocity v. Note that if we have traction boundary condition ","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"sigma mathbfn = g quad xin Gamma_Nsubset partialOmega","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"The condition is part of the Dirichlet boundaries for sigma. ","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"After discretization, this leads to a DAE","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"D_1 dot y + D_0 y = F","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"where ","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"D_1 = beginbmatrixmathbfA_1  0  0  0  mathbfB  0 \n0  0  0endbmatrix quad D_0 = beginbmatrixmathbfA_0  mathbfB  mathbfC mathbfB^T  0  0  mathbfC^T 0 0endbmatrix","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"This DAE can be solved using TR_BDF2 in ADCME. ","category":"page"},{"location":"fwd_stress_based_viscoelasticity/#Linear-Viscoelasticity-Model","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Linear Viscoelasticity Model","text":"","category":"section"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"We consider the 2D Maxwell material model here","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"dot sigma_ij + fracmueta left( sigma_ij - fracsigma_kk3delta_ij right) = 2mu dot epsilon_ij + lambda dotepsilon_kkdelta_ijtag2","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"We will convert Eq. 2 to the form in Eq. 1. To this end, consider two linear operator ","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"I sigma mapsto sigma quad T sigma mapsto (texttrsigma) I","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"In the Voigt notation, these two linear operators have the matrix form ","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"T = beginbmatrix1  1  0 1  1 0  0  0  0endbmatrix quad I = beginbmatrix1  0  0 0  1 0  0  0  1endbmatrix","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"The following formulas can be easily derived:","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"T^2 = 2T (I+alpha T)^-1 = I + beta T beta = -fracalpha1+2alpha","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"Therefore, Eq. 2 can be rewritten as ","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"dot sigma + fracmueta sigma - fracmu3eta Tsigma = 2mu dotvarepsilon + lambda Tdot varepsilon","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"which leads to ","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"dotvarepsilon = asigma + b Tsigma","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"Here ","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"a = frac12mu + frac12eta quad b = beta left(frac12mu + frac12etaright) - frac16eta - fracbeta3eta quad beta = -fraclambda2(lambda + mu)","category":"page"},{"location":"fwd_stress_based_viscoelasticity/","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Mixed Finite Element Methods for Linear Viscoelasticity","text":"In PoreFlow, (asigma + b Tsigma tau) can be calculated using compute_fem_bdm_mass_matrix. ","category":"page"},{"location":"fwd_stress_based_viscoelasticity/#Example","page":"Mixed Finite Element Methods for Linear Viscoelasticity","title":"Example","text":"","category":"section"},{"location":"BDMElement/#BDM-Finite-Element","page":"BDM Finite Element","title":"BDM Finite Element","text":"","category":"section"},{"location":"BDMElement/#Introduction","page":"BDM Finite Element","title":"Introduction","text":"","category":"section"},{"location":"BDMElement/","page":"BDM Finite Element","title":"BDM Finite Element","text":"The Brezzi-Douglas-Marini (BDM) finite elements have been used to approximate H(textdiv) space, which is used in applications such as linear elasticity and magnetism. In this note, we consider the approximation spaces on a trinagulation of a domain in mathbbR^2. Particularly, we consider the BDM_1 space. ","category":"page"},{"location":"BDMElement/","page":"BDM Finite Element","title":"BDM Finite Element","text":"BDM elements are approximation to vector spaces (in our case, 2D space). The degrees of freedoms of BDM elements are not associated with vertices because they are not nodal basis functions. To describe the basis functions for BDM_1, consider an edge E_l = z_s z_t st, then the two BDM_1 basis functions associated with the edge are ","category":"page"},{"location":"BDMElement/","page":"BDM Finite Element","title":"BDM Finite Element","text":"phi_l1 = lambda_s nabla^bot lambda_tqquad phi_l2 = -lambda_tnabla^bot lambda_s","category":"page"},{"location":"BDMElement/","page":"BDM Finite Element","title":"BDM Finite Element","text":"For example, ","category":"page"},{"location":"BDMElement/","page":"BDM Finite Element","title":"BDM Finite Element","text":"nabla lambda_2 = frac12Kbeginpmatrixy_3-y_1 x_1-x_3endpmatrixquad nabla^bot lambda_2 = frac12Kbeginpmatrixx_1-x_3 y_1-y_3endpmatrix","category":"page"},{"location":"BDMElement/","page":"BDM Finite Element","title":"BDM Finite Element","text":"One nice property for phi_l1 phi_l2 is that for ","category":"page"},{"location":"BDMElement/","page":"BDM Finite Element","title":"BDM Finite Element","text":"mathbfn_E_l = frac1E_lbeginpmatrixy_t-y_s x_s-x_tendpmatrix","category":"page"},{"location":"BDMElement/","page":"BDM Finite Element","title":"BDM Finite Element","text":"We have","category":"page"},{"location":"BDMElement/","page":"BDM Finite Element","title":"BDM Finite Element","text":"phi_l1cdot mathbfn_E_k_E_k = begincases\n0  text if  kneq l \nfraclambda_sE_l  text if  k = l \nendcasesqquad phi_l2cdot mathbfn_E_k_E_k = begincases\n0  text if  kneq l \nfraclambda_tE_l  text if  k = l \nendcases","category":"page"},{"location":"BDMElement/","page":"BDM Finite Element","title":"BDM Finite Element","text":"The six basis functions can be visualized as follows (codes are here):","category":"page"},{"location":"BDMElement/","page":"BDM Finite Element","title":"BDM Finite Element","text":"(Image: )","category":"page"},{"location":"BDMElement/","page":"BDM Finite Element","title":"BDM Finite Element","text":"In the finite element calculation, we need to map the reference triangle to the physical one. ","category":"page"},{"location":"BDMElement/","page":"BDM Finite Element","title":"BDM Finite Element","text":"(Image: )","category":"page"},{"location":"BDMElement/#Applications","page":"BDM Finite Element","title":"Applications","text":"","category":"section"},{"location":"BDMElement/","page":"BDM Finite Element","title":"BDM Finite Element","text":"Here are some examples that use BDM_1 elements:","category":"page"},{"location":"BDMElement/","page":"BDM Finite Element","title":"BDM Finite Element","text":"Poisson's Equation\nLinear Elasticity\nLinear Viscoelasticity","category":"page"},{"location":"heatequation/#Heat-Equation","page":"Heat Equation","title":"Heat Equation","text":"","category":"section"},{"location":"heatequation/","page":"Heat Equation","title":"Heat Equation","text":"The strong form of the initial/boundary-value problem of the heat equation is: given f, u_0, q, find ubarOmegatimes 0Trightarrow mathbbR such that","category":"page"},{"location":"heatequation/","page":"Heat Equation","title":"Heat Equation","text":"beginaligned\nrhofracpartial upartial t - nablacdot(Knabla u) = f Omegatimes (0T)\nu = u_0  Gamma_Dtimes (0T)\nKfracpartial upartial n = q Gamma_Ntimes (0T)\nendaligned","category":"page"},{"location":"heatequation/","page":"Heat Equation","title":"Heat Equation","text":"The corresponding weak form is: given f, u_0 and q , find u, such that for all w","category":"page"},{"location":"heatequation/","page":"Heat Equation","title":"Heat Equation","text":"int_Omega rhofracpartial upartial tdelta u mathrmdx + int_Omega Knabla u cdot nabla delta u mathrmd x = int_Omega fdelta u mathrmd x + int_Gamma_N q delta u mathrmdx","category":"page"},{"location":"heatequation/","page":"Heat Equation","title":"Heat Equation","text":"The computational domain is as follows: the top side is the inflow boundary condition and the other sides are Dirichlet boundary condition. ","category":"page"},{"location":"heatequation/","page":"Heat Equation","title":"Heat Equation","text":"(Image: )","category":"page"},{"location":"heatequation/","page":"Heat Equation","title":"Heat Equation","text":"We consider the manufactured solution ","category":"page"},{"location":"heatequation/","page":"Heat Equation","title":"Heat Equation","text":"u(x t) = (x_1^2+x_2^2)e^-tquad rho(x) = (1+x_1^2+x_2^2)","category":"page"},{"location":"heatequation/","page":"Heat Equation","title":"Heat Equation","text":"and ","category":"page"},{"location":"heatequation/","page":"Heat Equation","title":"Heat Equation","text":"K = beginbmatrix\n2  1 \n1  2\nendbmatrix","category":"page"},{"location":"heatequation/","page":"Heat Equation","title":"Heat Equation","text":"Then we have","category":"page"},{"location":"heatequation/","page":"Heat Equation","title":"Heat Equation","text":"beginaligned\nf(x) = -(1+x_1^2+x_2^2)(x_1^2+x_2^2) e^-t - 8 e^-t\nq(x) = -(2x+4y)e^-t\nendaligned","category":"page"},{"location":"heatequation/","page":"Heat Equation","title":"Heat Equation","text":"m = 40\nn = 20\nh = 0.01\nbdedge = []\nfor i = 1:m \n  push!(bdedge, [i i+1])\nend\nbdedge = vcat(bdedge...)\n\nbdnode = Int64[]\nfor j = 1:n+1\n  push!(bdnode, (j-1)*(m+1)+1)\n  push!(bdnode, (j-1)*(m+1)+m+1)\nend\nfor i = 2:m\n  push!(bdnode, n*(m+1)+i)\nend\n\nρ = eval_f_on_gauss_pts((x,y)->1+x^2+y^2, m, n, h)\nM = compute_fem_mass_matrix1(ρ, m, n, h)\n\nK_ = [2.0 1.0\n  1.0 2.0]\nK = compute_fem_stiffness_matrix1(K_, m, n, h)\n\nNT = 200\nΔt = 1/NT \nA = M/Δt+K \nA, Abd = fem_impose_Dirichlet_boundary_condition1(A, bdnode, m, n, h)\nU = zeros((m+1)*(n+1), NT+1)\nfor i = 1:m+1\n  for j = 1:n+1\n    x = (i-1)*h; y = (j-1)*h \n    U[(j-1)*(m+1)+i, 1] = x^2+y^2\n  end\nend\nfor i = 1:NT \n  F = eval_f_on_gauss_pts((x,y)->(-(1+x^2+y^2)*(x^2+y^2)-8)*exp(-i*Δt), m, n, h)\n  F = compute_fem_source_term1(F, m, n, h)\n\n  T = eval_f_on_boundary_edge((x,y)->-(2*x+4*y)*exp(-i*Δt), bdedge, m, n, h)\n  T = compute_fem_flux_term1(T, bdedge, m, n, h)\n\n  rhs = F  + M*U[:,i]/Δt + T\n  bdval = eval_f_on_boundary_node( (x,y)->(x^2+y^2)*exp(-i*Δt), bdnode, m, n, h)\n  rhs[bdnode] = bdval\n  U[:,i+1] = A\\(\n    rhs - Abd*bdval\n  )\nend\n\nUexact = zeros(n+1,m+1)\nfor j = 1:n+1\n  for i = 1:m+1\n    x = (i-1)*h; y = (j-1)*h \n    Uexact[j, i] = (x^2+y^2)*exp(-1)\n  end\nend\npcolormesh(reshape(U[:,end], m+1, n+1)'-Uexact); colorbar()","category":"page"},{"location":"heatequation/","page":"Heat Equation","title":"Heat Equation","text":"(Image: )","category":"page"},{"location":"coupled_viscoelasticity/#Coupled-Viscoelasticity-and-Single-Phase-Flow","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"","category":"section"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"We have considered inverse modeling for viscoelasticity and coupled elasticity and single phase flow inversion. A more complex case is when the constitutive relation is given by the viscoelasticity and the dynamics is governed by the coupled viscoelasticity and single phase flow equation. We consider the same governing equation as the poreelasticity","category":"page"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"beginaligned\nmathrmdivsigma(u) - b nabla p = 0\nfrac1M fracpartial ppartial t + bfracpartial varepsilon_v(u)partial t - nablacdotleft(frackB_fmunabla pright) = f(xt)\nendaligned","category":"page"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"with boundary conditions","category":"page"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"beginaligned\nsigma n = 0quad xin Gamma_N^u qquad u=0 quad xin Gamma_D^u\n-frackB_fmufracpartial ppartial n = 0quad xin Gamma_N^p qquad p=g quad xin Gamma_D^p\nendaligned","category":"page"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"and the initial condition","category":"page"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"p(x0) = 0 u(x0) =0 xin Omega","category":"page"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"The only difference is that the consitutive relation is given by the Maxwell material equation, which has the following form in the discretization (for the definition of H and S, see here)","category":"page"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"sigma^n+1 = H varepsilon^n+1 + S sigma^n  - Hvarepsilon^n","category":"page"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"Then the discretization for the mechanics is ","category":"page"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"int_Omega H varepsilon^n+1  delta varepsilon mathrmdx- int_Omega b p delta u mathrmdx = int_partial Omega mathbftdelta u mathrmds + int_Omega Hvarepsilon^n  deltavarepsilon mathrmd x - int_Omega Ssigma^n  delta varepsilon mathrmd x","category":"page"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"For the discretization of the fluid equation, see here.","category":"page"},{"location":"coupled_viscoelasticity/#Forward-Simulation","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Forward Simulation","text":"","category":"section"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"To have an overview of the viscoelasticiy, we conduct the forward simulation in the injection-production model. An injection well is located on the left while a production well is located on the right. We impose the Dirichlet boundary conditions for u  and no flow boundary conditions for the pressure on four sides. We run the results with Lamé constants lambda=20 and mu=05, and three different viscosity eta = 10000 1, and 01. The case  eta = 10000 corresponds to a nearly linear elastic constitutive relation. The typical characteristics of viscoelasticity in our experiments are that they usually possess larger stresses and smaller displacements. ","category":"page"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"Description eta=10000 eta=1 eta=01\nPressure (Image: ) (Image: ) (Image: )\nsigma_xx (Image: ) (Image: ) (Image: )\nsigma_xy (Image: ) (Image: ) (Image: )\nsigma_yy (Image: ) (Image: ) (Image: )\nu (Image: ) (Image: ) (Image: )\nv (Image: ) (Image: ) (Image: )\nsigma_xx at the center point (Image: ) (Image: ) (Image: )\nu at the center point (Image: ) (Image: ) (Image: )\nvarepsilon_xx at the center point (Image: ) (Image: ) (Image: )","category":"page"},{"location":"coupled_viscoelasticity/#Inverse-Modeling","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Inverse Modeling","text":"","category":"section"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"In the inverse modeling, the initial conditions and boundary conditions are ","category":"page"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"Here u, sigma, and p are all initialized to zero. \nFixed Dirichlet boundaries for u on the bottom. \nTraction-free boundary conditions (free surface) for u on the other three sides\nNo-flow condition for p on all sides. ","category":"page"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"We have 5 sets of training data, each corresponds to a Delta production (injection) source with the magnitude 02i, i=1234 and 5​. We show a typical dataset below. ","category":"page"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"Pressure sigma_xx sigma_yy sigma_xy u v\n(Image: disp_p_inv_visco1.0) (Image: disp_sxx_inv_visco1.0) (Image: disp_syy_inv_visco1.0) (Image: disp_sxy_inv_visco1.0) (Image: disp_u_inv_visco1.0) (Image: disp_v_inv_visco1.0)","category":"page"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"Displacement sigma_xx at the center point varepsilon_xx  at the center point u at the center point\n(Image: disp_scattered_u) (Image: sigmaxx1.0) (Image: varepsilonxx1.0) (Image: ux1.0)","category":"page"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"The observation data is the x-direction displacement at all time steps on the surface. We will consider several kinds of inversion. ","category":"page"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"Parametric inversion. In this case, we assume we already know the form of the consitutitve relation and we only need to estimate mu, lambda and eta. code\nLinear elasticity approximation. In this case, the constitutive relation is assumed to have the linear elasticity form code\nsigma = Hvarepsilon\nHere H is an unknown SPD matrix. \nDirect inversion. The constitutive relation is substituted by \nsigma^n+1 = mathcalNN(sigma^n varepsilon^n)\nwhere mathcalNN is a neural network. code\nImplicit inversion. The constitutive relation is subsituted by \nsigma^n+1 = mathcalNN(sigma^n varepsilon^n) + Hvarepsilon^n+1\nwhere mathcalNN is a neural network and H is an unknown SPD matrix. The motivation of this form is to improve the conditioning of the implicit numerical scheme.  code","category":"page"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"To evaluate the inverse modeling result, we consider a test dataset which corresponds to the magnitude 0.5 for the Delta sources. We measure the displacement and Von Mises stress. For the first inversion, we report the values. ","category":"page"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"For the parametric inversion, we have the following result","category":"page"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"(Image: loss) (Image: s_param) (Image: u_param)\nLoss Function Von Mises Stress Displacement","category":"page"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"Parameter Initial Guess Estimated True\nmu 1.5 0.49999986292871396 0.5\nlambda 1.5 1.9999997784851993 2.0\neta 1.5 0.9999969780184615 1.0","category":"page"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"For the other three types of inversion, the results are presented below","category":"page"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"Reference Linear Elasticity Direct Implicit\n(Image: disp_s_inv_visco_ref) (Image: s_l) (Image: s_di) (Image: s_nn)\n(Image: disp_scattered_u_inv_visco_ref) (Image: u_l) (Image: u_di) (Image: u_nn)","category":"page"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"The results are reported at 2000-th iteration. In terms of the Von Mises stress, we see that the direct training gives us the best result (note the scale of the colorbar). ","category":"page"},{"location":"coupled_viscoelasticity/#Forward-Simulation-Codes","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Forward Simulation Codes","text":"","category":"section"},{"location":"coupled_viscoelasticity/","page":"Coupled Viscoelasticity and Single Phase Flow","title":"Coupled Viscoelasticity and Single Phase Flow","text":"using Revise\nusing PoreFlow\nusing PyCall\nusing LinearAlgebra\nusing ADCME\nusing MAT\nusing PyPlot\nnp = pyimport(\"numpy\")\n\n# Domain information \nNT = 50\nΔt = 1/NT\nn = 20\nm = 2*n \nh = 1.0/n \nbdnode = Int64[]\nfor i = 1:m+1\n    for j = 1:n+1\n        if i==1 || i==m+1 || j==1|| j==n+1\n            push!(bdnode, (j-1)*(m+1)+i)\n        end\n    end\nend\n\nis_training = false\nb = 1.0\n\ninvη = 1.0\nif length(ARGS)==1\n    global invη = parse(Float64, ARGS[1])\nend\n\nλ = constant(2.0)\nμ = constant(0.5)\ninvη = constant(invη)\n\niS = tensor(\n    [1+2/3*μ*Δt*invη -1/3*μ*Δt*invη 0.0\n    -1/3*μ*Δt*invη 1+2/3*μ*Δt*invη 0.0 \n    0.0 0.0 1+μ*Δt*invη]\n)\nS = inv(iS)\nH = S * tensor([\n    2μ+λ λ 0.0\n    λ 2μ+λ 0.0\n    0.0 0.0 μ\n])\n\n\nQ = SparseTensor(compute_fvm_tpfa_matrix(m, n, h))\nK = compute_fem_stiffness_matrix(H, m, n, h)\nL = SparseTensor(compute_interaction_matrix(m, n, h))\nM = SparseTensor(compute_fvm_mass_matrix(m, n, h))\nA = [K -b*L'\nb*L/Δt 1/Δt*M-Q]\nA, Abd = fem_impose_coupled_Dirichlet_boundary_condition(A, bdnode, m, n, h)\n# error()\nU = zeros(m*n+2(m+1)*(n+1), NT+1)\nx = Float64[]; y = Float64[]\nfor j = 1:n+1\n    for i = 1:m+1\n        push!(x, (i-1)*h)\n        push!(y, (j-1)*h)\n    end\nend\n    \ninjection = (div(n,2)-1)*m + 3\nproduction = (div(n,2)-1)*m + m-3\n\n\nfunction condition(i, tas...)\n    i<=NT\nend\n\nfunction body(i, tas...)\n    ta_u, ta_ε, ta_σ = tas\n    u = read(ta_u, i)\n    σ0 = read(ta_σ, i)\n    ε0 = read(ta_ε, i)\n    rhs1 = compute_fem_viscoelasticity_strain_energy_term(ε0, σ0, S, H, m, n, h)\n    rhs2 = zeros(m*n)\n    rhs2[injection] += 1.0\n    rhs2[production] -= 1.0\n    rhs2 += b*L*u[1:2(m+1)*(n+1)]/Δt + \n            M * u[2(m+1)*(n+1)+1:end]/Δt\n    rhs = [rhs1;rhs2]\n    o = A\\rhs \n\n    ε = eval_strain_on_gauss_pts(o, m, n, h)\n    σ = σ0*S + (ε - ε0)*H\n    ta_u = write(ta_u, i+1, o)\n    ta_ε = write(ta_ε, i+1, ε)\n    ta_σ = write(ta_σ, i+1, σ)\n    i+1, ta_u, ta_ε, ta_σ\nend\n\ni = constant(1, dtype=Int32)\nta_u = TensorArray(NT+1); ta_u = write(ta_u, 1, constant(zeros(2(m+1)*(n+1)+m*n)))\nta_ε = TensorArray(NT+1); ta_ε = write(ta_ε, 1, constant(zeros(4*m*n, 3)))\nta_σ = TensorArray(NT+1); ta_σ = write(ta_σ, 1, constant(zeros(4*m*n, 3)))\n_, u_out, ε_out, σ_out = while_loop(condition, body, [i, ta_u, ta_ε, ta_σ])\nu_out = stack(u_out)\nu_out.set_shape((NT+1, size(u_out,2)))\nσ_out = stack(σ_out)\nε_out = stack(ε_out)\n\nupper_idx = Int64[]\nfor i = 1:m+1\n    push!(upper_idx, (div(n,3)-1)*(m+1)+i)\n    push!(upper_idx, (div(n,3)-1)*(m+1)+i + (m+1)*(n+1))\nend\nfor i = 1:m \n    push!(upper_idx, (div(n,3)-1)*m+i+2(m+1)*(n+1))\nend\n\nsess = Session(); init(sess)\nU, Sigma, Varepsilon, ev = run(sess, [u_out,σ_out,ε_out, invη])\nvisualize_displacement(U'|>Array, m, n, h, name=\"_visco$ev\")\nvisualize_pressure(U'|>Array, m, n, h, name=\"_visco$ev\")\nvisualize_displacement(U'|>Array, m, n, h, name=\"_visco$ev\")\nvisualize_stress(Sigma[:,:,1]'|>Array, m, n, h, name=\"xx_visco$ev\")\nvisualize_stress(Sigma[:,:,2]'|>Array, m, n, h, name=\"yy_visco$ev\")\nvisualize_stress(Sigma[:,:,3]'|>Array, m, n, h, name=\"xy_visco$ev\")\n\n\nidx = m÷2 + (n÷2)*m\nclose(\"all\")\nplot(LinRange(0,1.0, NT+1),Sigma[:,4*(idx-1)+1,1])\nxlabel(\"time\")\nylabel(\"\\$\\\\sigma_{xx}\\$\")\nsavefig(\"sigmaxx$ev.jpeg\")\n\nclose(\"all\")\nplot(LinRange(0,1.0, NT+1),Varepsilon[:,4*(idx-1)+1,1])\nxlabel(\"time\")\nylabel(\"\\$\\\\varepsilon_{xx}\\$\")\nsavefig(\"varepsilonxx$ev.jpeg\")\n\nidx = m÷2 + (n÷2)*(m+1)\nclose(\"all\")\nplot(LinRange(0,1.0, NT+1),U[:,4*(idx-1)+1])\nxlabel(\"time\")\nylabel(\"\\$u_x\\$\")\nsavefig(\"ux$ev.jpeg\")","category":"page"},{"location":"CHTCoupled/#Conjugate-heat-transfer-coupled-solver-for-incompressible-fluid","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"","category":"section"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"We couple the Navier-Stokes equations with the energy equation to obtain the following nonlinear system of u v p T in two spatial dimensions:","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"fracpartial upartial x+fracpartial vpartial y=0 tag1","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"u fracpartial upartial x+v fracpartial upartial y=-frac1rho fracpartial ppartial x+fracpartial partial xleft(nu fracpartial  upartial x  right)+ fracpartial partial yleft(nu fracpartial  upartial y  right)+f_1 tag2","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"u fracpartial vpartial x+v fracpartial vpartial y=-frac1rho fracpartial ppartial y+fracpartial partial xleft(nu fracpartial  vpartial x  right)+ fracpartial partial yleft(nu fracpartial  vpartial y  right)+f_2 tag3","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"rho  C_p  left( u fracpartial Tpartial x+v fracpartial Tpartial y right)=fracpartial partial xleft(k fracpartial  Tpartial x  right)+ fracpartial partial yleft(k fracpartial  Tpartial y  right)+Q tag4","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"where bf u = u  v is the steady-state velocity field, rho is the density, C_p is the specific heat capacity,  T is the steady-state tempearture, k is the conductivity, and Q is the heat source.","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"Let delta u denote the finite element basis for u, delta v denote the finite element basis for v, and delta T denote the finite element basis for T. To derive the weak form of (4)-(5), we multiply both sides of (2)-(4) by delta u，delta v,  and delta T, respectively.","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"left(u fracpartial upartial x delta uright)+ left(v fracpartial upartial y  delta uright) =  -frac1rho left(fracpartial ppartial x delta uright)+nuleft(fracpartial^2 upartial x^2+fracpartial^2 upartial y^2  delta uright)+left(f_1 delta uright)","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"left(u fracpartial vpartial x delta vright) + left(v fracpartial vpartial y delta vright) = -frac1rholeft( fracpartial ppartial y delta vright) +nuleft(fracpartial^2 vpartial x^2+fracpartial^2 vpartial y^2  delta vright)+ left( f_2 delta vright)","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"rho  C_p left(u fracpartial Tpartial x delta Tright) + rho  C_p left(v fracpartial Tpartial y delta Tright) = k left(fracpartial^2 vpartial x^2+fracpartial^2 vpartial y^2  delta Tright)+ left( Q delta Tright)","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"If nu and k are space-varying, we have","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"left(u fracpartial upartial x delta uright)+ left(v fracpartial upartial y  delta uright) =  -frac1rho left(fracpartial ppartial x delta uright)+left(fracpartial partial xleft(nu fracpartial  upartial x  right)+ fracpartial partial yleft(nu fracpartial  upartial y  right)  delta uright)+left(f_1 delta uright)","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"left(u fracpartial vpartial x delta vright) + left(v fracpartial vpartial y delta vright) = -frac1rholeft( fracpartial ppartial y delta vright) +left(fracpartial partial xleft(nu fracpartial  upartial x  right)+ fracpartial partial yleft(nu fracpartial  upartial y  right)  delta vright)+ left( f_2 delta vright)","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"rho  C_p left(u fracpartial Tpartial x delta Tright) + rho  C_p left(v fracpartial Tpartial y delta Tright) =  left(fracpartial partial xleft(k fracpartial  Tpartial x  right)+ fracpartial partial yleft(k fracpartial  Tpartial y  right)  delta Tright)+ left( Q delta Tright)","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"Then we have the following weak form","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"left(u fracpartial upartial x delta uright)+ left(v fracpartial upartial y  delta uright) =  frac1rho left(p  fracpartial delta upartial xright)-nuleft(nabla u nabla delta uright)+left(f_1 delta uright)","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"left(u fracpartial vpartial x delta vright) + left(v fracpartial vpartial y delta vright) = frac1rholeft(p fracpartial delta vpartial yright) -nuleft(nabla v nabladelta vright)+ left( f_2 delta vright)","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"rho  C_p left(u fracpartial Tpartial x delta Tright) + rho  C_p left(v fracpartial Tpartial y delta Tright) = - kleft(nabla T nabladelta Tright)+ left( Q delta Tright)","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"We use the Newton's method to solve the problem iteratively.","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"Temperature variations within a convective flow give rise to variations in fluid properties (e.g., density and viscosity). In Boussinesq approximations, all density varitions are neglected. This results in the following system of governing equations:","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"fracpartial upartial x+fracpartial vpartial y=0 tag1","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"u fracpartial upartial x+v fracpartial upartial y=- frac1rhofracpartial ppartial x+fracpartial partial xleft( nu fracpartial  upartial x  right)+ fracpartial partial yleft(nu fracpartial  upartial y  right)tag2","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"u fracpartial vpartial x+v fracpartial vpartial y -  Ra nu T =-frac1rhofracpartial ppartial y+fracpartial partial xleft(nu fracpartial  vpartial x  right)+ fracpartial partial yleft(nu fracpartial  vpartial y  right) tag3","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"$","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"u \\frac{\\partial T}{\\partial x}+v \\frac{\\partial T}{\\partial y}=\\frac{\\partial }{\\partial x}\\left( \\frac{\\partial  T}{\\partial x } \\right)+ \\frac{\\partial }{\\partial y}\\left(\\frac{\\partial  T}{\\partial y } \\right)\\tag{4}$","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"where K = krho  C_p is the diffusivity of the material.","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"Here Ra is the Raliegh number, which  is a dimensionless number associated with buoyancy-driven flow. ","category":"page"},{"location":"CHTCoupled/#Application:-Spray-position-for-improved-nasal-drug-delivery","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Application: Spray position for improved nasal drug delivery","text":"","category":"section"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"In this paper, the authors modeled spray position with a coupled system of static Navier-Stokes equations and transport equations for Lagrangian tracking. The governing equations are","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"fracpartial upartial x+fracpartial vpartial y=0 tag1","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"u fracpartial upartial x+v fracpartial upartial y=- frac1rhofracpartial ppartial x+fracpartial partial xleft( nu fracpartial  upartial x  right)+ fracpartial partial yleft(nu fracpartial  upartial y  right) + f_1tag2","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"u fracpartial vpartial x+v fracpartial vpartial y  =-frac1rhofracpartial ppartial y+fracpartial partial xleft(nu fracpartial  vpartial x  right)+ fracpartial partial yleft(nu fracpartial  vpartial y  right) + f_2tag3","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"fracpartial w_1partial t = kappa_1(u - w_1) + q_1 tag5","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"fracpartial w_2partial t = kappa_2(v - w_2) + q_2 tag6","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"Here w_1 and w_2 are the droplet velocity. f_1 and f_2 are  accelerations induced by different body forces. We discretize the transport equation using an implicit finite difference scheme: ","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"left(frac1Delta t+kappa_1right)w_1^n+1 =left(frac1Delta tright)w_1^n + kappa_1 u + q_1^n+1","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"left(frac1Delta t+kappa_2right)w_2^n+1 =left(frac1Delta tright)w_2^n + kappa_2 v + q_2^n+1","category":"page"},{"location":"CHTCoupled/","page":"Conjugate heat transfer coupled solver for incompressible fluid","title":"Conjugate heat transfer coupled solver for incompressible fluid","text":"The computational graph for this coupled system is as follows:","category":"page"},{"location":"viscoelasticity_earth/#Modeling-Viscoelasticity-of-the-Earth","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"","category":"section"},{"location":"viscoelasticity_earth/","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"In a previous section, we consider the viscoelasticity constitutive relation. In this section, we consider an application case: the viscoelasticity of the Earth. We show the viscoelasticity effect related with postseismic relaxation under two settings: strike-slip fault and dip-slip fault. The background of these problems can be found in Chapter 6 of Segall, P. (2010)'s book \"Earthquake and volcano deformation\".","category":"page"},{"location":"viscoelasticity_earth/","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"In geology, a fault is a planar fracture or discontinuity in a volume of rock across which there has been significant displacement as a result of rock-mass movement. There are many types of faults based on the direction of slip. In this section, we focus on two types of slip: strike-slip, where the offset is predominantly horizontal, and dip-slip, where offset is predominately vertical. ","category":"page"},{"location":"viscoelasticity_earth/","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"<center>\n<img src=\"../assets/visco-earth/fault.png\" width=\"60%\">\n</center>","category":"page"},{"location":"viscoelasticity_earth/","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"We use a viscoelasticity model to describe the fault evolution. The mathematical equations are discretized on an unstructure quadrilateral mesh using the finite element method. In another section, we estimate the viscoelasticity parameter from surface displacement data using a gradient-based optimization (L-BFGS-B) technique.  We utilize the AD-capable ViscoelasticitySolver in NNFEM for forward computational and automatic differentiation. ","category":"page"},{"location":"viscoelasticity_earth/#Strike-slip-Fault-Setting","page":"Modeling Viscoelasticity of the Earth","title":"Strike-slip Fault Setting","text":"","category":"section"},{"location":"viscoelasticity_earth/","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"In this case, the displacement only occurs in the z direction, so we can use a scalar valued function u(xy) to denote the displacement. ","category":"page"},{"location":"viscoelasticity_earth/","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"<center>\n<img src=\"../assets/visco-earth/strikeslip-model.png\" width=\"60%\">\n</center>","category":"page"},{"location":"viscoelasticity_earth/","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"The constitutive relation is described by the Maxwell viscoelasticity model","category":"page"},{"location":"viscoelasticity_earth/","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"beginaligneddot sigma_31 + fracmueta sigma_31 = 2mudotepsilon_31 dot sigma_32 + fracmueta sigma_32 = 2mudotepsilon_32endaligned","category":"page"},{"location":"viscoelasticity_earth/","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"Here","category":"page"},{"location":"viscoelasticity_earth/","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"epsilon_31 = fracpartial upartial xquad epsilon_32 = fracpartial upartial y","category":"page"},{"location":"viscoelasticity_earth/","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"To complete the equation, we also have the balance of linear momentum (kinematic equation)","category":"page"},{"location":"viscoelasticity_earth/","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"sigma_311 + sigma_322 + f = rho ddot u","category":"page"},{"location":"viscoelasticity_earth/","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"where f is the body force and rho is the density. ","category":"page"},{"location":"viscoelasticity_earth/","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"note: Note\nIn the case eta is very small, the constitutive relation can be approximated by  sigma_31 = 2eta dotepsilon_31quad sigma_32 = 2eta dotepsilon_32By plugging the equations into Equation 1 (ignoring the body force), and integrate  in time2eta (epsilon_311 + epsilon_322)  = rho dot u Rightarrow 2eta Delta u = rho dot u tag1Equation 1 is a diffusion equation. ","category":"page"},{"location":"viscoelasticity_earth/","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"note: Note\nIn the case eta is very large, the constitutive relation is reduced to linear elasticitysigma = 2muepsilonTherefore, the kinematic equation is reduced to a wave equation2mu Delta u = ddot uWe discretize the constitutive relation using an implicit schemefracsigma^n+1 - sigma^nDelta t + fracmuetasigma^n+1 = 2mu fracepsilon^n+1-epsilon^nDelta twhich is equivalent to sigma^n+1 = frac2muetaeta + muDelta tepsilon^n+1- frac2muetaeta + muDelta tepsilon^n + fracetaeta+muDelta tsigma^n","category":"page"},{"location":"viscoelasticity_earth/#Numerical-result","page":"Modeling Viscoelasticity of the Earth","title":"Numerical result","text":"","category":"section"},{"location":"viscoelasticity_earth/","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"displacement u velocity dot u strain rate   partial dot u  partial x\n(Image: ) (Image: ) (Image: )","category":"page"},{"location":"viscoelasticity_earth/#Dip-slip-Fault-Setting","page":"Modeling Viscoelasticity of the Earth","title":"Dip-slip Fault Setting","text":"","category":"section"},{"location":"viscoelasticity_earth/","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"The constitutive relation of a dip-slip fault can be described by a plane strain viscoelasticity model","category":"page"},{"location":"viscoelasticity_earth/","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"Finite element model Elastic response\n(Image: ) (Image: )","category":"page"},{"location":"viscoelasticity_earth/#Numerical-result-2","page":"Modeling Viscoelasticity of the Earth","title":"Numerical result","text":"","category":"section"},{"location":"viscoelasticity_earth/","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"horizontal slip u_x vertical slip u_y von Mises stress\n(Image: ) (Image: ) (Image: )","category":"page"},{"location":"viscoelasticity_earth/","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"<center>\n<img src=\"../assets/visco-earth/dipslip-disp.gif\" width=\"50%\">\n</center>","category":"page"},{"location":"viscoelasticity_earth/","page":"Modeling Viscoelasticity of the Earth","title":"Modeling Viscoelasticity of the Earth","text":"Example code: dippingfaultviscosityforward.jl.","category":"page"},{"location":"coupled/#Coupled-Geomechanics-and-Single-Phase-Flow","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"","category":"section"},{"location":"coupled/#Mathematical-Formulation","page":"Coupled Geomechanics and Single Phase Flow","title":"Mathematical Formulation","text":"","category":"section"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"The governing equation for mechanical deformation of the solid-fluid system is ","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"boxedmathrmdiv sigma + rho_b g = 0","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"where mathrmdiv is the divergence operator, sigma is the Cauchy total-stress ","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"sigma = beginbmatrix\nsigma_xx  sigma_xy\nsigma_xy  sigma_yy\nendbmatrix","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"and ginmathbbR^2 is the gravity vector, rho_b=phi rho_f + (1-phi)rho_s  is the bulk density, rho_f is total fluid density, rho_s is the density of the solid phase and phi is the true porosity. ","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"The stress-strain relation for linear poroelasticity takes the form ","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"sigma = sigma - bpmathbfIquad sigma = beginbmatrix\nsigma_xx  sigma_xy\nsigma_xy  sigma_yy\nendbmatrix\nquadbeginbmatrix\ndeltasigma_xxdeltasigma_yydeltasigma_xy\nendbmatrix = Hbeginbmatrix\ndeltavarepsilon_xxdeltavarepsilon_yy2deltavarepsilon_xy\nendbmatrix","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"where mathbfI is the identity matrix, p is the pressure, b is the Biot coefficient, D is the elasticity matrix","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"H = fracE(1-nu^2)beginbmatrix\n1  nu 0\nnu  1  0\n0  0  1-nu\nendbmatrix","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Here E is the Young modulus,  nu is the Poisson ratio and  varepsilon is the strain","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"varepsilon = beginbmatrix\nvarepsilon_xx  varepsilon_xy\nvarepsilon_xy  varepsilon_yy\nendbmatrix","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"info: Info\nThe relation between sigma and varepsilon may be nonlinear; that's why we only write delta sigma in terms of delta varepsilon. ","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"The fluid mass convervation in terms of pressure and volumetric strain is given by ","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"boxedfrac1Mfracpartial ppartial t + bfracpartial varepsilon_vpartial t + mathrmdivmathrmv = f","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"where varepsilon_v = mathrmtr varepsilon, f is a volumetric source term and ","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"mathbfv = -frac1B_ffrackmu(nabla p - rho_f g)","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"where k is the absolute permeability tensor, mu is the fluid viscosity and B_f is the formation volume factor of the fluid. ","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"The mechanical equation and fluid equation are coupled through p and varepsilon. In the drained split scheme, in each step p is kept fixed while solving the mechanics equation and then the fluid equation is solved keeping varepsilon fixed. The drained scheme can be viewed as a Jacobian iteration of the fully coupled system. ","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"note: Note\nThe linear poroelasticity equations with g=0 can be expressed as [linear]beginaligned\nmathrmdivsigma(u) - b nabla p = 0\nfrac1M fracpartial ppartial t + bfracpartial varepsilon_v(u)partial t - nablacdotleft(frackB_fmunabla pright) = f(xt)\nendaligned​with boundary conditionsbeginaligned\nsigma n = 0quad xin Gamma_N^u qquad u=0 quad xin Gamma_D^u\n-frackB_fmufracpartial ppartial n = 0quad xin Gamma_N^p qquad p=g quad xin Gamma_D^p\nendalignedand the initial conditionp(x0) = p_0 u(x0) =0 xin Omega","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"[linear]: Kolesov, Alexandr E., Petr N. Vabishchevich, and Maria V. Vasilyeva. \"Splitting schemes for poroelasticity and thermoelasticity problems.\" Computers & Mathematics with Applications 67.12 (2014): 2185-2198.","category":"page"},{"location":"coupled/#Numerical-Discretization","page":"Coupled Geomechanics and Single Phase Flow","title":"Numerical Discretization","text":"","category":"section"},{"location":"coupled/#Mechanics","page":"Coupled Geomechanics and Single Phase Flow","title":"Mechanics","text":"","category":"section"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"We discretize the domain 0(n-1)htimes 0 (m-1)h uniformly with step size h.","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"(Image: )","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"The finite element method is usually used to solve the mechanics equation, whose discretization reads","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"int_Omega delta varepsilon sigmamathrmdx - int_Omega b p delta varepsilon_vmathrmdx = int_Gamma tcdotdelta umathrmds + int_Omega rho_b gcdotdelta u dx","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"where t = sigma n = sigma n - bpn, Gamma is the part of partial Omega with external traction,  and n is the unit normal vector pointing outwards. One each element A, define u_A as the nodal values of the basis functions whose supports overlap A, then the strain at (xy) can be expressed as (see the figure for illustration)","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"varepsilon_A = Bu_A quad varepsilon_A =beginbmatrix\nvarepsilon_xx\nvarepsilon_yy\n2varepsilon_xy\nendbmatrixquad\nu_A = beginbmatrix\nu_1\nu_2\nu_3\nu_4\nv_1\nv_2\nv_3\nv_4\nendbmatrix","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"where ","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"B = beginbmatrix\nfracpartial N_1partial x  fracpartial N_2partial x  fracpartial N_3partial x  fracpartial N_4partial x  0  0  0  0\n0  0  0  0  fracpartial N_1partial y  fracpartial N_2partial y  fracpartial N_3partial y  fracpartial N_4partial y\nfracpartial N_1partial y  fracpartial N_2partial y  fracpartial N_3partial y  fracpartial N_4partial y  fracpartial N_1partial x  fracpartial N_2partial x  fracpartial N_3partial x  fracpartial N_4partial x\nendbmatrix = beginbmatrix\n-frac1-etahfrac1-etah -fracetah  fracetah  0  0  0  0\n0  0  0  0  -frac1-xih  -fracxih  frac1-xih  fracxih\n-frac1-xih  -fracxih  frac1-xih  fracxih  -frac1-etahfrac1-etah -fracetah  fracetah\nendbmatrix","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"and","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"xi = fracx-x_0hquad eta = fracy-y_0h","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"(Image: )","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"The terms in the weak form can be expressed as ","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"int_Adelta varepsilon sigmamathrmdx = int_A u_AB^TDBdelta u_Amathrmdx","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"int_A b p delta varepsilon_vmathrmdx = int_A bp 110B^Tdelta u_Amathrmdx","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Typically, the integration is computed using Gauss quadrature; for example, we have","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"int_A u_AB^TDBdelta u_Amathrmdx = u_A leftsum_i=1^n_g B(xi_i eta_i)^T DB(xi_i eta_i)h^2w_irightdelta u_A","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"where (x_i eta_i) are Gauss quadrature points and w_i is the corresponding weight. ","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"note: Note\nWe have the following convention for bdnode and bdedge, which denote the Dirichlet boundary conditions and the Neumann boundary conditions:bdnodein mathbfR^d and each entry in bdnode represents the node index. The corresponding row and column indices can be retrieved with femidx.\nbdedgein mathbfR^dtimes 2 and each row in bdedge represents indices of two end points of the edge. The corresponding cell row and column can be retrieved with fvmidx.","category":"page"},{"location":"coupled/#Fluid","page":"Coupled Geomechanics and Single Phase Flow","title":"Fluid","text":"","category":"section"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"The fluid equation is discretized using finite volume method. ","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"int_A_i frac1Mfracp_i^n+1 - p_i^nDelta t mathrmdx + int_A_i b fracvarepsilon_v^n+1-varepsilon_v^nDelta t mathrmd x + int_A_i mathrmdivmathbfvmathrmdx = int_A_i fmathrmdx","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"For the divergence term, we use the two-point flux approximation and we have (assuming k is a constant scalar)","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"int_A_i mathrmdivmathbfv mathrmdx = -frackB_fmusum_j=1^n_mathrmfaces (q_j-q_i) = -frackB_fmusum_j=1^n_mathrmfaces (p_j^n+1 - p_i^n+1) + frackrho_fgB_fmusum_j=1^n_mathrmfaces (y_j-y_i)","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"where","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"q = p^n+1 - rho_fgy","category":"page"},{"location":"coupled/#Initial-and-Boundary-Conditions","page":"Coupled Geomechanics and Single Phase Flow","title":"Initial and Boundary Conditions","text":"","category":"section"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"For the mechanial problem we consider","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Prescribed displacement: u = bar u; or\nPrescribed traction: sigmacdot n=bar t (also called overburden).","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"For the flow problem we consider","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Prescribed pressure: p=bar p; or\nPrescribed volumetric flux: mathbfvcdot n=bar v (called no flow if bar v=0).","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"The initial displacement and strains are zero. The initial pressure is prescribed. ","category":"page"},{"location":"coupled/#Verification","page":"Coupled Geomechanics and Single Phase Flow","title":"Verification","text":"","category":"section"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"To verify our numerical scheme, we consider manufactured solution u(xy) = beginbmatrix x^2+y^2\nx^2-y^2 endbmatrixtquad p(xy) = x^2y^2(1-x)^2(1-y)^2e^-t","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Then we have","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"beginaligned\nf(xyt)= (-x^2y^2(x - 1)^2(y - 1)^2 - 2x^2y^2(x - 1)^2 - 2x^2y^2(y - 1)^2 - 8x^2y(x - 1)^2(y - 1) - 2x^2(x - 1)^2(y - 1)^2 - 8xy^2(x - 1)(y - 1)^2 - 2y^2(x - 1)^2(y - 1)^2 + 2(x - y)exp(t))exp(-t)\ng(xyt)= beginbmatrix\n3t-2xe^-t\n-t + 2ye^-t\nendbmatrix\nendaligned","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Description u displacement v displacement Pressure\nNumerical Result (Image: disp_u_out) (Image: disp_v_out) (Image: disp_p_out)\nError (Image: disp_u_diff) (Image: disp_v_diff) (Image: disp_p_diff)","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Code","category":"page"},{"location":"coupled/#Benchmarks","page":"Coupled Geomechanics and Single Phase Flow","title":"Benchmarks","text":"","category":"section"},{"location":"coupled/#Flooding","page":"Coupled Geomechanics and Single Phase Flow","title":"Flooding","text":"","category":"section"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Code","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"u displacement v displacement Pressure Von Mises Stress\n(Image: disp_u_flood) (Image: disp_v_flood) (Image: disp_p_flood) (Image: )","category":"page"},{"location":"coupled/#Injection-Production-in-Homogenious-Media","page":"Coupled Geomechanics and Single Phase Flow","title":"Injection-Production in Homogenious Media","text":"","category":"section"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Code","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"u displacement v displacement Pressure\n(Image: disp_u_flood) (Image: disp_v_flood) (Image: disp_p_flood)","category":"page"},{"location":"coupled/#Injection-Production-in-Homogenious-Media-and-with-J2-plasticity","page":"Coupled Geomechanics and Single Phase Flow","title":"Injection-Production in Homogenious Media and with J2 plasticity","text":"","category":"section"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Code","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Description u displacement v displacement Pressure\nK = 05 sigma_Y = 03 (Image: ) (Image: ) (Image: )\nK = 0 sigma_Y = 03 (Image: ) (Image: ) (Image: )\nK = 05 sigma_Y = 10 (Image: ) (Image: ) (Image: )","category":"page"},{"location":"coupled/#Injection-Production-in-Heterogenious-Media","page":"Coupled Geomechanics and Single Phase Flow","title":"Injection-Production in Heterogenious Media","text":"","category":"section"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"Code","category":"page"},{"location":"coupled/","page":"Coupled Geomechanics and Single Phase Flow","title":"Coupled Geomechanics and Single Phase Flow","text":"u displacement v displacement Pressure\n(Image: disp_u_flood) (Image: disp_v_flood) (Image: disp_p_flood)","category":"page"},{"location":"2DChip/#Numerical-experiments","page":"Numerical experiments","title":"Numerical experiments","text":"","category":"section"},{"location":"2DChip/","page":"Numerical experiments","title":"Numerical experiments","text":"Results of numerical experiments are summarized in the table below. In each case, we assume that the steady-state velocity and temperature data are measured at a sample of locations, represented by a sample of grid points in the finite element method. We solve the optimization problem to minimize the difference between the measured velocity and the computed velocity and temperature based on the current model parameters. In order to model the uncertainty in the measured data, we include a noise level epsilon when we transform the solution to the forwrad problem into measured data: each data will be multiplied by a random scalar which is uniform on (1-epsilon 1+epsilon).","category":"page"},{"location":"2DChip/","page":"Numerical experiments","title":"Numerical experiments","text":"grid size sample size noise level number of iterations exact diffusivity predicted diffusivity\n200 by 200 10 0 12 2.60475 2.60475000000588","category":"page"},{"location":"nonlinear_viscoelasticity/#Nonlinear-Viscoelasticity","page":"Nonlinear Viscoelasticity","title":"Nonlinear Viscoelasticity","text":"","category":"section"},{"location":"nonlinear_viscoelasticity/","page":"Nonlinear Viscoelasticity","title":"Nonlinear Viscoelasticity","text":"We consider the nonlinear elasticity. In this case, the viscosity depends on the stress. [^nonlinear viscosity]","category":"page"},{"location":"nonlinear_viscoelasticity/","page":"Nonlinear Viscoelasticity","title":"Nonlinear Viscoelasticity","text":"[^nonlinear viscosity]: http://www.mate.tue.nl/~piet/inf/trc/pdf/infmamo1d.pdf","category":"page"},{"location":"nonlinear_viscoelasticity/","page":"Nonlinear Viscoelasticity","title":"Nonlinear Viscoelasticity","text":"(Image: image-20200227153439348)","category":"page"},{"location":"nonlinear_viscoelasticity/","page":"Nonlinear Viscoelasticity","title":"Nonlinear Viscoelasticity","text":"The constitutive equations are  $ \\begin{aligned} \\dot \\varepsilon &= \\dot \\varepsilone + \\dot \\varepsilonv\\\n\\sigma &= s + w = E\\varepsilone + H \\varepsilon\\\n\\dot \\varepsilonv &= \\frac{1}{\\eta(|s|)}s \\end{aligned} $ The high dimensional correspondence is ","category":"page"},{"location":"nonlinear_viscoelasticity/","page":"Nonlinear Viscoelasticity","title":"Nonlinear Viscoelasticity","text":"$","category":"page"},{"location":"nonlinear_viscoelasticity/","page":"Nonlinear Viscoelasticity","title":"Nonlinear Viscoelasticity","text":"k1s{ij} + \\eta(|s|)\\dot s{ij} = k1k2e{ij} + (k1+k2) \\eta\\dot e_{ij}$","category":"page"},{"location":"nonlinear_viscoelasticity/","page":"Nonlinear Viscoelasticity","title":"Nonlinear Viscoelasticity","text":"where","category":"page"},{"location":"nonlinear_viscoelasticity/","page":"Nonlinear Viscoelasticity","title":"Nonlinear Viscoelasticity","text":"e_ij = varepsilon_ij - varepsilon_kk delta_ij qquad sigma_ij = s_ij + Kvarepsilon_kkdelta_ij","category":"page"},{"location":"twophaseflow/#Coupled-Geomechanics-and-Multiphase-Flow","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"","category":"section"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"The main focus of this section is to describe the coupled system of geomechanics and multiphase flow equations. ","category":"page"},{"location":"twophaseflow/#Governing-Equations","page":"Coupled Geomechanics and Multiphase Flow","title":"Governing Equations","text":"","category":"section"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"The governing equation of coupled geomechanics and multiphase flow can be described in terms of solid and fluid equations [geomechanics].","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"[geomechanics]: Wan, Jing. Stabilized finite element methods for coupled geomechanics and multiphase flow. Diss. stanford university, 2003. ","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Equations for the Solid","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"We assume that the solid density is constant, and therefore, the mass balance equation of the deforming porous medium is","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"fracpartialpartial t (1-phi) + nablacdot(1-phi)mathbfv_s = 0 Leftrightarrow fracpartial phipartial t + nabla cdot (mathbfv_s phi) = nabla cdot mathbfv_s tag1","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"The solid velocity mathbfv_s is given by  ","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"mathbfv_s = fracdmathbfudt","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"and therefore we have ","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"nabla cdot mathbfv_s =fracddt nabla  cdot mathbfu = fracpartial varepsilon_volpartial t","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"where the volumetric strain ","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"varepsilon_vol = nabla cdot mathbfu","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"It can be shown that Equation 1 leads to the variation of porosity:","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"boxedphi = 1-(1-phi_0)exp(-varepsilon_vol)  tag2","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Equations for the Fluids","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"The mass balance equations of multiphase multicomponent fluid are given by","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"fracpartial partial t(phi S_irho _i) + nabla  cdot (rho _imathbfv_is) = rho _iq_i quad i = 12 tag3","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"The linear momentum balance equation is given by ","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"mathbfv_is =  - fracKk_ri(S_i)tildemu_i(nabla P_i - grho _inabla Z) quad i=12 tag4","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Here, K is the permeability tensor, but in our case we assume it is a space varying scalar value. k_ri(S_i) is a function of S_i, and typically the higher the saturation, the easier the corresponding phase is to flow. tilde mu_i is the viscosity. Z is the depth cordinate, rho_i is the density, phi is the porosity, q_i is the source, P_i is the fluid pressure and g is the velocity constant. We assume the movement of the solid is slow in this study, therefore Darcy’s law is still valid without acceleration terms.","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"mathbfv_is","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"is the relative velocity of the phase i with respect to mathbfv_s (also called interstitial velocity). ","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Fluid and Mechanics Coupling","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"nabla cdot sigma - nabla left( S_1P_1 + S_2P_2 right) + mathbff = 0tag5","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Here sigma should be understood as the effective stress, which allows us to treat a multiphase porous medium as a mechanically equivalent single‐phase continuum. We use the concept of equivalent pressure in (5)","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"P_E = S_1P_1 + S_2P_2 - int_Omega (S_1P_1 + S_2P_2) mathrmd x","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Constitutive Relation","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"The constitutive relation connects sigma and the displacement mathbfu. For example, the linear elastic relation is expressed as ","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"sigma = lambda mathbfInabla cdot mathbfu + 2mu varepsilon tag6","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Here, the strain is the Cauchy strain","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"varepsilon = frac12(nabla mathbfu + (nabla mathbfu)^T)","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Instead of assuming a linear elasticity model for the geomechanics, we can also model the subsurface solid material by a viscoelasticity model (see here for details). For example, the constitutive relation for the two dimensiona Maxwell material is as follows:","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"dot sigma_ij + fracmueta left( sigma_ij - fracsigma_kk3delta_ij right) = 2mu dot varepsilon_ij + lambda dotvarepsilon_kkdelta_ij","category":"page"},{"location":"twophaseflow/#Numerical-Scheme","page":"Coupled Geomechanics and Multiphase Flow","title":"Numerical Scheme","text":"","category":"section"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"We use an iterative algorithm to solve the coupled equation; namely, we alternatively solve the mechanics equation and flow equation. ","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"(Image: image-20200313003554865)","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Fluid Equation","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"We define the fluid potential ","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Psi_i = P_i - rho_i gZ","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"and the capillary potential ","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Psi_c = Psi_1 - Psi_2 = P_1 -P_2 - (rho_1-rho_2)gZ approx - (rho_1-rho_2)gZ","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Here the capillary pressure P_c = P_1-P_2 is assumed to be small. We define mobilities ","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"m_i(S_i) = frack_ri(S_i)tildemu_i i=12quad m_t = m_1 + m_2","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"We have the following formula from Equations 3-4:","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"-nablacdot (m_tKnabla Psi_2) = nabla cdot(m_1 Knabla Psi_c) - fracpartial phipartial t + q_1 + q_2 tag7","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"We can solve for Psi_2 using a Poisson solver. ","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Next, we have from Equations 3-4","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"phifracpartial S_2partial t + S_2 fracpartialphipartial t + nabla cdot (-K m_2 nabla Psi_2) = q_2 + q_1 fracm_2m_1 tag8","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Note we have an extra term q_1 fracm_2m_1 to account for the assumption of zero capillary pressure. ","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Equation 8 is a nonlinear equation in S_2 (m_2 is defined in terms of S_2=1-S_1) and requires a Newton-Raphson solver. ","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Solid Equation","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Upon solving the fluid equation, we obtain S_1 S_2 Psi_2. We can use Psi_2 to estimate the fluid pressure P_1 and P_2. Use Equations 5 and 6, we solve for mathbfu using","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"int_Omega sigma delta varepsilon mathrmd x + int_Omega (S_1P_1+S_2P_2)delta varepsilon_v mathrmdx = 0 Leftrightarrow int_Omega sigma delta varepsilon mathrmd x - int_Omega (Psi_2 + rho_2 gZ)delta varepsilon_v mathrmdx = 0","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Here varepsilon_v = varepsilon_xx + varepsilon_yy = u_x + u_y. ","category":"page"},{"location":"twophaseflow/#Example","page":"Coupled Geomechanics and Multiphase Flow","title":"Example","text":"","category":"section"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"We simulate  the coupled geomechanics  (both the linear elastic and the viscoelastic material) and two phase flow model. The two models share the same Lamé constants lambda and mu (or equivalently, E and nu), except that the viscoelasticity model has one more viscosity parameter eta. We show an animation of the von Mises stress, displacement (magnified by 50x), the fluid potential for the wet phase (Psi_2), and the saturation. Particularly, we plot the x-direction displacements on the surface. The displacement data will be used as observation in the inverse problem. ","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"The setting is as follows: we consider a layer model for the relative permeability K (the values of the space varying K are known). The blue triangle denotes the injection well, and the orange triangle denotes the production well. The blue triangles denote receivers, where we can collect horizontal displacement–-for example, we can obtain these data from satellite images. ","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"(Image: linear_disp)","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"The two flow phases are the oil and the water (the wet phase), and we use number 1 and 2 to denote them respectively. The computational domain is has 450 depth and 900 width, and it is discretized into 15times 30 uniform squares for both the finite element method (for the mechanics equation) and the finite volume method (for the fluid equation). The simulation has time horizon 01000 and is temporally discretized into 50 intervals. The other parameters for simulations are: rho_1=1053, rho_2=5019, tildemu_1=1, tildemu_2=01, g =98. In the linear elasticity case, we use E=6times 10^9 and nu=035. In the viscoelasticity case, in addition to the Lamé constants, the viscosity parameter eta=67times 10^11. ","category":"page"},{"location":"twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Model Linear Elasticity Viscoelasticity\nDisplacement u (Image: linear_disp) (Image: visco_disp)\nSaturation S_2 (Image: linear_sat) (Image: visco_sat)\nPotential Psi_2 (Image: linear_potential) (Image: visco_potential)\nPressure p (Image: linear_pressure) (Image: visco_pressure)\nVon Mises Stress sigma_mathrmvm (Image: linear_vm) (Image: visco_vm)\nObservation u_mathrmobs (Image: linear_obs) (Image: visco_obs)","category":"page"},{"location":"viscoelasticity/#Viscoelasticity","page":"Viscoelasticity","title":"Viscoelasticity","text":"","category":"section"},{"location":"viscoelasticity/#Viscoelasticity-Theory","page":"Viscoelasticity","title":"Viscoelasticity Theory","text":"","category":"section"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"To describe the viscoelasticity, we need to relate both the viscosity strain epsilon^vp and the elasticity strain epsilon^e to the stress sigma. The latter is given by ","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"boxedepsilon^e= fracsigmaE","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"The constitutive relation of epsilon^vp is given by ","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"boxeddot epsilon^vp = fracsigmaeta","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"We can consider the elasticity strain associated with a spring while the viscoelasticity associated with a dashed pot. Then based on how we combine the spring or the dashed pot, we can have many cases [linearvisco]","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"[linearvisco]: https://academic.csuohio.edu/duffys/LinearVisco.pdf","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"Maxwell Model Kevin Model Standard Linear Model\n(Image: image-20200128113844890) (Image: image-20200128113802583) (Image: image-20200128113907786)\nbeginalignedepsilon = epsilon_1 + epsilon_2epsilon_1 = fracsigmaEdotepsilon_2 = fracsigmaetaendaligned beginalignedsigma = sigma_1 + sigma_2epsilon_1 = fracsigmaEdotepsilon_2 = fracsigmaetaendaligned beginalignedsigma = sigma_1 + sigma_2epsilon = epsilon_1 + epsilon_2sigma = E_1 epsilon_1sigma_1 = E_2epsilon_2sigma_2 = etadotepsilon_2endaligned","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"The most general constitutive equation has the following form ","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"p_0sigma + p_1sigma + p_2 sigma + p_3  sigma + cdots = q_0epsilon + q_1epsilon + q_2 epsilon + q_3  epsilon + cdots","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"For high dimensional case, assume that the bulk modulus is K, then we have [linearvisco2]","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"[linearvisco2]: http://solidmechanics.org/text/Chapter36/Chapter36.htm","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"beginaligned e_ij = epsilon_ij - epsilon_kk delta_ij qquad sigma_ij = s_ij + Kepsilon_kkdelta_ij\n ks_ij + eta dot s_ij = ketadot e_ij  mathrmMaxwell\n s_ij = ke_ij + eta dot e_ij  mathrmKevin\n k_1s_ij + etadot s_ij = k_1k_2e_ij + (k_1+k_2) etadot e_ij  mathrmStandard mathrmLinear\nendaligned","category":"page"},{"location":"viscoelasticity/#Numerical-Example","page":"Viscoelasticity","title":"Numerical Example","text":"","category":"section"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"We consider the two dimensional Maxwell material","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"dot sigma_ij + fracmueta left( sigma_ij - fracsigma_kk3delta_ij right) = 2mu dot epsilon_ij + lambda dotepsilon_kkdelta_ijtag1","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"along with the balance of linear momentum equation","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"mathrmdiv sigma_ijj + rho f_i = rho ddot u_i","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"In the matrix format, the constitutive relation has the form","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"beginbmatrix\ndotsigma_xx \ndotsigma_yy \ndotsigma_xy\nendbmatrix + fracmuetabeginbmatrix\n23  -13  0  \n-13  23  0  \n0  0  1 \nendbmatrixbeginbmatrix\nsigma_xx \nsigma_yy \nsigma_xyendbmatrix = \nbeginbmatrix\n2mu + lambda  lambda  0  \nlambda  2mu + lambda  0  \n0  0  mu \nendbmatrixbeginbmatrix\ndotepsilon_xx \ndotepsilon_yy \ndotgamma_xy\nendbmatrix","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"Here gamma_xy=2epsilon_xy, where epsilon_xy is the shear modulus. Note that when eta=infty, this constitutive relation is exactly the plain strain linear elasticity.  ","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"We use the implicit discretization for Eq. (1) ","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"beginbmatrix\n1 + frac23fracmuDelta teta  -frac13fracmuDelta teta  0\n-frac13fracmuDelta teta  1 + frac23fracmuDelta teta  0 \n0  0  1 + fracmuDelta teta\nendbmatrix\nbeginbmatrix\n\tsigma_xx^n+1\n\tsigma_yy^n+1\n\tsigma_xy^n+1\nendbmatrix = beginbmatrix\n\tsigma_xx^n\n\tsigma_yy^n\n\tsigma_xy^n\nendbmatrix  + beginbmatrix\n\t2mu+lambda  lambda  0\n\tlambda  2mu+lambda  0\n\t0  0  mu \nendbmatrixleft(beginbmatrix\n\tepsilon_xx^n+1\n\tepsilon_yy^n+1\n\tgamma_xy^n+1\nendbmatrix-beginbmatrix\n\tepsilon_xx^n\n\tepsilon_yy^n\n\tgamma_xy^n\nendbmatrixright)","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"or in a simpler form","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"sigma^n+1 = H epsilon^n+1 + S sigma^n  - Hepsilon^n","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"Here S and H are defined as ","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"S = beginbmatrix\n1 + frac23fracmuDelta teta  -frac13fracmuDelta teta  0\n-frac13fracmuDelta teta  1 + frac23fracmuDelta teta  0 \n0  0  1 + fracmuDelta teta\nendbmatrix^-1","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"H = Sbeginbmatrix\n\t2mu+lambda  lambda  0\n\tlambda  2mu+lambda  0\n\t0  0  mu \nendbmatrix","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"The parameters used in the simulation are","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"lambda mu eta Delta t and T Domain and h\n0.0 0.5 1.0 0.025 and 5.0 002times 004 and 0.01","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"Description Linear Elasticity Viscoelasticity\nx displacement (Image: disp_u_linear) (Image: disp_scattered_u)\ny displacement (Image: disp_u_linear) (Image: disp_u_linear)\nVon Mises Stress (Image: disp_s_linear) (Image: disp_s_viscoelasticity)\nStatistics of Middle Right point (Image: linear) (Image: visco)","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"Simulation Code","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"Linear Elasticity","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"using Revise\nusing PoreFlow\nusing PyCall\nusing LinearAlgebra\nusing PyPlot\nusing SparseArrays\nnp = pyimport(\"numpy\")\n\nβ = 1/4; γ = 1/2\na = b = 0.1\nm = 40\nn = 20\nh = 0.01\nNT = 200\nΔt = 5/NT \nbdedge = []\nfor j = 1:n \n  push!(bdedge, [(j-1)*(m+1)+m+1 j*(m+1)+m+1])\nend\nbdedge = vcat(bdedge...)\n\nbdnode = Int64[]\nfor j = 1:n+1\n  push!(bdnode, (j-1)*(m+1)+1)\nend\n\nM = compute_fem_mass_matrix1(m, n, h)\nS = spzeros((m+1)*(n+1), (m+1)*(n+1))\nM = [M S;S M]\n\nH = [1.0 0.0 0.0\n    0.0 1.0 0.0\n    0.0 0.0 0.5]\nK = compute_fem_stiffness_matrix(H, m, n, h)\nC = a*M + b*K # damping matrix \n\nL = M + γ*Δt*C + β*Δt^2*K\nL, Lbd = fem_impose_Dirichlet_boundary_condition(L, bdnode, m, n, h)\n\na = zeros(2(m+1)*(n+1))\nv = zeros(2(m+1)*(n+1))\nd = zeros(2(m+1)*(n+1))\nU = zeros(2(m+1)*(n+1),NT+1)\n\nSigma = zeros(NT+1, 4m*n, 3)\nVarepsilon = zeros(NT+1, 4m*n, 3)\nfor i = 1:NT \n    global a, v, d\n    T = eval_f_on_boundary_edge((x,y)->0.1, bdedge, m, n, h)\n    T = [T zeros(length(T))]\n    rhs = compute_fem_traction_term(T, bdedge, m, n, h)\n    if i*Δt>3.0\n      rhs = zero(rhs)\n    end\n\n    td = d + Δt*v + Δt^2/2*(1-2β)*a \n    tv = v + (1-γ)*Δt*a \n    rhs = rhs - C*tv - K*td\n    rhs[[bdnode; bdnode.+(m+1)*(n+1)]] .= 0.0\n\n    a = L\\rhs \n    d = td + β*Δt^2*a \n    v = tv + γ*Δt*a \n    U[:,i+1] = d\n\n\n    Varepsilon[i+1,:,:] = eval_strain_on_gauss_pts(U[:,i+1], m, n, h)\n    Sigma[i+1,:,:] = Varepsilon[i+1,:,:] * H\nend\n\n\nvisualize_displacement(U, m, n, h; name = \"_linear\", xlim_=[-0.01,0.5], ylim_=[-0.05,0.22])\nvisualize_displacement(U, m, n, h;  name = \"_linear\")\nvisualize_stress(H, U, m, n, h;  name = \"_linear\")\n\n\nclose(\"all\")\nfigure(figsize=(15,5))\nsubplot(1,3,1)\nidx = div(n,2)*(m+1) + m+1\nplot((0:NT)*Δt, U[idx,:])\nxlabel(\"time\")\nylabel(\"x displacement\")\n\nsubplot(1,3,2)\nidx = 4*(div(n,2)*m + m)\nplot((0:NT)*Δt, Sigma[:,idx,1])\nxlabel(\"time\")\nylabel(\"x stress\")\n\nsubplot(1,3,3)\nidx = 4*(div(n,2)*m + m)\nplot((0:NT)*Δt, Varepsilon[:,idx,1])\nxlabel(\"time\")\nylabel(\"x strain\")\nsavefig(\"linear.png\")","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"Viscoelasticity","category":"page"},{"location":"viscoelasticity/","page":"Viscoelasticity","title":"Viscoelasticity","text":"using Revise\nusing PoreFlow\nusing PyCall\nusing LinearAlgebra\nusing PyPlot\nusing SparseArrays\nnp = pyimport(\"numpy\")\n\nλ = 0.0\nμ = 0.5\nη = 1.0\n\nβ = 1/4; γ = 1/2\na = b = 0.1\nm = 40\nn = 20\nh = 0.01\nNT = 200\nΔt = 5/NT \nbdedge = []\nfor j = 1:n \n  push!(bdedge, [(j-1)*(m+1)+m+1 j*(m+1)+m+1])\nend\nbdedge = vcat(bdedge...)\n\nbdnode = Int64[]\nfor j = 1:n+1\n  push!(bdnode, (j-1)*(m+1)+1)\nend\n\nG = [1/Δt+μ/η -μ/3η 0.0\n  -μ/3η 1/Δt+μ/η-μ/3η 0.0\n  0.0 0.0 1/Δt+μ/η]\nS = [2μ/Δt+λ/Δt λ/Δt 0.0\n    λ/Δt 2μ/Δt+λ/Δt 0.0\n    0.0 0.0 μ/Δt]\ninvG = inv(G)\nH = invG*S\n\nM = compute_fem_mass_matrix1(m, n, h)\nZero = spzeros((m+1)*(n+1), (m+1)*(n+1))\nM = [M Zero;Zero M]\n\nK = compute_fem_stiffness_matrix(H, m, n, h)\nC = a*M + b*K # damping matrix \n\nL = M + γ*Δt*C + β*Δt^2*K\nL, Lbd = fem_impose_Dirichlet_boundary_condition(L, bdnode, m, n, h)\n\na = zeros(2(m+1)*(n+1))\nv = zeros(2(m+1)*(n+1))\nd = zeros(2(m+1)*(n+1))\nU = zeros(2(m+1)*(n+1),NT+1)\nSigma = zeros(NT+1, 4m*n, 3)\nVarepsilon = zeros(NT+1, 4m*n, 3)\nfor i = 1:NT \n    global a, v, d\n    T = eval_f_on_boundary_edge((x,y)->0.1, bdedge, m, n, h)\n    T = [T zeros(length(T))]\n    rhs = compute_fem_traction_term(T, bdedge, m, n, h)\n\n    if i*Δt>3.0\n      rhs = zero(rhs)\n    end\n\n    F = compute_strain_energy_term(Sigma[i,:,:]*invG/Δt, m, n, h) - K * U[:,i]\n    # @show norm(compute_strain_energy_term(Sigma[i,:,:]*invG/Δt, m, n, h)), norm(K * U[:,i])\n    rhs -= Δt^2 * F\n\n    td = d + Δt*v + Δt^2/2*(1-2β)*a \n    tv = v + (1-γ)*Δt*a \n    rhs = rhs - C*tv - K*td\n    rhs[[bdnode; bdnode.+(m+1)*(n+1)]] .= 0.0\n\n    a = L\\rhs \n    d = td + β*Δt^2*a \n    v = tv + γ*Δt*a \n    U[:,i+1] = d\n\n    Varepsilon[i+1,:,:] = eval_strain_on_gauss_pts(U[:,i+1], m, n, h)\n    Sigma[i+1,:,:] = Sigma[i,:,:]*invG/Δt +  (Varepsilon[i+1,:,:]-Varepsilon[i,:,:])*(invG*S)\nend\n\n\nvisualize_displacement(U, m, n, h; name = \"_viscoelasticity\", xlim_=[-0.01,0.5], ylim_=[-0.05,0.22])\nvisualize_displacement(U, m, n, h;  name = \"_viscoelasticity\")\nvisualize_stress(H, U, m, n, h;  name = \"_viscoelasticity\")\n\nclose(\"all\")\nfigure(figsize=(15,5))\nsubplot(1,3,1)\nidx = div(n,2)*(m+1) + m+1\nplot((0:NT)*Δt, U[idx,:])\nxlabel(\"time\")\nylabel(\"\\$u_x\\$\")\n\nsubplot(1,3,2)\nidx = 4*(div(n,2)*m + m)\nplot((0:NT)*Δt, Sigma[:,idx,1])\nxlabel(\"time\")\nylabel(\"\\$\\\\sigma_{xx}\\$\")\n\nsubplot(1,3,3)\nidx = 4*(div(n,2)*m + m)\nplot((0:NT)*Δt, Varepsilon[:,idx,1])\nxlabel(\"time\")\nylabel(\"\\$\\\\epsilon_{xx}\\$\")\nsavefig(\"visco.png\")\n","category":"page"},{"location":"earthquake/#Earthquake-Simulation-with-Rate-and-State-Friction","page":"Earthquake Simulation with Rate-and-State Friction","title":"Earthquake Simulation with Rate-and-State Friction","text":"","category":"section"},{"location":"earthquake/","page":"Earthquake Simulation with Rate-and-State Friction","title":"Earthquake Simulation with Rate-and-State Friction","text":"(Image: )","category":"page"},{"location":"earthquake/","page":"Earthquake Simulation with Rate-and-State Friction","title":"Earthquake Simulation with Rate-and-State Friction","text":"Here we study a case of earthquake simulation on strike-slip fault.","category":"page"},{"location":"earthquake/","page":"Earthquake Simulation with Rate-and-State Friction","title":"Earthquake Simulation with Rate-and-State Friction","text":"The fraction on the fault is governed by rate-and-state friction with a aging law:","category":"page"},{"location":"earthquake/","page":"Earthquake Simulation with Rate-and-State Friction","title":"Earthquake Simulation with Rate-and-State Friction","text":"beginaligned\nf(V Psi) = a sinh^-1 left(fracV2V_0 e^Phia right) \ndot Psi = fracbV_0D_c left( f - f_0 + (b-a) ln fracVV_0 right)\nendaligned","category":"page"},{"location":"earthquake/","page":"Earthquake Simulation with Rate-and-State Friction","title":"Earthquake Simulation with Rate-and-State Friction","text":"where V is the fault slip velocity, Psi is a state variable controlling the fricional process, D_c is the state evolution distance, a and b are dimensionless frictional parameters, V_0 is a reference steady sliding velocity, and f_0 is the reference friction coefficient for the reference velocity V_0. ","category":"page"},{"location":"earthquake/","page":"Earthquake Simulation with Rate-and-State Friction","title":"Earthquake Simulation with Rate-and-State Friction","text":"note: Note\na  b: steady state velocity weakening.a  b: steady state velocity strengthening.  ","category":"page"},{"location":"earthquake/","page":"Earthquake Simulation with Rate-and-State Friction","title":"Earthquake Simulation with Rate-and-State Friction","text":"Using quasi-dynamic approximation, the inertial term is approximated by a radiation damping term to account for seismic waves, so force balance on the fault becomes: ","category":"page"},{"location":"earthquake/","page":"Earthquake Simulation with Rate-and-State Friction","title":"Earthquake Simulation with Rate-and-State Friction","text":"tau = sigma_31(x=0) - eta V = f(V Psi) sigma_n","category":"page"},{"location":"earthquake/","page":"Earthquake Simulation with Rate-and-State Friction","title":"Earthquake Simulation with Rate-and-State Friction","text":"where eta V is the radiation damping term, sigma_n is the effective normal stress. We set eta = fracmu2 c_s, where mu is the shear modulus and c_s is the shear wave speed.","category":"page"},{"location":"earthquake/#Earthquake-simulation","page":"Earthquake Simulation with Rate-and-State Friction","title":"Earthquake simulation","text":"","category":"section"},{"location":"earthquake/","page":"Earthquake Simulation with Rate-and-State Friction","title":"Earthquake Simulation with Rate-and-State Friction","text":"(Image: )","category":"page"},{"location":"earthquake/#Gradients","page":"Earthquake Simulation with Rate-and-State Friction","title":"Gradients","text":"","category":"section"},{"location":"inverse/#Inverse-Modeling-for-Poroelasticity-Models","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"","category":"section"},{"location":"inverse/","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"We have coupled geomechanics and single phase flow in Coupled Geomechanics and Single Phase Flow (poroelasticity). The governing equation for poroelasticity model is ","category":"page"},{"location":"inverse/","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"beginaligned\nmathrmdivsigma(u) - b nabla p = 0\nfrac1M fracpartial ppartial t + bfracpartial varepsilon_v(u)partial t - nablacdotleft(frackB_fmunabla pright) = f(xt)\nsigma(u) = Hvarepsilon(u)\nendaligned","category":"page"},{"location":"inverse/","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"We impose no-flow boundary condition on left, right, and bottom sides for p, i.e., nabla p cdot n=0, and a zero pressure boundary condition on the top side, i.e., p=0. Additionally, we assume a fixed Dirichlet boundary condition for u on the left and right side, and traction free boundary conditions for u on all other three sides, i.e., sigma(u)n = 0. We show the data in the following. ","category":"page"},{"location":"inverse/","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"Displacement Pressure Von Mises Stress\n(Image: ) (Image: ) (Image: )","category":"page"},{"location":"inverse/","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"We estimate the elasticity tensor H by solving a minimization problem ","category":"page"},{"location":"inverse/","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"min_H sum_iinmathcalI (u^mathrmobs_i-u_i)^2","category":"page"},{"location":"inverse/","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"where mathcalI is the index set for horizontal displacement  on the top side, u^mathrmobs_i is the corresponding observation. ","category":"page"},{"location":"inverse/","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"(Image: )","category":"page"},{"location":"inverse/","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"Initial Guess Estimated H Reference H\nbeginbmatrix1    0  0  0  1   0  0      0      1endbmatrix beginbmatrix1604938  0864197  -00 0864197  1604938  -00 -00  -00  0370371 endbmatrix beginbmatrix1604938  0864198  00 0864198  1604938  00 00  00  037037 endbmatrix","category":"page"},{"location":"inverse/","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"To test the robustness of the method, we add noise to our observations","category":"page"},{"location":"inverse/","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"(u_mathrmobs)_i = u_i (1+sigma varepsilon_i)","category":"page"},{"location":"inverse/","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"where varepsilon_i are i.i.d. Gaussian noise with unit standard deviations and zero means. ","category":"page"},{"location":"inverse/","page":"Inverse Modeling for Poroelasticity Models","title":"Inverse Modeling for Poroelasticity Models","text":"using Revise\nusing PoreFlow\nusing PyCall\nusing LinearAlgebra\nusing ADCME\nusing MAT\nusing PyPlot\nusing ADCMEKit\n\nnp = pyimport(\"numpy\")\n\n# Domain information \nNT = 50\nΔt = 1/NT\nn = 15\nm = 2*n \nh = 1. ./ n\nbdnode = bcnode(\"left | right\", m, n, h)\nbdedge = bcedge(\"upper\", m, n, h) # fixed pressure on the top \n\nb = 1.0\nE = 1.0\nν = 0.35\nHref = E/(1+ν)/(1-2ν) * [1-ν ν 0.0;ν 1-ν 0.0;0.0 0.0 (1-2ν)/2]\n\nH = spd(Variable(diagm(0=>ones(3))))\n\nQ, Prhs = compute_fvm_tpfa_matrix(ones(4*m*n), bdedge, zeros(size(bdedge,1)),m, n, h)\nQ = SparseTensor(Q)\nK = compute_fem_stiffness_matrix(H, m, n, h)\nL = SparseTensor(compute_interaction_matrix(m, n, h))\nM = SparseTensor(compute_fvm_mass_matrix(m, n, h))\nA = [K -b*L'\nb*L/Δt 1/Δt*M-Q]\nA, Abd = fem_impose_coupled_Dirichlet_boundary_condition(A, bdnode, m, n, h)\nU = zeros(m*n+2(m+1)*(n+1), NT+1)\nx = Float64[]; y = Float64[]\nfor j = 1:n+1\n    for i = 1:m+1\n        push!(x, (i-1)*h)\n        push!(y, (j-1)*h)\n    end\nend\n    \n# injection and production\ninjection = (div(n,2)-1)*m + 3\nproduction = (div(n,2)-1)*m + m-3\n\n\nfunction get_disp(SOURCE_SCALE)\n    \n    function condition(i, tas...)\n        i<=NT\n    end\n\n    function body(i, tas...)\n        ta_u, ta_ε, ta_σ = tas\n        u = read(ta_u, i)\n        σ0 = read(ta_σ, i)\n        ε0 = read(ta_ε, i)\n\n        g = -ε0*H\n        rhs1 = compute_strain_energy_term(g, m, n, h)\n\n        rhs1 = scatter_update(rhs1, [bdnode; bdnode .+ (m+1)*(n+1)], zeros(2length(bdnode)))\n        rhs2 = zeros(m*n)\n        rhs2[injection] += SOURCE_SCALE * h^2\n        rhs2[production] -= SOURCE_SCALE * h^2\n        rhs2 = rhs2 + b*L*u[1:2(m+1)*(n+1)]/Δt + \n                M * u[2(m+1)*(n+1)+1:end]/Δt + Prhs\n        \n        rhs = [rhs1;rhs2]\n        o = A\\rhs \n\n        ε = eval_strain_on_gauss_pts(o, m, n, h)\n        σ = ε*H\n\n        ta_u = write(ta_u, i+1, o)\n        ta_ε = write(ta_ε, i+1, ε)\n        ta_σ = write(ta_σ, i+1, σ)\n        i+1, ta_u, ta_ε, ta_σ\n    end\n\n    i = constant(1, dtype=Int32)\n    ta_u = TensorArray(NT+1); ta_u = write(ta_u, 1, constant(zeros(2(m+1)*(n+1)+m*n)))\n    ta_ε = TensorArray(NT+1); ta_ε = write(ta_ε, 1, constant(zeros(4*m*n, 3)))\n    ta_σ = TensorArray(NT+1); ta_σ = write(ta_σ, 1, constant(zeros(4*m*n, 3)))\n    _, u_out, ε_out, σ_out = while_loop(condition, body, [i, ta_u, ta_ε, ta_σ])\n    u_out = stack(u_out)\n    u_out.set_shape((NT+1, size(u_out,2)))\n    σ_out = stack(σ_out)\n    ε_out = stack(ε_out)\n\n    upper_idx = Int64[]\n    for i = 1:m+1\n        push!(upper_idx, (div(n,3)-1)*(m+1)+i)\n        push!(upper_idx, (div(n,3)-1)*(m+1)+i + (m+1)*(n+1))\n    end\n    for i = 1:m \n        push!(upper_idx, (div(n,3)-1)*m+i+2(m+1)*(n+1))\n    end\n\n    u_out, σ_out\nend\n\nU, S = get_disp(500.0)\n\nuobs = matread(\"data.mat\")[\"U\"][:, 1:m+1]\nupred = set_shape(U,(NT+1,2(m+1)*(n+1)+m*n))[:, 1:m+1]\nloss = sum((uobs-upred)^2)\nerr = norm(H-Href)/norm(Href)\nsess = Session()\ninit(sess)\n@show run(sess, [loss, err])\nloss_ = BFGS!(sess, loss)","category":"page"},{"location":"staticelasticity/#Static-Linear-Elasticity","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"","category":"section"},{"location":"staticelasticity/","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"The governing equation for static linear elasticity is","category":"page"},{"location":"staticelasticity/","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"beginaligned\nmathrmdiv sigma(u) = f(x)  xin Omega \nsigma(u) = Cvarepsilon(u) \nu(x) = u_0(x)  xin Gamma_u\nsigma(x) n(x) = t(x)  xin Gamma_n\nendaligned","category":"page"},{"location":"staticelasticity/","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"Here varepsilon(u) = frac12(nabla u + (nabla u)^T) is the Cauchy tensor, Gamma_u cup Gamma_n = Omega, Gamma_u cap Gamma_n = emptyset. The weak formulation is: finding u such that ","category":"page"},{"location":"staticelasticity/","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"int_Omega delta varepsilon(u)  C varepsilon(u)mathrmd x = int_Gamma_n tcdotdelta u mathrmds - int_Omega fcdot delta u mathrmdx","category":"page"},{"location":"staticelasticity/","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"The codes for conducting linear elasticity problem can be here.","category":"page"},{"location":"staticelasticity/","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"To verify our program, we first consider a parameter inverse problem where E is a constant parameter that does not depend on mathbfx. Additionally, we also let nu be an unknown parameter. We generate the displacement data using E = 15, nu = 03. In the inverse problem, all displacement data are used to learn the parameters E and nu. The following table shows the learned parameters E and nu. We can see that our algorithm is quite efficient: after around 11 iterations, we reduce the absolute error to an order of 10^-12 and 10^-11 for E and nu, respectively.  ","category":"page"},{"location":"staticelasticity/","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"Parameter Initial Guess Learned Exact Absolute Error\nE 1.0 1.5 1.5 604times 10^-12\nnu 0.0 0.3 0.3 178times 10^-11","category":"page"},{"location":"staticelasticity/","page":"Static Linear Elasticity","title":"Static Linear Elasticity","text":"Next we consider a spatially-varying field E(mathbfx) and fix nu=03. We approaximate E(mathbfx) using a deep neural network. The results are shown in the following figure. As a comparison, the result for representing E(mathbfx) as a discrete vector of trainable variables is also shown. We can see that the DNN approach provides a much better result that the discretization approac (Image: )","category":"page"},{"location":"dev_unstructured/#Adding-Custom-Operators-for-Unstructured-Meshes","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"","category":"section"},{"location":"dev_unstructured/#Workflow","page":"Adding Custom Operators for Unstructured Meshes","title":"Workflow","text":"","category":"section"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"This tutorial describes how to develop custom operators for unstructured meshes. ","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"PoreFlow uses MFEM as the backend for assembling finite element matrices. However, users, as well as custom operator developers, do not need to know how to use MFEM. PoreFlow has provided an easier interface to essential data structures for assembling finite element matrices. The data structure can be assessed in C++ (see Mesh) and the header files are located in deps/MFEM/Common.h. As the structured mesh utilties, we do not expose the APIs for Julia users, and therefore if some operators are lacking, users must modify the source codes of PoreFlow. ","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"The basic workflow is to go into deps/MFEM directory. Then ","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"Make a new directory to add all source codes related to your custom operator.\nGenerate templated files using customop. \nIn your source code, do remember to include ../Common.h, which exposes mmesh for all necessary data structures. \nAdd your source code file names to deps/MFEM/CMakeLists.txt.\nRecompile PoreFlow or run ninja in deps/MFEM/build. \nTest your code. Note you need to replace the library path in load_op_and_grad by PoreFlow.libmfem in order to share the same mmesh throughout the session. ","category":"page"},{"location":"dev_unstructured/#Assembling-Matrices-and-Vectors","page":"Adding Custom Operators for Unstructured Meshes","title":"Assembling Matrices and Vectors","text":"","category":"section"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"The main approach for assembling matrices and vectors in finite element methods is to loop over each element (triangles in our case), and computes contributions to the corresponding local degrees of freedom (DOF). For example, for P1 (linear) element, the local DOFs are three vertices; for P2 (quadratic) element, the local DOFs are both vertices and edges. ","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"(Image: )","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"Each finite element (triangle) is represented by NNFEM_Element in the C++ shared library of PoreFlow. The local DOFs are mapped to global DOFs via dof array, which is a 6-dimensional array. For P1 element, the last three components are redundant. For P2 elements, the global indices are arranged in a way such that all edge indices are after the nodal indices. The mapping between edge indices and vertices can be found in edges in the structure Mesh. ","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"When we loop over each element, each DOF is associated with a basis function phi_i(x y), such that phi_i(x_j y_j) = delta_ij, where (x_j y_j) is the nodes shown in the above plots. For convenience, an element (NNFEM_Element) provides the values of ","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"phi_i(tilde x_k tilde y_k) partial_x phi_i(tilde x_k tilde y_k) partial_y phi_i(tilde x_k tilde y_k) tildephi_i(tilde x_k tilde y_k) tag1","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"Here (tilde x_k tilde y_k) is the k-th Guass points for the current element, and tilde phi_i is the basis function for P1 element. The data are stored in h, hx, hy, hs respectively. Additionally, the element also contains a weight vector w that stores the quadrature weights (adjusted by triangle areas). Note Equation 1 are all physical shape functions. Therefore, we can conveniently compute many quantities. For example, if we want to compute int_A nabla u cdot nabla v dx dy on the element A (u is the trial function, and v is the test function), int_A nabla phi_i cdot nabla phi_j dxdy can be expressed as ","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"double s = 0.0;\nfor (int r = 0; r < elem->ngauss; r++){\n    s += ( elem->hx(i, r) * elem->hx(j, r) + elem->hy(i, r) * elem->hy(j, r)) * elem->w(r);\n}","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"The corresponding indices in the global sparse matrix is ","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"int I = elem->dof[i];\nint J = elem->dof[j];`","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"For the quadratic element, it has 6 DOFs for each element","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"(Image: )","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"Here x_ij = x_i - x_j, y_ij = y_i - y_j. We can use this information to assemble linear or bilinear forms. For example, in the course of implementing compute_fem_traction_term1, we can first extract quadrature rules using ","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"IntegrationRules rule_;\nIntegrationRule rule = rule_.Get(Element::Type::SEGMENT, order);\nconst IntegrationPoint &ip = rule.IntPoint(i)","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"Then we have access to ip.weight and ip.x. ","category":"page"},{"location":"dev_unstructured/#Verifying-Implementation-against-FEniCS","page":"Adding Custom Operators for Unstructured Meshes","title":"Verifying Implementation against FEniCS","text":"","category":"section"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"To test unstructured meshes, we can compare the results with fenics. We can use the same mesh:","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"mesh = Mesh(8, 8, 1/8)","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"The corresponding Python code is","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"mesh = UnitSquareMesh(8, 8, \"left\")","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"FEniCS PoreFlow\n(Image: ) (Image: )","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"As an example, in deps/MFEM/ComputeInteractionTerm, we developed a custom operator to compute int_Omega p beginbmatrixfracpartial upartial x fracpartial upartial yendbmatrix dx We can compute the values using FEniCS","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"from __future__ import print_function\nfrom fenics import *\nimport matplotlib.pyplot as plt\nimport numpy as np \n\n# Create mesh and define function space\nmesh = UnitSquareMesh(8, 8, \"left\")\nP = FunctionSpace(mesh, 'DG', 0)\nU = FunctionSpace(mesh, \"CG\", 1)\n\n# Define variational problem\nu = TrialFunction(U)\np = TestFunction(P)\na = dot(p, u.dx(0))*dx\nb = dot(p, u.dx(1))*dx\n\n\nA = assemble(a).array().T\nx = np.random.random((A.shape[1],))\nf = np.dot(A, x)\nA1 = assemble(b).array().T\nf1 = np.dot(A1, x)\nDofToVert = vertex_to_dof_map(u.function_space())\n\nnp.savetxt(\"fenics/f.txt\", np.concatenate([f[DofToVert], f1[DofToVert]]))\nnp.savetxt(\"fenics/x.txt\", x)","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"The corresponding Julia code is ","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"using ADCME\nusing LinearAlgebra\nusing PoreFlow\nusing DelimitedFiles\n\np = readdlm(\"fenics/x.txt\")[:]\nf = readdlm(\"fenics/f.txt\")[:]\n\nmesh = Mesh(8, 8, 1. /8)\nf0 = compute_interaction_term(p, mesh)\nsess = Session(); init(sess)\nf1 = run(sess, f0)\n\n@show norm(f - f1)","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"We get the result:","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"norm(f - f1) = 3.0847790632031627e-16","category":"page"},{"location":"dev_unstructured/#Install-FEniCS","page":"Adding Custom Operators for Unstructured Meshes","title":"Install FEniCS","text":"","category":"section"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"It is recommend to install FEniCS by creating a new conda environment. For example, on a Linux server, you can do ","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"conda create -n fenicsproject -c conda-forge fenics\nsource activate fenicsproject","category":"page"},{"location":"dev_unstructured/","page":"Adding Custom Operators for Unstructured Meshes","title":"Adding Custom Operators for Unstructured Meshes","text":"Please refer to built-in PoreFlow custom operators to see how FEniCS is used for validation. ","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Data-Structures","page":"API","title":"Data Structures","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"PoreData\nMesh","category":"page"},{"location":"api/#PoreFlow.PoreData","page":"API","title":"PoreFlow.PoreData","text":"PoreData is a collection of physical parameters for coupled geomechanics and flow simulation\n\nM: Biot modulus\nb: Biot coefficient\nρb: Bulk density\nρf: Fluid density\nkp: Permeability\nE: Young modulus\nν: Poisson ratio\nμ: Fluid viscosity\nPi: Initial pressure\nBf: formation volume, B_f=fracrho_f0rho_f\ng: Gravity acceleration\n\n\n\n\n\n","category":"type"},{"location":"api/#PoreFlow.Mesh","page":"API","title":"PoreFlow.Mesh","text":"Mesh holds data structures for an unstructured mesh. \n\nnodes: a n_v times 2 coordinates array\nedges: a n_textedge times 2 integer array for edges \nelems: a n_e times 3 connectivity matrix, 1-based. \nnnode, nedge, nelem: number of nodes, edges, and elements \nndof: total number of degrees of freedoms \nconn: connectivity matrix, nelems × 3 or nelems × 6, depending on whether a linear element or a quadratic element is used. \nlorder: order of quadrature rule for line integrals \nelem_type: type of the element (P1, P2 or BDM1)\n\nInternally, the mesh mmesh is represented by a collection of NNFEM_Element object with some other attributes\n\nint nelem; // total number of elements\nint nnode; // total number of nodes\nint ngauss; // total number of Gauss points\nint ndof; // total number of dofs\nint order; // quadrature integration order\nint degree; // Degree of Polynomials, 1 - P1 element, 2 - P2 element \nint elem_ndof; // 3 for P1, 6 for P2\nMatrixXd GaussPts; // coordinates of Gauss quadrature points\nstd::vector<NNFEM_Element*> elements; // array of elements\n\nThe NNFEM_Element has data\n\nVectorXd h;   // basis functions, elem_ndof × ng  \nVectorXd hx;  // x-directional basis functions, elem_ndof × ng  \nVectorXd hy;  // y-directional basis functions, elem_ndof × ng  \nMatrixXd hs;  // shape functions for linear element, 3 × ng\nVectorXd w;   // weight vectors, ng  \ndouble area;  // area of the triangle\nMatrixXd coord; // coordinates array, 3 × 2\nint nnode; // total number of nodes \nint ngauss; // total number of Gauss points\nint dof[6]; // global indices for both nodes and edges, note that edge indices are offset by `nv`\nint node[3]; // global indices of local vertices\nint edge[3]; // global indices of local edges\nint ndof; // DOF, 3 for P1 element, 6 for P2 element \n\n\n\n\n\n","category":"type"},{"location":"api/#Matrix-Assembling-Functions","page":"API","title":"Matrix Assembling Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"compute_fem_stiffness_matrix\ncompute_interaction_matrix\ncompute_fvm_tpfa_matrix\ncompute_fem_mass_matrix\ncompute_fvm_mass_matrix\ncompute_fem_mass_matrix1\ncompute_fem_stiffness_matrix1\ncompute_fvm_advection_matrix\ncompute_fem_laplace_matrix1\ncompute_fem_laplace_matrix\ncompute_fem_advection_matrix1\ncompute_fem_bdm_mass_matrix\ncompute_fem_bdm_mass_matrix1\ncompute_fem_bdm_div_matrix\ncompute_fem_bdm_div_matrix1\ncompute_fem_bdm_skew_matrix","category":"page"},{"location":"api/#PoreFlow.compute_fem_stiffness_matrix","page":"API","title":"PoreFlow.compute_fem_stiffness_matrix","text":"compute_fem_stiffness_matrix(K::Array{Float64,2}, m::Int64, n::Int64, h::Float64)\n\nComputes the term \n\nint_Adelta varepsilon sigmamathrmdx = int_A u_AB^TKBdelta u_Amathrmdx\n\nwhere the constitutive relation is given by \n\nbeginbmatrixsigma_xxsigma_yysigma_xyendbmatrix = K beginbmatrixvarepsilon_xxvarepsilon_yy2varepsilon_xyendbmatrix\n\n\n\n\n\ncompute_fem_stiffness_matrix(hmat::PyObject,m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel. hmat has one of the following sizes \n\n3times 3\n4mn times 3 times 3\n\n\n\n\n\ncompute_fem_stiffness_matrix(kappa::PyObject, mesh::Mesh)\ncompute_fem_stiffness_matrix(kappa::Array{Float64, 3}, mesh::Mesh)\ncompute_fem_stiffness_matrix(kappa::Array{Float64, 2}, mesh::Mesh)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_interaction_matrix","page":"API","title":"PoreFlow.compute_interaction_matrix","text":"compute_interaction_matrix(m::Int64, n::Int64, h::Float64)\n\nComputes the interaction term \n\nint_A p delta varepsilon_vmathrmdx = int_A p 110B^Tdelta u_Amathrmdx\n\nHere varepsilon_v = texttr varepsilon = textdiv mathbfu.\n\nThe output is a mn times 2(m+1)(n+1) matrix. \n\n\n\n\n\ncompute_interaction_matrix(mesh::Mesh)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fvm_tpfa_matrix","page":"API","title":"PoreFlow.compute_fvm_tpfa_matrix","text":"compute_fvm_tpfa_matrix(m::Int64, n::Int64, h::Float64)\n\nComputes the term with two-point flux approximation \n\nint_A_i Delta p mathrmdx = sum_j=1^n_mathrmfaces (p_j-p_i)\n\n(Image: )\n\nwarning: Warning\nNo flow boundary condition is assumed. \n\n\n\n\n\ncompute_fvm_tpfa_matrix(K::Array{Float64}, m::Int64, n::Int64, h::Float64)\n\nComputes the term with two-point flux approximation with distinct permeability at each cell\n\nint_A_i K_i Delta p mathrmdx = K_isum_j=1^n_mathrmfaces (p_j-p_i)\n\nNote that K is a length mn vector, representing values per cell.\n\n\n\n\n\ncompute_fvm_tpfa_matrix(K::Array{Float64}, bc::Array{Int64,2}, pval::Array{Float64,1}, m::Int64, n::Int64, h::Float64)\n\nComputes the term with two-point flux approximation with distinct permeability at each cell\n\nint_A_i K_i Delta p mathrmdx = K_isum_j=1^n_mathrmfaces (p_j-p_i)\n\nHere K is a length mn vector, representing values per cell.\n\nAdditionally, Dirichlet boundary conditions are imposed on the boundary edges bc (a Ntimes 2 integer matrix),  i.e., the i-th edge has value pval. The ghost node method is used for imposing the Dirichlet boundary condition.  The other boundaries are no-blow boundaries, i.e., fracpartial Tpartial n = 0.  The function outputs a length mn vector and mntimes mn matrix M. \n\nint_A_i K_i Delta p mathrmdx = f_i + M_imathbfp\n\nReturns both the sparse matrix A and the right hand side rhs.\n\ninfo: Info\nK can also be missing, in which case K is treated as a all-one vector. \n\n\n\n\n\ncompute_fvm_tpfa_matrix(K::PyObject, bc::Array{Int64,2}, pval::Union{Array{Float64},PyObject}, m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel for compute_fvm_tpfa_matrix. \n\n\n\n\n\ncompute_fvm_tpfa_matrix(K::PyObject, m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel for compute_fvm_tpfa_matrix. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_mass_matrix","page":"API","title":"PoreFlow.compute_fem_mass_matrix","text":"compute_fem_mass_matrix(m::Int64, n::Int64, h::Float64)\n\nComputes the finite element mass matrix \n\nint_Omega u delta u mathrmdx\n\nThe matrix size is 2(m+1)(n+1) times 2(m+1)(n+1).\n\n\n\n\n\ncompute_fem_mass_matrix(ρ::PyObject,m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel. rho is a vector of length 4mn or 8mn\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fvm_mass_matrix","page":"API","title":"PoreFlow.compute_fvm_mass_matrix","text":"compute_fvm_mass_matrix(m::Int64, n::Int64, h::Float64)\n\nReturns the FVM mass matrix \n\nint_A_i p_i mathrmdx = h^2 p_i \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_mass_matrix1","page":"API","title":"PoreFlow.compute_fem_mass_matrix1","text":"compute_fem_mass_matrix1(ρ::Array{Float64,1}, m::Int64, n::Int64, h::Float64)\n\nComputes the mass matrix for a scalar value u\n\nint_A rho u delta u mathrmd x\n\nThe output is a (m+1)(n+1)times (m+1)(n+1) sparse matrix. \n\n\n\n\n\ncompute_fem_mass_matrix1(m::Int64, n::Int64, h::Float64)\n\nComputes the mass matrix for a scalar value u\n\nint_A u delta u mathrmd x\n\nThe output is a (m+1)(n+1)times (m+1)(n+1) sparse matrix. \n\n\n\n\n\ncompute_fem_mass_matrix1(ρ::PyObject,m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel.\n\n\n\n\n\ncompute_fem_mass_matrix1(rho::Union{PyObject, Array{Float64, 1}}, mesh::Mesh)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_stiffness_matrix1","page":"API","title":"PoreFlow.compute_fem_stiffness_matrix1","text":"compute_fem_stiffness_matrix1(K::Array{Float64,2}, m::Int64, n::Int64, h::Float64)\n\nComputes the term \n\nint_A (K nabla u) cdot nabla delta u mathrmdx = int_A u_A B^T K B delta u_Amathrmdx\n\nReturns a (m+1)times (n+1) matrix\n\n\n\n\n\ncompute_fem_stiffness_matrix1(hmat::PyObject, m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel for computing the stiffness matrix.  Two possible shapes for hmat are supported: \n\n4mn times 2times 2\n2 times 2\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fvm_advection_matrix","page":"API","title":"PoreFlow.compute_fvm_advection_matrix","text":"compute_fvm_advection_matrix(v::Union{PyObject, Array{Float64, 2}},\n    bc::Array{Int64, 2},bcval::Union{PyObject, Array{Float64}},m::Int64,n::Int64,h::Float64)\n\nComputes the advection matrix for use in the implicit scheme \n\nint_A mathbfv cdot nabla u dx \n\nHere v is a 2mn vector, where the first mn entries corresponds to the first dimension of   mathbfv and the remaining mn entries corresponds to the second dimension. \n\nIt returns a matrix mntimes mn matrix K and an auxilliary term mathbff due to boundary conditions.\n\nint_Omega mathbfv cdot nabla u dx = K mathbfu + mathbff\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_laplace_matrix1","page":"API","title":"PoreFlow.compute_fem_laplace_matrix1","text":"compute_fem_laplace_matrix1(K::Array{Float64, 1}, m::Int64, n::Int64, h::Float64)\n\nComputes the coefficient matrix for \n\nint_Omega K nabla u cdot nabla (delta u)  dx \n\nHere Kin mathbfR^2times 2, u is a scalar variable, and K is a 4mn times 2 times 2 matrix. \n\nReturns a (m+1)(n+1)times (m+1)(n+1) sparse matrix. \n\n\n\n\n\ncompute_fem_laplace_matrix1(K::Array{Float64, 2}, m::Int64, n::Int64, h::Float64)\n\nK is duplicated on each Gauss point. \n\n\n\n\n\ncompute_fem_laplace_matrix1(K::Array{Float64, 1}, m::Int64, n::Int64, h::Float64)\n\nComputes the coefficient matrix for \n\nint_Omega Knabla u cdot nabla (delta u)  dx \n\nHere K is a vector with length 4mn (defined on Gauss points). \n\nReturns a (m+1)(n+1)times (m+1)(n+1) sparse matrix. \n\n\n\n\n\ncompute_fem_laplace_matrix1(m::Int64, n::Int64, h::Float64)\n\nComputes the coefficient matrix for \n\nint_Omega nabla u cdot nabla (delta u)  dx \n\nReturns a (m+1)(n+1)times (m+1)(n+1) sparse matrix. \n\n\n\n\n\ncompute_fem_laplace_matrix1(K::PyObject, m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel. Only Kin mathbbR^4mn is supported.\n\n\n\n\n\ncompute_fem_laplace_matrix1(kappa::PyObject, mesh::Mesh)\n\n\n\n\n\ncompute_fem_laplace_matrix1(kappa::Array{Float64,1}, mesh::Mesh)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_laplace_matrix","page":"API","title":"PoreFlow.compute_fem_laplace_matrix","text":"compute_fem_laplace_matrix(m::Int64, n::Int64, h::Float64)\n\nComputes the coefficient matrix for \n\nint_Omega nabla mathbfu cdot nabla (delta mathbfu)  dx \n\nHere\n\nmathbfu  = beginbmatrix u  v endbmatrix\n\nand \n\nnabla mathbfu = beginbmatrixu_x  u_y  v_x  v_y endbmatrix\n\nReturns a 2(m+1)(n+1)times 2(m+1)(n+1) sparse matrix. \n\n\n\n\n\ncompute_fem_laplace_matrix(K::Array{Float64, 1}, m::Int64, n::Int64, h::Float64)\n\nComputes the coefficient matrix for \n\nint_Omega K nabla mathbfu cdot nabla (delta mathbfu)  dx \n\nHere K is a scalar defined on Gauss points. K is a vector of length 4mn\n\n\n\n\n\ncompute_fem_laplace_matrix(kappa::Union{PyObject, Array{Float64, 1}}, mesh::Mesh)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_advection_matrix1","page":"API","title":"PoreFlow.compute_fem_advection_matrix1","text":"compute_fem_advection_matrix1(u0::PyObject,v0::PyObject,m::Int64,n::Int64,h::Float64)\n\nComputes the advection term for a scalar function u defined on an FEM grid. The weak form is \n\nint_Omega (mathbfu_0 cdot nabla u)  delta u  dmathbfx = int_Omega left(u_0 fracpartial upartial x delta u + v_0 fracpartial upartial y  delta uright) dmathbfx\n\nHere u_0 and v_0 are both vectors of length 4mn. \n\nReturns a sparse matrix of size (m+1)(n+1)times (m+1)(n+1)\n\n\n\n\n\ncompute_fem_advection_matrix1(u::Union{Array{Float64,1}, PyObject},v::Union{Array{Float64,1}, PyObject}, mesh::Mesh)\ncompute_fem_advection_matrix1(u::Array{Float64,1}, v::Array{Float64,1}, mesh::Mesh)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_bdm_mass_matrix","page":"API","title":"PoreFlow.compute_fem_bdm_mass_matrix","text":"compute_fem_bdm_mass_matrix(alpha::Union{Array{Float64,1}, PyObject},beta::Union{Array{Float64,1}, PyObject}, mmesh::Mesh)\n\nComputes \n\nint_Omega Asigma  delta tau dx\n\nHere \n\nAsigma = alpha sigma + beta texttr sigma I\n\nHere sigma and tau are both fourth-order tensors. The output is a  4mmesh.nedge × 4mmesh.nedge matrix.\n\n\n\n\n\ncompute_fem_bdm_mass_matrix(mmesh::Mesh)\n\nSame as compute_fem_bdm_mass_matrix\n\n\n\n\n\ncompute_fem_bdm_mass_matrix(alpha::Array{Float64,1},beta::Array{Float64,1}, mmesh::Mesh)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_bdm_mass_matrix1","page":"API","title":"PoreFlow.compute_fem_bdm_mass_matrix1","text":"compute_fem_bdm_mass_matrix1(alpha::Array{Float64,1}, mmesh::Mesh)\n\nComputes \n\nint_Omega alphasigma cdot delta tau dx\n\nHere alpha is a scalar, and sigma and delta tau are second order tensors. \n\nThe returned value is a 2mmesh.nedge × 2mmesh.nedge matrix. \n\n\n\n\n\ncompute_fem_bdm_mass_matrix1(mmesh::Mesh)\n\nSame as compute_fem_bdm_mass_matrix1, except that alphaequiv 1\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_bdm_div_matrix","page":"API","title":"PoreFlow.compute_fem_bdm_div_matrix","text":"compute_fem_bdm_div_matrix(mmesh::Mesh)\n\nComputes the coefficient matrix for \n\nint_Omega textdiv tau delta u dx\n\nHere tau in mathbbR^2times 2 is a fourth-order tensor (not necessarily symmetric). mmesh  uses the BDM1 finite element. The output is a 2mmesh.nelem × 4mmesh.nedge matrix. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_bdm_div_matrix1","page":"API","title":"PoreFlow.compute_fem_bdm_div_matrix1","text":"compute_fem_bdm_div_matrix1(mmesh::Mesh)\n\nComputes the coefficient matrix for \n\nint_Omega textdiv tau delta u dx\n\nHere tau in mathbbR^2 is a second-order tensor (not necessarily symmetric). mmesh  uses the BDM1 finite element. The output is a mmesh.nelem × 2mmesh.nedge matrix. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_bdm_skew_matrix","page":"API","title":"PoreFlow.compute_fem_bdm_skew_matrix","text":"compute_fem_bdm_skew_matrix(mmesh::Mesh)\n\nComputes  int_Omega sigma  v dx where \n\nv = beginbmatrix0  rho -rho  0 endbmatrix\n\nHere sigma is a fourth-order tensor. \n\nThe returned value is a mmesh.nelem × 4mmesh.nedge matrix. \n\n\n\n\n\n","category":"function"},{"location":"api/#Vector-Assembling-Functions","page":"API","title":"Vector Assembling Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"compute_fem_source_term\ncompute_fvm_source_term\ncompute_fvm_mechanics_term\ncompute_fem_normal_traction_term\ncompute_fem_traction_term\ncompute_von_mises_stress_term\ncompute_fem_source_term1\ncompute_fem_flux_term1\ncompute_strain_energy_term\ncompute_strain_energy_term1\ncompute_fem_viscoelasticity_strain_energy_term\ncompute_fvm_advection_term\ncompute_interaction_term\ncompute_fem_laplace_term1\ncompute_fem_traction_term1","category":"page"},{"location":"api/#PoreFlow.compute_fem_source_term","page":"API","title":"PoreFlow.compute_fem_source_term","text":"compute_fem_source_term(f1::Array{Float64}, f2::Array{Float64},\nm::Int64, n::Int64, h::Float64)\n\nComputes the term \n\nint_Omega mathbffcdotdelta u mathrmdx\n\nReturns a 2(m+1)(n+1) vector. \n\n\n\n\n\ncompute_fem_source_term(f1::PyObject, f2::PyObject,\nm::Int64, n::Int64, h::Float64)\n\nA differentiable kernel.\n\n\n\n\n\ncompute_fem_source_term(f1::Union{PyObject,Array{Float64,2}}, f2::Union{PyObject,Array{Float64,2}}, mesh::Mesh)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fvm_source_term","page":"API","title":"PoreFlow.compute_fvm_source_term","text":"compute_fvm_source_term(f::Array{Float64}, m::Int64, n::Int64, h::Float64)\n\nComputes the source term \n\nint_A_i fmathrmdx\n\nHere f has length 4mn or mn. In the first case, an average value of four quadrature nodal values of f is used per cell.\n\n\n\n\n\ncompute_fvm_source_term(f::PyObject, m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel.\n\n\n\n\n\ncompute_fvm_source_term(f::Array{Float64, 1}, mmesh::Mesh)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fvm_mechanics_term","page":"API","title":"PoreFlow.compute_fvm_mechanics_term","text":"compute_fvm_mechanics_term(u::Array{Float64}, m::Int64, n::Int64, h::Float64)\n\nComputes the mechanic interaction term \n\nint_A_i varepsilon_vmathrmdx\n\nHere \n\nvarepsilon_v = mathrmtr varepsilon = varepsilon_xx + varepsilon_yy\n\nNumerically, we have \n\nvarepsilon_v = 1  1  0 B^T delta u_A\n\n\n\n\n\ncompute_fvm_mechanics_term(u::PyObject, m::Int64, n::Int64, h::Float64)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_normal_traction_term","page":"API","title":"PoreFlow.compute_fem_normal_traction_term","text":"compute_fem_normal_traction_term(t::Array{Float64,1}, bdedge::Array{Int64},\nm::Int64, n::Int64, h::Float64)\ncompute_fem_normal_traction_term(t::Float64, bdedge::Array{Int64},\nm::Int64, n::Int64, h::Float64)\n\nComputes the normal traction term \n\nint_Gamma t(mathbfn)cdotdelta u mathrmd\n\nHere t(mathbfn)parallelmathbfn points outward to the domain and the magnitude is given by t.  bdedge is a Ntimes2 matrix and each row denotes the indices of two endpoints of the boundary edge. \n\nSee compute_fem_traction_term for graphical illustration.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_traction_term","page":"API","title":"PoreFlow.compute_fem_traction_term","text":"compute_fem_traction_term(t::Array{Float64, 2},\nbdedge::Array{Int64,2}, m::Int64, n::Int64, h::Float64)\n\nComputes the traction term \n\nint_Gamma t(mathbfn)cdotdelta u mathrmd\n\nThe number of rows of t is equal to the number of edges in bdedge.  The first component of t describes the x direction traction, while the second  component of t describes the y direction traction. \n\nAlso see compute_fem_normal_traction_term. \n\n(Image: )\n\n\n\n\n\ncompute_fem_traction_term(t::Array{Float64, 2},\nbdedge::Array{Int64,2}, mesh::Mesh)\n\n\n\n\n\ncompute_fem_traction_term(t1::Array{Float64, 1}, t2::Array{Float64, 1},\nbdedge::Array{Int64,2}, mesh::Mesh)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_von_mises_stress_term","page":"API","title":"PoreFlow.compute_von_mises_stress_term","text":"compute_von_mises_stress_term(K::Array{Float64}, u::Array{Float64}, m::Int64, n::Int64, h::Float64)\n\nCompute the von Mises stress on the Gauss quadrature nodes. \n\n\n\n\n\ncompute_von_mises_stress_term(Se::Array{Float64,2},  m::Int64, n::Int64, h::Float64)\n\nSe is a 4mntimes3 array that stores the stress data at each Gauss point. \n\n\n\n\n\ncompute_von_mises_stress_term(K::Array{Float64, 3}, u::Array{Float64, 1}, mesh::Mesh)\ncompute_von_mises_stress_term(K::Array{Float64, 2}, u::Array{Float64, 1}, mesh::Mesh)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_source_term1","page":"API","title":"PoreFlow.compute_fem_source_term1","text":"compute_fem_source_term1(f::Array{Float64},\nm::Int64, n::Int64, h::Float64)\n\nComputes the term \n\nint_Omega f delta u dx\n\nReturns a (m+1)times (n+1) vector. f is a length 4mn vector, given by its values on Gauss points. \n\n\n\n\n\ncompute_fem_source_term1(f::PyObject,\nm::Int64, n::Int64, h::Float64)\n\nA differentiable kernel.\n\n\n\n\n\ncompute_fem_source_term1(f::PyObject, mesh::Mesh)\n\n\n\n\n\ncompute_fem_source_term1(f::Array{Float64,1}, mesh::Mesh)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_flux_term1","page":"API","title":"PoreFlow.compute_fem_flux_term1","text":"compute_fem_flux_term1(t::Array{Float64},\nbdedge::Array{Int64,2}, m::Int64, n::Int64, h::Float64)\n\nComputes the traction term \n\nint_Gamma q delta u mathrmd\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_strain_energy_term","page":"API","title":"PoreFlow.compute_strain_energy_term","text":"compute_strain_energy_term(S::Array{Float64, 2}, m::Int64, n::Int64, h::Float64)\n\nComputes the strain energy \n\nint_A sigma  delta varepsilon mathrmdx\n\nwhere sigma is provided by S, a 4mn times 3 matrix.  The values sigma_11 sigma_22 sigma_12 are defined on 4 Gauss points per element. \n\n\n\n\n\ncompute_strain_energy_term(S::PyObject,m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel. \n\n\n\n\n\ncompute_strain_energy_term(Sigma::Array{Float64, 2}, mmesh::Mesh)\n\nComputes the strain energy term \n\nint_A sigma  varepsilon (delta u) dx\n\nHere sigma is a fourth-order tensor. Sigma is a ngauss × 3 matrix, each row represents  sigma_11 sigma_22 sigma_12 at  each Gauss point. \n\nThe output is a length 2mmesh.ndof vector. \n\n\n\n\n\ncompute_strain_energy_term(Sigma::PyObject, mmesh::Mesh)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_strain_energy_term1","page":"API","title":"PoreFlow.compute_strain_energy_term1","text":"compute_strain_energy_term1(S::PyObject, m::Int64, n::Int64, h::Float64)\n\nComputes the strain energy \n\nint_A sigma  delta varepsilon mathrmdx\n\nwhere sigma is provided by S, a 4mn times 2 matrix.  The values sigma_31 sigma_32 are defined on 4 Gauss points per element. \n\n\n\n\n\ncompute_strain_energy_term1(sigma::PyObject, m::Int64, n::Int64, h::Float64)\n\nA differentiable  operator.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_viscoelasticity_strain_energy_term","page":"API","title":"PoreFlow.compute_fem_viscoelasticity_strain_energy_term","text":"compute_fem_viscoelasticity_strain_energy_term(ε0, σ0, ε, A, B, m, n, h)\n\nGiven the constitutive relation\n\nsigma^n+1 = S sigma^n + H (varepsilon^n+1-varepsilon^n)\n\nthis function computes \n\nint_A sigmadelta varepsilonmathrmd x = underbraceint_A  B varepsilon^n+1delta varepsilonmathrmd x  + underbrace int_A  A sigma^n+1delta varepsilonmathrmd x - int_A  B varepsilon^n+1delta varepsilonmathrmd x _f\n\nand returns f\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fvm_advection_term","page":"API","title":"PoreFlow.compute_fvm_advection_term","text":"compute_fvm_advection_term(v::Union{PyObject, Array{Float64, 2}},\nu::Union{PyObject, Array{Float64,1}},m::Int64,n::Int64,h::Float64)\n\nComputes the advection term using upwind schemes\n\nint_A mathbfv cdot nabla u dx \n\nHere mathbfv is a mntimes 2 matrix and u is a length mn vector. Zero boundary conditions are assumed.  u is a vector of length mtimes n.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_interaction_term","page":"API","title":"PoreFlow.compute_interaction_term","text":"compute_interaction_term(p::Array{Float64, 1}, m::Int64, n::Int64, h::Float64)\n\nComputes the FVM-FEM interaction term \n\n beginbmatrix int p fracpartial delta upartial x dx   int p fracpartial delta vpartial y  dy endbmatrix \n\nThe input is a vector of length mn. The output is a 2(m+1)(n+1) vector. \n\n\n\n\n\ncompute_interaction_term(p::PyObject, m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel.\n\n\n\n\n\ncompute_interaction_term(p::Union{PyObject,Array{Float64, 1}}, mesh::Mesh)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_laplace_term1","page":"API","title":"PoreFlow.compute_fem_laplace_term1","text":"compute_fem_laplace_term1(u::PyObject,κ::PyObject,m::Int64,n::Int64,h::Float64)\ncompute_fem_laplace_term1(u::PyObject,m::Int64,n::Int64,h::Float64)\ncompute_fem_laplace_term1(u::Array{Float64},κ::PyObject, m::Int64,n::Int64,h::Float64)\ncompute_fem_laplace_term1(u::PyObject,κ::Array{Float64}, m::Int64,n::Int64,h::Float64)\n\nComputes the Laplace term for a scalar function u\n\nint_Omega Knabla u cdot nabla (delta u) mathrmdx\n\nHere κ is a vector of length 4mn, and u is a vector of length (m+1)(n+1). \n\nWhen κ is not provided, the following term is calculated:\n\nint_Omega nabla u cdot nabla (delta u) mathrmdx\n\n\n\n\n\ncompute_fem_laplace_term1(u::Array{Float64, 1},nu::Array{Float64, 1}, mesh::Mesh)\n\n\n\n\n\ncompute_fem_laplace_term1(u::Union{PyObject, Array{Float64, 1}},\n                            nu::Union{PyObject, Array{Float64, 1}},\n                            mesh::Mesh)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_fem_traction_term1","page":"API","title":"PoreFlow.compute_fem_traction_term1","text":"compute_fem_traction_term1(t::Array{Float64, 2},\nbdedge::Array{Int64,2}, m::Int64, n::Int64, h::Float64)\n\nComputes the traction term \n\nint_Gamma t(n) delta u mathrmd\n\nThe number of rows of t is equal to the number of edges in bdedge.  The output is a length (m+1)*(n+1) vector. \n\nAlso see compute_fem_traction_term. \n\n\n\n\n\ncompute_fem_traction_term1(t::Array{Float64, 1},\nbdedge::Array{Int64,2}, mesh::Mesh)\n\nComputes the boundary integral \n\nint_Gamma t(x y) delta u dx\n\nReturns a vector of size dof.\n\n\n\n\n\n","category":"function"},{"location":"api/#Evaluation-Functions","page":"API","title":"Evaluation Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"eval_f_on_gauss_pts\neval_f_on_dof_pts\neval_f_on_boundary_node\neval_f_on_boundary_edge\neval_strain_on_gauss_pts\neval_strain_on_gauss_pts1\neval_f_on_fvm_pts\neval_f_on_fem_pts\neval_grad_on_gauss_pts1\neval_grad_on_gauss_pts","category":"page"},{"location":"api/#PoreFlow.eval_f_on_gauss_pts","page":"API","title":"PoreFlow.eval_f_on_gauss_pts","text":"eval_f_on_gauss_pts(f::Function, m::Int64, n::Int64, h::Float64; tensor_input::Bool = false)\n\nEvaluates f at Gaussian points and return the result as 4mn vector out (4 Gauss points per element)\n\nIf tensor_input = true, the function f is assumed to map a tensor to a tensor output.\n\n(Image: )\n\n\n\n\n\neval_f_on_gauss_pts(f::Function, mesh::Mesh; tensor_input::Bool = false)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.eval_f_on_dof_pts","page":"API","title":"PoreFlow.eval_f_on_dof_pts","text":"eval_f_on_dof_pts(f::Function, mesh::Mesh)\n\nEvaluates f on the DOF points. \n\nFor P1 element, the DOF points are FEM points and therefore eval_f_on_dof_pts is equivalent to eval_on_on_fem_pts.\nFor P2 element, the DOF points are FEM points plus the middle point for each edge. \n\nReturns a vector of length mesh.ndof.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.eval_f_on_boundary_node","page":"API","title":"PoreFlow.eval_f_on_boundary_node","text":"eval_f_on_boundary_node(f::Function, bdnode::Array{Int64}, m::Int64, n::Int64, h::Float64)\n\nReturns a vector of the same length as bdnode whose entries corresponding to bdnode nodes are filled with values computed from f.\n\nf has the following signature \n\nf(x::Float64, y::Float64)::Float64\n\n\n\n\n\neval_f_on_boundary_node(f::Function, bdnode::Array{Int64}, mesh::Mesh)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.eval_f_on_boundary_edge","page":"API","title":"PoreFlow.eval_f_on_boundary_edge","text":"eval_f_on_boundary_edge(f::Function, bdedge::Array{Int64,2}, m::Int64, n::Int64, h::Float64)\n\nReturns a vector of the same length as bdedge whose entries corresponding to bdedge nodes are filled with values computed from f.\n\nf has the following signature \n\nf(x::Float64, y::Float64)::Float64\n\n\n\n\n\neval_f_on_boundary_edge(f::Function, bdedge::Array{Int64, 2}, mesh::Mesh; tensor_input::Bool = false)\n\nEvaluates f on the boundary Gauss points. Here f has the signature\n\nf(Float64, Float64)::Float64\n\nor \n\nf(PyObject, PyObject)::PyObject\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.eval_strain_on_gauss_pts","page":"API","title":"PoreFlow.eval_strain_on_gauss_pts","text":"eval_strain_on_gauss_pts(u::Array{Float64}, m::Int64, n::Int64, h::Float64)\n\nComputes the strain on Gauss points.  Returns a 4mntimes3 matrix, where each row denotes (varepsilon_11 varepsilon_22 2varepsilon_12) at the corresponding Gauss point. \n\n\n\n\n\neval_strain_on_gauss_pts(u::PyObject, m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel.\n\n\n\n\n\neval_strain_on_gauss_pts(u::Array{Float64}, mmesh::Mesh)\n\nEvaluates the strain on Gauss points. u is a vector of size 2mmesh.ndof.\n\nThe output is a ngauss × 3 vector.\n\n\n\n\n\neval_strain_on_gauss_pts(u::PyObject, mmesh::Mesh)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.eval_strain_on_gauss_pts1","page":"API","title":"PoreFlow.eval_strain_on_gauss_pts1","text":"eval_strain_on_gauss_pts1(u::PyObject, m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.eval_f_on_fvm_pts","page":"API","title":"PoreFlow.eval_f_on_fvm_pts","text":"eval_f_on_fvm_pts(f::Function, m::Int64, n::Int64, h::Float64; tensor_input::Bool = false)\n\nReturns f(x_i y_i) where (x_iy_i) are FVM nodes. \n\nIf tensor_input = true, the function f is assumed to map a tensor to a tensor output.\n\n\n\n\n\neval_f_on_fvm_pts(f::Function, mesh::Mesh; tensor_input::Bool = false)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.eval_f_on_fem_pts","page":"API","title":"PoreFlow.eval_f_on_fem_pts","text":"eval_f_on_fem_pts(f::Function, m::Int64, n::Int64, h::Float64; tensor_input::Bool = false)\n\nReturns f(x_i y_i) where (x_iy_i) are FEM nodes. \n\nIf tensor_input = true, the function f is assumed to map a tensor to a tensor output.\n\n\n\n\n\neval_f_on_fem_pts(f::Function, mesh::Mesh; tensor_input::Bool = false)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.eval_grad_on_gauss_pts1","page":"API","title":"PoreFlow.eval_grad_on_gauss_pts1","text":"eval_grad_on_gauss_pts1(u::Array{Float64,1}, m::Int64, n::Int64, h::Float64)\n\nEvaluates nabla u on each Gauss point. Here u is a scalar function. \n\nThe input u is a vector of length (m+1)*(n+1). The output is a matrix of size 4mntimes 2. \n\n\n\n\n\neval_grad_on_gauss_pts1(u::PyObject, m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel. \n\n\n\n\n\neval_grad_on_gauss_pts1(u::Union{Array{Float64,1}, PyObject}, mesh::Mesh)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.eval_grad_on_gauss_pts","page":"API","title":"PoreFlow.eval_grad_on_gauss_pts","text":"eval_grad_on_gauss_pts(u::Array{Float64,1}, m::Int64, n::Int64, h::Float64)\n\nEvaluates nabla u on each Gauss point. Here mathbfu = (u v).\n\ntextttgi = beginbmatrix u_x  u_y v_x  v_y endbmatrix\n\nThe input u is a vector of length 2(m+1)*(n+1). The output is a matrix of size 4mntimes 2 times 2. \n\n\n\n\n\neval_grad_on_gauss_pts(u::PyObject, m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel. \n\n\n\n\n\n","category":"function"},{"location":"api/#Boundary-Conditions","page":"API","title":"Boundary Conditions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"fem_impose_Dirichlet_boundary_condition\nfem_impose_Dirichlet_boundary_condition1\nimpose_Dirichlet_boundary_conditions\nimpose_bdm_traction_boundary_condition1\nimpose_bdm_traction_boundary_condition","category":"page"},{"location":"api/#PoreFlow.fem_impose_Dirichlet_boundary_condition","page":"API","title":"PoreFlow.fem_impose_Dirichlet_boundary_condition","text":"fem_impose_Dirichlet_boundary_condition(A::SparseMatrixCSC{Float64,Int64}, \nbd::Array{Int64}, m::Int64, n::Int64, h::Float64)\n\nImposes the Dirichlet boundary conditions on the matrix A.\n\nReturns 2 matrix, \n\nbeginbmatrix\nA_BB  A_BI  \nA_IB  A_II \nendbmatrix Rightarrow beginbmatrix\nI  0  \n0  A_II \nendbmatrix quad beginbmatrix\n0  \nA_IB \nendbmatrix\n\n\n\n\n\nfem_impose_Dirichlet_boundary_condition(L::SparseTensor, bdnode::Array{Int64}, m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel for imposing the Dirichlet boundary of a vector-valued function. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.fem_impose_Dirichlet_boundary_condition1","page":"API","title":"PoreFlow.fem_impose_Dirichlet_boundary_condition1","text":"fem_impose_Dirichlet_boundary_condition1(A::SparseMatrixCSC{Float64,Int64}, \n    bd::Array{Int64}, m::Int64, n::Int64, h::Float64)\n\nImposes the Dirichlet boundary conditions on the matrix A Returns 2 matrix, \n\nbeginbmatrix\nA_BB  A_BI  \nA_IB  A_II \nendbmatrix Rightarrow beginbmatrix\nI  0  \n0  A_II \nendbmatrix quad beginbmatrix\n0  \nA_IB \nendbmatrix\n\nbd must NOT have duplicates. \n\n\n\n\n\nfem_impose_Dirichlet_boundary_condition1(L::SparseTensor, bdnode::Array{Int64}, m::Int64, n::Int64, h::Float64)\n\nA differentiable kernel for imposing the Dirichlet boundary of a scalar-valued function. \n\n\n\n\n\nfem_impose_Dirichlet_boundary_condition1(L::SparseTensor, bdnode::Array{Int64}, mesh::Mesh)\n\nA differentiable kernel for imposing the Dirichlet boundary of a scalar-valued function. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.impose_Dirichlet_boundary_conditions","page":"API","title":"PoreFlow.impose_Dirichlet_boundary_conditions","text":"impose_Dirichlet_boundary_conditions(A::Union{SparseArrays, Array{Float64, 2}}, rhs::Array{Float64,1}, bdnode::Array{Int64, 1}, \n    bdval::Array{Float64,1})\nimpose_Dirichlet_boundary_conditions(A::SparseTensor, rhs::Union{Array{Float64,1}, PyObject}, bdnode::Array{Int64, 1}, \n    bdval::Union{Array{Float64,1}, PyObject})\n\nAlgebraically impose the Dirichlet boundary conditions. We want the solutions at indices bdnode to be bdval. Given the matrix and the right hand side\n\nbeginbmatrix A_II  A_IB  A_BI  A_BB endbmatrix beginbmatrixr_I  r_B endbmatrix\n\nThe function returns\n\nbeginbmatrix A_II  0  0  I endbmatrix beginbmatrixr_I - A_IB u_B  r_B endbmatrix\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.impose_bdm_traction_boundary_condition1","page":"API","title":"PoreFlow.impose_bdm_traction_boundary_condition1","text":"impose_bdm_traction_boundary_condition1(gN::Array{Float64, 1}, bdedge::Array{Int64, 2}, mesh::Mesh)\n\nImposes the BDM traction boundary condition \n\nint_Gamma sigma mathbfn g_N ds\n\nHere sigma is a second-order tensor. gN is defined on the Gauss points, e.g. \n\ngN = eval_f_on_boundary_edge(func, bdedge, mesh)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.impose_bdm_traction_boundary_condition","page":"API","title":"PoreFlow.impose_bdm_traction_boundary_condition","text":"impose_bdm_traction_boundary_condition(g1:Array{Float64, 1}, g2:Array{Float64, 1},\nbdedge::Array{Int64, 2}, mesh::Mesh)\n\nImposes the BDM traction boundary condition \n\nint_Gamma sigma mathbfn cdot mathbfg_N ds\n\nHere sigma is a fourth-order tensor. mathbfg_N = beginbmatrixg_N1 g_N2endbmatrix See impose_bdm_traction_boundary_condition1.\n\nReturns a dof vector and a val vector. \n\n\n\n\n\n","category":"function"},{"location":"api/#Visualization","page":"API","title":"Visualization","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"In visualize_scalar_on_XXX_points, the first argument is the data matrix. When the data matrix is 1D, one snapshot is plotted. When the data matrix is 2D, it is understood as multiple snapshots at different time steps (each row is a snapshot). When the data matrix is 3D, it is understood as time step × height × width. ","category":"page"},{"location":"api/","page":"API","title":"API","text":"visualize_mesh\nvisualize_pressure\nvisualize_displacement\nvisualize_stress\nvisualize_von_mises_stress\nvisualize_scalar_on_gauss_points\nvisualize_scalar_on_fem_points\nvisualize_scalar_on_fvm_points\nvisualize_vector_on_fem_points","category":"page"},{"location":"api/#PoreFlow.visualize_mesh","page":"API","title":"PoreFlow.visualize_mesh","text":"visualize_mesh(mesh::Mesh)\n\nVisualizes the unstructured meshes. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.visualize_pressure","page":"API","title":"PoreFlow.visualize_pressure","text":"visualize_pressure(U::Array{Float64, 2}, m::Int64, n::Int64, h::Float64)\n\nVisualizes pressure. U is the solution vector. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.visualize_displacement","page":"API","title":"PoreFlow.visualize_displacement","text":"visualize_displacement(u::Array{Float64, 2}, m::Int64, n::Int64, h::Float64)\n\nGenerates scattered plot animation for displacement uin mathbbR^(NT+1)times 2(m+1)(n+1).\n\n\n\n\n\nvisualize_displacement(u::Array{Float64, 1}, mmesh::Mesh)\n\n\n\n\n\nvisualize_displacement(u::Array{Float64, 2}, mmesh::Mesh)\n\nGenerates scattered plot animation for displacement uin mathbbR^(NT+1)times 2N_textdof.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.visualize_stress","page":"API","title":"PoreFlow.visualize_stress","text":"visualize_stress(K::Array{Float64, 2}, U::Array{Float64, 2}, m::Int64, n::Int64, h::Float64; name::String=\"\")\n\nVisualizes displacement. U is the solution vector, K is the elasticity matrix (3times 3).\n\n\n\n\n\nvisualize_stress(Se::Array{Float64, 2}, m::Int64, n::Int64, h::Float64; name::String=\"\")\n\nVisualizes the Von Mises stress. Se is the Von Mises at the cell center. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.visualize_von_mises_stress","page":"API","title":"PoreFlow.visualize_von_mises_stress","text":"visualize_von_mises_stress(Se::Array{Float64, 2}, m::Int64, n::Int64, h::Float64; name::String=\"\")\n\nVisualizes the Von Mises stress. \n\n\n\n\n\nvisualize_von_mises_stress(K::Array{Float64}, u::Array{Float64, 1}, mmesh::Mesh, args...; kwargs...)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.visualize_scalar_on_gauss_points","page":"API","title":"PoreFlow.visualize_scalar_on_gauss_points","text":"visualize_scalar_on_gauss_points(u::Array{Float64,1}, m::Int64, n::Int64, h::Float64, args...;kwargs...)\n\nVisualizes the scalar u using pcolormesh. Here u is a length 4mn vector and the values are defined on the Gauss points\n\n\n\n\n\nvisualize_scalar_on_gauss_points(u::Array{Float64,1}, mesh::Mesh, args...;kwargs...)\n\nVisualizes scalar values on Gauss points. For unstructured meshes, the values on each element are averaged to produce a uniform value for each element.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.visualize_scalar_on_fem_points","page":"API","title":"PoreFlow.visualize_scalar_on_fem_points","text":"visualize_scalar_on_fem_points(u::Array{Float64,1}, m::Int64, n::Int64, h::Float64, args...;kwargs...)\n\nVisualizes the scalar u using pcolormesh. Here u is a length (m+1)(n+1) vector and the values are defined on the FEM points\n\n\n\n\n\nvisualize_scalar_on_fem_points(u::Array{Float64,2}, m::Int64, n::Int64, h::Float64, args...;kwargs...)\n\nVisualizes the scalar u using pcolormesh. Here u is a matrix of size NT times (m+1)(n+1) (NT is the number of time steps) and the values are defined on the FEM points.\n\n\n\n\n\nvisualize_scalar_on_fem_points(u::Array{Float64,1}, mesh::Mesh, args...;\n    with_mesh::Bool = false, kwargs...)\n\nVisualizes the nodal values u on the unstructured mesh mesh.\n\nwith_mesh: if true, the unstructured mesh is also plotted. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.visualize_scalar_on_fvm_points","page":"API","title":"PoreFlow.visualize_scalar_on_fvm_points","text":"visualize_scalar_on_fvm_points(φ::Array{Float64, 3}, m::Int64, n::Int64, h::Float64;\nvmin::Union{Real, Missing} = missing, vmax::Union{Real, Missing} = missing)\n\nGenerates scattered potential animation for the potential phiin mathbbR^(NT+1)times n times m.\n\n\n\n\n\nvisualize_scalar_on_fvm_points(u::Array{Float64,1}, mesh::Mesh, args...;kwargs...)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.visualize_vector_on_fem_points","page":"API","title":"PoreFlow.visualize_vector_on_fem_points","text":"visualize_vector_on_fem_points(u1::Array{Float64,1}, u2::Array{Float64,1}, mesh::Mesh, args...;kwargs...)\n\n\n\n\n\n","category":"function"},{"location":"api/#Modeling-Tools","page":"API","title":"Modeling Tools","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"layer_model\ncompute_vel\ncompute_plane_strain_matrix\ncompute_plane_stress_matrix\ncompute_space_varying_tangent_elasticity_matrix\nmantle_viscosity\nantiplane_viscosity","category":"page"},{"location":"api/#PoreFlow.layer_model","page":"API","title":"PoreFlow.layer_model","text":"layer_model(u::Array{Float64, 1}, m::Int64, n::Int64, h::Float64)\n\nConvert the vertical profile of a quantity to a layer model.  The input u is a length n vector, the output is a length 4mn vector, representing the 4mn Gauss points. \n\n\n\n\n\nlayer_model(u::PyObject, m::Int64, n::Int64, h::Float64)\n\nA differential kernel for layer_model. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_vel","page":"API","title":"PoreFlow.compute_vel","text":"compute_vel(a::Union{PyObject, Array{Float64, 1}},\nv0::Union{PyObject, Float64},psi::Union{PyObject, Array{Float64, 1}},\nsigma::Union{PyObject, Array{Float64, 1}},\ntau::Union{PyObject, Array{Float64, 1}},eta::Union{PyObject, Float64})\n\nComputes x = u_3(x_1 x_2) from rate and state friction. The governing equation is \n\na sinh^-1left( fracx - uDelta t frac12V_0 e^fracPsia right) sigma - tau + eta fracx-uDelta t = 0\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_plane_strain_matrix","page":"API","title":"PoreFlow.compute_plane_strain_matrix","text":"compute_plane_strain_matrix(E::Float64, ν::Float64)\n\nComputes the stiffness matrix for 2D plane strain. The matrix is given by \n\nfracE(1-nu)(1+nu)(1-2nu)beginbmatrix\n1  fracnu1-nu  fracnu1-nu \nfracnu1-nu  1  fracnu1-nu  \nfracnu1-nu  fracnu1-nu  1\nendbmatrix\n\n\n\n\n\ncompute_plane_strain_matrix(E::Union{PyObject, Array{Float64, 1}}, nu::Union{PyObject, Array{Float64, 1}})\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_plane_stress_matrix","page":"API","title":"PoreFlow.compute_plane_stress_matrix","text":"compute_plane_stress_matrix(E::Float64, ν::Float64)\n\nComputes the stiffness matrix for 2D plane stress. The matrix is given by \n\nfracE(1+nu)(1-2nu)beginbmatrix\n1-nu  nu  0 \nnu  1  0  \n0  0  frac1-2nu2\nendbmatrix\n\n\n\n\n\ncompute_plane_stress_matrix(E::Union{PyObject, Array{Float64, 1}}, nu::Union{PyObject, Array{Float64, 1}})\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.compute_space_varying_tangent_elasticity_matrix","page":"API","title":"PoreFlow.compute_space_varying_tangent_elasticity_matrix","text":"compute_space_varying_tangent_elasticity_matrix(mu::Union{PyObject, Array{Float64,1}},m::Int64,n::Int64,h::Float64,type::Int64=1)\n\nComputes the space varying tangent elasticity matrix given mu. It returns a matrix of size 4mntimes 2times 2\n\nIf type==1, the i-th matrix will be \n\nbeginbmatrixmu_i  0  0  mu_i endbmatrix\n\nIf type==2, the i-th matrix will be \n\nbeginbmatrixmu_i  0  0  mu_i+4mn endbmatrix\n\nIf type==3, the i-th matrix will be \n\nbeginbmatrixmu_i  mu_i+8mn  mu_i+8mn  mu_i+4mnendbmatrix\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.mantle_viscosity","page":"API","title":"PoreFlow.mantle_viscosity","text":"mantle_viscosity(u::Union{Array{Float64}, PyObject},\n    T::Union{Array{Float64}, PyObject}, m::Int64, n::Int64, h::Float64;\n    σ_yield::Union{Float64, PyObject} = 300e6, \n    ω::Union{Float64, PyObject}, \n    η_min::Union{Float64, PyObject} = 1e18, \n    η_max::Union{Float64, PyObject} = 1e23, \n    E::Union{Float64, PyObject} = 9.0, \n    C::Union{Float64, PyObject} = 1000., N::Union{Float64, PyObject} = 2.)\n\neta = eta_min + minleft( fracsigma_textyield2sqrtepsilon_II omegamin(eta_max eta) right)\n\nwith  \n\nepsilon_II = frac12 epsilon(u)qquad eta = C e^E(05-T) (epsilon_II)^(1-n)2n\n\nHere epsilon_II is the second invariant of the strain rate tensor, C  0 is a viscosity pre-factor, E  0 is the non-dimensional activation energy, n  0 is the nonlinear exponent, η_min, η_max act as minimum and maximum bounds for the effective viscosity, and σ_textyield  0 is the yield stress. win (0 1 is the weakening factor, which is used to incorporate phenomenological aspects that cannot be represented in a purely viscous flow model, such as processes which govern mega-thrust faults along the subduction interface, or partial melting near a mid-ocean ridge.\n\nThe viscosity of the mantle is governed by the high-temperature creep of silicates, for which laboratory experiments show that the creep strength is temperature-, pressure-, compositional- and stress-dependent. \n\nThe output is a length 4mn vector. \n\ninfo: Info\nSee Towards adjoint-based inversion of time-dependent mantle convection with nonlinear viscosity for details.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.antiplane_viscosity","page":"API","title":"PoreFlow.antiplane_viscosity","text":"antiplane_viscosity(ε::Union{PyObject, Array{Float64}}, σ::Union{PyObject, Array{Float64}}, \nμ::Union{PyObject, Float64}, η::Union{PyObject, Float64}, Δt::Float64)\n\nCalculates the stress at time t_n+1 given the strain at t_n+1 and stress at t_n. The governing equation is \n\ndotsigma + fracmuetasigma = 2mu dotepsilon\n\nThe discretization form is \n\nsigma^n+1 = frac1frac1Delta t+fracmueta(2mudotepsilon^n+1 + fracsigma^nDelta t)\n\n\n\n\n\n","category":"function"},{"location":"api/#Mesh","page":"API","title":"Mesh","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"get_edge_dof\nget_boundary_edge_orientation\nget_area\nget_ngauss\nbcnode\nbcedge\ninterior_node\nfemidx\nfvmidx\nsubdomain\ngauss_nodes\ngauss_weights\nfem_nodes\nfvm_nodes","category":"page"},{"location":"api/#PoreFlow.get_edge_dof","page":"API","title":"PoreFlow.get_edge_dof","text":"get_edge_dof(edges::Array{Int64, 2}, mesh::Mesh)\nget_edge_dof(edges::Array{Int64, 1}, mesh::Mesh)\n\nReturns the DOFs for edges, which is a K × 2 array containing vertex indices.  The DOFs are not offset by nnode, i.e., the smallest edge DOF could be 1. \n\nWhen the input is a length 2 vector, it returns a single index for the corresponding edge DOF. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.get_boundary_edge_orientation","page":"API","title":"PoreFlow.get_boundary_edge_orientation","text":"get_boundary_edge_orientation(bdedge::Array{Int64, 2}, mmesh::Mesh)\n\nReturns the orientation of the edges in bdedge. For example, if for a boundary element [1,2,3], assume [1,2] is the boundary edge,  then \n\nget_boundary_edge_orientation([1 2;2 1], mmesh) = [1.0;-1.0]\n\nThe return values for non-boundary edges in bdedge is undefined. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.get_area","page":"API","title":"PoreFlow.get_area","text":"get_ngauss(mesh::Mesh)\n\nReturn the areas of triangles as an array. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.get_ngauss","page":"API","title":"PoreFlow.get_ngauss","text":"get_ngauss(mesh::Mesh)\n\nReturn the total number of Gauss points. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.bcnode","page":"API","title":"PoreFlow.bcnode","text":"bcnode(desc::String, m::Int64, n::Int64, h::Float64)\n\nReturns the node indices for the description. Multiple descriptions can be concatented via |\n\n                upper\n        |------------------|\nleft    |                  | right\n        |                  |\n        |__________________|\n\n                lower\n\nExample\n\nbcnode(\"left|upper\", m, n, h)\n\n\n\n\n\nbcnode(mesh::Mesh; by_dof::Bool = true)\n\nReturns all boundary node indices. \n\nIf by_dof = true, bcnode returns the global indices for boundary DOFs. \n\nFor P2 elements, the returned values are boundary node DOFs + boundary edge DOFs (offseted by mesh.nnode)\nFor BDM1 elements, the returned values are boundary edge DOFs + boundary edge DOFs offseted by mesh.nedge\n\n\n\n\n\nbcnode(f::Function, mesh::Mesh; by_dof::Bool = true)\n\nReturns the boundary node DOFs that satisfies f(x,y) = true.\n\nnote: Note\nFor BDM1 element and by_dof = true, because the degrees of freedoms are associated with edges, f has the signaturef(x1::Float64, y1::Float64, x2::Float64, y2::Float64)::Boolbcnode only returns DOFs on edges such that f(x1, y1, x2, y2)=true. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.bcedge","page":"API","title":"PoreFlow.bcedge","text":"bcedge(desc::String, m::Int64, n::Int64, h::Float64)\n\nReturns the edge indices for description. See bcnode\n\n\n\n\n\nbcedge(mesh::Mesh)\n\nReturns all boundary edges as a set of integer pairs (edge vertices).\n\n\n\n\n\nbcedge(f::Function, mesh::Mesh)\n\nReturns all edge indices that satisfies f(x1, y1, x2, y2) = true Here the edge endpoints are given by (x_1 y_1) and (x_2 y_2).\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.interior_node","page":"API","title":"PoreFlow.interior_node","text":"interior_node(desc::String, m::Int64, n::Int64, h::Float64)\n\nIn contrast to bcnode, interior_node returns the nodes that are not specified by desc, including thosee on the boundary.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.femidx","page":"API","title":"PoreFlow.femidx","text":"femidx(d::Int64, m::Int64)\n\nReturns the FEM index of the dof d. Basically, femidx is the inverse of \n\n(i,j) → d = (j-1)*(m+1) + i\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.fvmidx","page":"API","title":"PoreFlow.fvmidx","text":"fvmidx(d::Int64, m::Int64)\n\nReturns the FVM index of the dof d. Basically, femidx is the inverse of \n\n(i,j) → d = (j-1)*m + i\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.subdomain","page":"API","title":"PoreFlow.subdomain","text":"subdomain(f::Function, m::Int64, n::Int64, h::Float64)\n\nReturns the subdomain defined by f(x, y)==true.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.gauss_nodes","page":"API","title":"PoreFlow.gauss_nodes","text":"gauss_nodes(m::Int64, n::Int64, h::Float64)\n\nReturns the node matrix of Gauss points for all elements. The matrix has a size 4mntimes 2\n\n\n\n\n\ngauss_nodes(mesh::Mesh)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.gauss_weights","page":"API","title":"PoreFlow.gauss_weights","text":"gauss_weights(mmesh::Mesh)\n\nReturns the weights for each Gauss points.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.fem_nodes","page":"API","title":"PoreFlow.fem_nodes","text":"fem_nodes(m::Int64, n::Int64, h::Float64)\n\nReturns the FEM node matrix of size (m+1)(n+1)times 2\n\n\n\n\n\nfem_nodes(mesh::Mesh)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.fvm_nodes","page":"API","title":"PoreFlow.fvm_nodes","text":"fvm_nodes(m::Int64, n::Int64, h::Float64)\n\nReturns the FVM node matrix of size (m+1)(n+1)times 2\n\n\n\n\n\nfvm_nodes(mesh::Mesh)\n\n\n\n\n\n","category":"function"},{"location":"api/#Misc","page":"API","title":"Misc","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"trim_coupled\ncoupled_impose_pressure\ncholesky_factorize\ncholesky_outproduct\nfem_to_fvm\nfem_to_gauss_points\ndof_to_gauss_points","category":"page"},{"location":"api/#PoreFlow.trim_coupled","page":"API","title":"PoreFlow.trim_coupled","text":"trim_coupled(pd::PoreData, Q::SparseMatrixCSC{Float64,Int64}, L::SparseMatrixCSC{Float64,Int64}, \nM::SparseMatrixCSC{Float64,Int64}, \nbd::Array{Int64}, Δt::Float64, m::Int64, n::Int64, h::Float64)\n\nAssembles matrices from mechanics and flow and assemble the coupled matrix \n\nbeginbmatrix\nhat M  -hat L^T\nhat L  hat Q\nendbmatrix\n\nQ is obtained from compute_fvm_tpfa_matrix, M is obtained from compute_fem_stiffness_matrix, and L is obtained from compute_interaction_matrix.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.coupled_impose_pressure","page":"API","title":"PoreFlow.coupled_impose_pressure","text":"coupled_impose_pressure(A::SparseMatrixCSC{Float64,Int64}, pnode::Array{Int64}, \nm::Int64, n::Int64, h::Float64)\n\nReturns a trimmed matrix.\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.cholesky_factorize","page":"API","title":"PoreFlow.cholesky_factorize","text":"cholesky_factorize(A::Union{Array{<:Real,2}, PyObject})\n\nReturns the cholesky factor of A. See cholesky_outproduct for details. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.cholesky_outproduct","page":"API","title":"PoreFlow.cholesky_outproduct","text":"cholesky_outproduct(L::Union{Array{<:Real,2}, PyObject})\n\nReturns  A = LL where L (length=6) is a vectorized form of L L = beginmatrix l_1  0  0  l_4  l_2  0   l_5  l_6  l_3 endmatrix and A (length=9) is also a vectorized form of A\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.fem_to_fvm","page":"API","title":"PoreFlow.fem_to_fvm","text":"fem_to_fvm(u::Union{PyObject, Array{Float64}}, m::Int64, n::Int64, h::Float64)\n\nInterpolates the nodal values of u to cell values. \n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.fem_to_gauss_points","page":"API","title":"PoreFlow.fem_to_gauss_points","text":"fem_to_gauss_points(u::PyOject, m::Int64, n::Int64, h::Float64)\nfem_to_gauss_points(u::Array{Float64,1}, m::Int64, n::Int64, h::Float64)\n\nGiven a vector of length (m+1)(n+1), u, returns the function values at each Gauss point. \n\nReturns a vector of length 4mn.\n\n\n\n\n\nfem_to_gauss_points(u::PyObject, mesh::Mesh)\n\n\n\n\n\nfem_to_gauss_points(u::Array{Float64,1}, mesh::Mesh)\n\n\n\n\n\n","category":"function"},{"location":"api/#PoreFlow.dof_to_gauss_points","page":"API","title":"PoreFlow.dof_to_gauss_points","text":"dof_to_gauss_points(u::PyObject, mesh::Mesh)\ndof_to_gauss_points(u::Array{Float64,1}, mesh::Mesh)\n\nSimilar to fem_to_gauss_points. The only difference is that the function uses all DOFs–-which means,  for quadratic elements, the nodal values on the edges are also used. \n\n\n\n\n\n","category":"function"},{"location":"advection_diffusion/#Advection-Diffusion-Equation","page":"Advection Diffusion Equation","title":"Advection Diffusion Equation","text":"","category":"section"},{"location":"inv_twophaseflow/#Coupled-Geomechanics-and-Multiphase-Flow","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"","category":"section"},{"location":"inv_twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"This section is dedicated to the inverse problem of Coupled Geomechanics and Multiphase Flow. We only consider the parameter inverse problem here, i.e., estimating the Lamé constants and the viscosity parameter from surface horizontal displacement data. We have tried solving the function inverse problem–-estimating a nonparametric constitutive relation–-using the neural network approach in the single phase flow problem, but unfortunately it appears that the limited displacement data are insufficient to train a neural network. ","category":"page"},{"location":"inv_twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"To this end, we generate the observation data–-x-direction displacement on the surface with the following parameters","category":"page"},{"location":"inv_twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Linear Elasticity: E=6times 10^9quad nu=035","category":"page"},{"location":"inv_twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Viscoelasticity: E=6times 10^9quad nu=035quad eta = 6667times 10^11","category":"page"},{"location":"inv_twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"(Image: linear_disp)","category":"page"},{"location":"inv_twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"To test the robustness of the algorithm, we add different levels of noise to the observation data u_mathrmobs:","category":"page"},{"location":"inv_twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"(tilde u_mathrmobs)_i = (u_mathrmobs)_i(1+sigma w_i)","category":"page"},{"location":"inv_twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"where sigma = 0 001 005 and 01, and w_i is a standard normal variable. ","category":"page"},{"location":"inv_twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Linear Elasticity","category":"page"},{"location":"inv_twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"We measure the error by fracH-H^*_2H^*_2, where H is the exact elastic tangent matrix. The exact matrix is ","category":"page"},{"location":"inv_twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"H^* = beginbmatrix962963  518519  00    \n 518519  962963  00    \n 00      00      222222endbmatrix","category":"page"},{"location":"inv_twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"The initial guess for the matrix is","category":"page"},{"location":"inv_twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"H_0 = 10^9 times beginbmatrix1  0  00  1  0  0  0  1endbmatrix","category":"page"},{"location":"inv_twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"We also ensure that the matrix is symmetric positive semidefinite by optimizating H = DD, where D is a free variable of size 3times 3.  ","category":"page"},{"location":"inv_twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Noise Level sigma=0 sigma=001 sigma=005 $\\sigma=0.1 $\nEstimated (times 10^9) leftbeginarrayccc96302  51853  -00001 51853  96318  00001 -00001  00001  22234 endarrayright leftbeginarrayccc96925  52306  -00201 52306  97894  -00037 -00201  -00037  23537 endarrayright leftbeginarrayccc10409  50079  -03379 50079  111585  -01039 -03379  -01039  35966 endarrayright leftbeginarrayccc103964  50069  -03472 50069  119231  0009 -03472  0009  39155 endarrayright\nError 16200times 10^-4 14554times 10^-2 14518times 10^-1 19220times 10^-1\nIterations 72 88 81 72","category":"page"},{"location":"inv_twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Viscoelasticity","category":"page"},{"location":"inv_twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"We report the relative error for each parameter mu, lambda, and eta^-1 (for convenience, we use the reciprocal of eta for numerical simulations). The initial guesses are 10^9, 10^9 and 10^-12 respectively. The exact values are ","category":"page"},{"location":"inv_twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"mu^* = 222 times 10^9quad lambda^* =  519times 10^9quad (eta^*)^-1 = 15times 10^-12","category":"page"},{"location":"inv_twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"Noise Level sigma=0 sigma=001 sigma=005 sigma=01\nmu ($\\times 10^9 $) 2.2222 2.2339 2.1949 2.1711\nError 201times 10^-6 525times 10^-3 1.23e-02 230times 10^-2\nlambda (times 10^9) 5.1852 5.1729 5.222 5.2602\nError 132times 10^-7 238times 10^-3 710times 10^-3 145times 10^-2\neta^-1 (times 10^-12) 1.5 1.4936 1.5154 1.5242\nError 802times 10^-7 428times 10^-3 102times 10^-2 161times 10^-2\nIterations 29 29 29 30","category":"page"},{"location":"inv_twophaseflow/","page":"Coupled Geomechanics and Multiphase Flow","title":"Coupled Geomechanics and Multiphase Flow","text":"We can see our inversion method is quite accurate and robust. ","category":"page"},{"location":"inv_viscoelasticity_earth/#Viscoelasticity-Model-for-the-Earth","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"","category":"section"},{"location":"inv_viscoelasticity_earth/","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"In previous section, we show how to conduct forward computation of viscoelasticity models for the earth. In this section, we use a gradient-based optimization (L-BFGS-S) approach for calibrating the spatial-varying viscoelasticity parameters for the viscoelasticity model. The major function we use is ViscoelasticitySolver in NNFEM in the NNFEM package.  ","category":"page"},{"location":"inv_viscoelasticity_earth/","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"In the following examples, we calibrate the viscoelasticity parameters eta from displacement data on the surface. ","category":"page"},{"location":"inv_viscoelasticity_earth/#Strike-slip-Fault","page":"Viscoelasticity Model for the Earth","title":"Strike-slip Fault","text":"","category":"section"},{"location":"inv_viscoelasticity_earth/","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"In this example, we consider a layer model. In each layer, eta is a constant. The left panel in the following graph shows the ground truth, while the inversion result is shown in the right panel. We can see the inverted eta is quite accurate after 2000 iterations.  ","category":"page"},{"location":"inv_viscoelasticity_earth/","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"True model Inverted result\n(Image: ) (Image: )","category":"page"},{"location":"inv_viscoelasticity_earth/","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"We show the inversion results in each iteration:","category":"page"},{"location":"inv_viscoelasticity_earth/","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"<center>\n<img src=\"../assets/visco-earth/strikeslip-inv_visco.gif\" width=60%>\n</center>","category":"page"},{"location":"inv_viscoelasticity_earth/","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"Code:  antiplaneviscosityinverse.jl","category":"page"},{"location":"inv_viscoelasticity_earth/#Dip-slip-Fault","page":"Viscoelasticity Model for the Earth","title":"Dip-slip Fault","text":"","category":"section"},{"location":"inv_viscoelasticity_earth/","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"In this example, we consider a linear viscosity model with an increasing viscosity effect at a deeper depth. Because of the limited observation data (displacement on the surface), we do not expect to calibrate a spatially-varying eta for each location. Therefore, we reduce the number of optimizable variables b dividing the computational domain into multiple patches. The patch is obtained using K-means algorithm provided by Clustering.jl: ","category":"page"},{"location":"inv_viscoelasticity_earth/","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"<center>\n<img src=\"../assets/visco-earth/dipslip-patch.png\" width=50%>\n</center>","category":"page"},{"location":"inv_viscoelasticity_earth/","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"The true vsicoelasticity parameter distribution is shown in the left panel in the following graph. The right panel shows the inverted result after 200 iterations. We can see that the inverted result is reasonably good. ","category":"page"},{"location":"inv_viscoelasticity_earth/","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"True model Inverted result\n(Image: ) (Image: )","category":"page"},{"location":"inv_viscoelasticity_earth/","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"We also show the inversion results in each iteration:","category":"page"},{"location":"inv_viscoelasticity_earth/","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"<center>\n<img src=\"../assets/visco-earth/dipslip-inv_visco.gif\" width=80%>\n</center>","category":"page"},{"location":"inv_viscoelasticity_earth/","page":"Viscoelasticity Model for the Earth","title":"Viscoelasticity Model for the Earth","text":"Code: dippingfaultviscosityforward.jl, dippingfaultviscosityinversion.jl, loaddomainfunction.jl.","category":"page"},{"location":"mantle/#Mantle-Convection","page":"Mantle Convection","title":"Mantle Convection","text":"","category":"section"},{"location":"mantle/","page":"Mantle Convection","title":"Mantle Convection","text":"We study the mantle convection and plate motion in this article. We can model this physical phenomenon using a coupled system of velocity and temperature, where the governing equation for the velocity is the balance of linear momentum and incompressibility","category":"page"},{"location":"mantle/","page":"Mantle Convection","title":"Mantle Convection","text":"beginaligned\ntextdiv cdot u = 0 \n-nabla cdot sigma = Re T e_y\nendaligned","category":"page"},{"location":"mantle/","page":"Mantle Convection","title":"Mantle Convection","text":"Here u is the velocity, Re is the Raleigh number, e_y is the unit vector pointing in the y direction, T is the temperature, and sigma is the stress tensor. ","category":"page"},{"location":"mantle/","page":"Mantle Convection","title":"Mantle Convection","text":"The conservation of energy is given by ","category":"page"},{"location":"mantle/","page":"Mantle Convection","title":"Mantle Convection","text":"fracpartial Tpartial t + u cdot nabla T - nabla^2 T = 0","category":"page"},{"location":"mantle/","page":"Mantle Convection","title":"Mantle Convection","text":"We close the system with the following constitutive relation ","category":"page"},{"location":"mantle/","page":"Mantle Convection","title":"Mantle Convection","text":"sigma = -pI +2eta_eff epsilon(u)","category":"page"},{"location":"mantle/","page":"Mantle Convection","title":"Mantle Convection","text":"Here epsilon(u) is the Cauchy strain. The effective viscosity parameter is given by ","category":"page"},{"location":"mantle/","page":"Mantle Convection","title":"Mantle Convection","text":"eta_eff = eta_min + minleft( frac sigma_yield2sqrtepsilon_II omega min(eta_max eta) right)","category":"page"},{"location":"mantle/","page":"Mantle Convection","title":"Mantle Convection","text":"Here epsilon_II = frac12 epsilon(u)  epsilon(u), and ","category":"page"},{"location":"mantle/","page":"Mantle Convection","title":"Mantle Convection","text":"eta = Ce^E(05-T)(epsilon_II)^frac1-n2n)","category":"page"},{"location":"mantle/","page":"Mantle Convection","title":"Mantle Convection","text":"We consider a Dirichlet boundary conditions for the temperature on the top and bottom","category":"page"},{"location":"mantle/","page":"Mantle Convection","title":"Mantle Convection","text":"T_partial Gamma_d = T_d","category":"page"},{"location":"mantle/","page":"Mantle Convection","title":"Mantle Convection","text":"and a no-flux conditions on the remaining  boundaries","category":"page"},{"location":"mantle/","page":"Mantle Convection","title":"Mantle Convection","text":"nabla Tcdot n_partial Omega backslash Gamma_d = 0","category":"page"},{"location":"mantle/","page":"Mantle Convection","title":"Mantle Convection","text":"where n is the unit normal at the boundary. For the Stokes equation, we assume a free-slip mechanical condition on all boundaries","category":"page"},{"location":"mantle/","page":"Mantle Convection","title":"Mantle Convection","text":"u cdot n = 0qquad n times (ntimes sigma n) = 0","category":"page"},{"location":"elastodynamics/#Elastodynamics","page":"Elastodynamics","title":"Elastodynamics","text":"","category":"section"},{"location":"elastodynamics/","page":"Elastodynamics","title":"Elastodynamics","text":"The governing equation for elastodynamics is ","category":"page"},{"location":"elastodynamics/","page":"Elastodynamics","title":"Elastodynamics","text":"beginaligned\nfracpartial^2 upartial t^2 = mathrmdivsigma + f Omegatimes 0T\nsigma n = t  Gamma_Ntimes 0T\nu = u_0  Gamma_Dtimes0T\nendaligned","category":"page"},{"location":"elastodynamics/","page":"Elastodynamics","title":"Elastodynamics","text":"The constitutive law is given by ","category":"page"},{"location":"elastodynamics/","page":"Elastodynamics","title":"Elastodynamics","text":"sigma = Cvarepsilon","category":"page"},{"location":"elastodynamics/","page":"Elastodynamics","title":"Elastodynamics","text":"We fix the left side of the plate. We use the alpha method [alpha].","category":"page"},{"location":"elastodynamics/","page":"Elastodynamics","title":"Elastodynamics","text":"[alpha]: Hughes, Thomas JR. The finite element method: linear static and dynamic finite element analysis. Courier Corporation, 2012. ","category":"page"},{"location":"elastodynamics/","page":"Elastodynamics","title":"Elastodynamics","text":"Gravity External Force\n(Image: ) (Image: )","category":"page"},{"location":"elastodynamics/","page":"Elastodynamics","title":"Elastodynamics","text":"β = 1/4; γ = 1/2\na = b = 0.1\nm = 40\nn = 20\nh = 0.01\nNT = 200\nΔt = 1/NT \nbdedge = []\nfor j = 1:n \n  push!(bdedge, [(j-1)*(m+1)+m+1 j*(m+1)+m+1])\nend\nbdedge = vcat(bdedge...)\n\nbdnode = Int64[]\nfor j = 1:n+1\n  push!(bdnode, (j-1)*(m+1)+1)\nend\n\nM = compute_fem_mass_matrix1(m, n, h)\nS = spzeros((m+1)*(n+1), (m+1)*(n+1))\nM = [M S;S M]\n\nK = compute_fem_stiffness_matrix(D, m, n, h)\nC = a*M + b*K # damping matrix \n\nL = M + γ*Δt*C + β*Δt^2*K\nL, Lbd = fem_impose_Dirichlet_boundary_condition(L, bdnode, m, n, h)\n\na = zeros(2(m+1)*(n+1))\nv = zeros(2(m+1)*(n+1))\nd = zeros(2(m+1)*(n+1))\nU = zeros(2(m+1)*(n+1),NT+1)\nfor i = 1:NT \n  T = eval_f_on_boundary_edge((x,y)->0.01, bdedge, m, n, h)\n  # T = eval_f_on_boundary_edge((x,y)->0.0, bdedge, m, n, h)\n  T = [zeros(length(T)) -T]\n  T = compute_fem_traction_term(T, bdedge, m, n, h)\n  f1 = eval_f_on_gauss_pts((x,y)->0., m, n, h)\n  f2 = eval_f_on_gauss_pts((x,y)->0., m, n, h)\n  # f2 = eval_f_on_gauss_pts((x,y)->0.1, m, n, h)\n  F = compute_fem_source_term(f1, f2, m, n, h)\n\n  rhs = F+T\n\n  td = d + Δt*v + Δt^2/2*(1-2β)*a \n  tv = v + (1-γ)*Δt*a \n  rhs = rhs - C*tv - K*td\n  rhs[[bdnode; bdnode.+(m+1)*(n+1)]] .= 0.0\n\n  a = L\\rhs \n  d = td + β*Δt^2*a \n  v = tv + γ*Δt*a \n  U[:,i+1] = d\nend\n\nx = []\ny = []\nfor j= 1:n+1\n  for i = 1:m+1\n    push!(x, (i-1)*h)\n    push!(y, (j-1)*h)\n  end\nend\nfor i = 1:10:NT+1\n  close(\"all\")\n  scatter(x+U[1:(m+1)*(n+1), i], y+U[(m+1)*(n+1)+1:end, i])\n  xlabel(\"x\")\n  ylabel(\"y\")\n  k = string(i)\n  k = repeat(\"0\", 3-length(k))*k \n  title(\"t = $k\")\n  ylim(-0.05,0.25)\n  gca().invert_yaxis()\n  savefig(\"u$k.png\")\nend","category":"page"},{"location":"gallery/#PDE-Galleries","page":"PDE Galleries","title":"PDE Galleries","text":"","category":"section"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"Here is a collection of common partial differential equations and how you can solve them using the PoreFlow library. Unless we specify particularly, the computational domain will be Omega = 01^2. The configuration of the computational domain is as follows","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"(Image: )","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"We only show the forward modeling, but the inverse modeling is a by-product of the AD-capable implementation!","category":"page"},{"location":"gallery/#Poisson's-Equation","page":"PDE Galleries","title":"Poisson's Equation","text":"","category":"section"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"Consider the Poisson's equation ","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"-Delta u = f qquad u_partial Omega = 0","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"The analytical solution is given by ","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"u(xy) = sin pi x sin pi y","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"We have","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"f(xy) = 2pi^2 sin pi x sin pi y","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"using PyPlot \nusing PoreFlow\n\nm = 50; n = 50; h = 1/n \n\nA = constant(compute_fem_laplace_matrix1(m, n, h))\nF = eval_f_on_gauss_pts((x,y)->2π^2*sin(π*x)*sin(π*y), m, n, h)\nbd = bcnode(\"all\", m, n, h)\nA, _ = fem_impose_Dirichlet_boundary_condition1(A, bd, m, n, h)\nrhs = compute_fem_source_term1(F, m, n, h)\nrhs[bd] .= 0.0\nsol = A\\rhs\n\nsess = Session(); init(sess)\nS = run(sess, sol)\n\nfigure(figsize=(10,4))\nsubplot(121)\nvisualize_scalar_on_fem_points(S, m, n, h)\ntitle(\"Computed\")\nsubplot(122)\nvisualize_scalar_on_fem_points(eval_f_on_fem_pts((x,y)->sin(π*x)*sin(π*y), m, n, h), m, n, h)\ntitle(\"Reference\")","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"(Image: )","category":"page"},{"location":"gallery/#Stokes's-Problem","page":"PDE Galleries","title":"Stokes's Problem","text":"","category":"section"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"The Stokes problem is given by ","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"beginaligned\n-nuDelta mathbfu + nabla p = mathbff  text in  Omega  \nnabla cdot mathbfu = 0  text in  Omega  \nmathbfu = mathbf0  text on  partial Omega\nendaligned","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"Here nu denotes the fluid viscosity, f is the unit external volumetric force acting on the fluid, p is the pressure, and mathbfu is the fluid velocity. ","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"The boundary conditions are given by ","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"beginaligned\nmathbfu  = mathbf0  text in  Gamma_1  \nmathbfu times mathbfn  = mathbf0  text on  Gamma_2  \np = p_0  text on  Gamma_2\nendaligned","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"Here partial Omega = barGamma_1cup bar Gamma_2, Gamma_1cap Gamma_2 = emptyset. ","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"The second boundary condition indicates that there is no tangential flow. A realistic example is  the cerebral venous network. Gamma_1  corresponds to the lateral boundary (the vessel wall), and Gamma_2 corresponds to the the union of inflow/outflow boundaries. ","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"info: Info\nIn the weak form, the boundary term from -nuDeltamathbfu is  int_Omega u_x v_1 n_1 + u_y v_1 n_2 + v_x v_2 n_1 + v_2 v_2 n_2 dmathbfx Note that on the no tangential flow boundary gives  un_2 = n_1 v Rightarrow u_y n_2  = v_y n_1 Additionally, we have from incompressibility  u_x + v_y = 0Combining the above two equations we have u_x v_1 n_1 + u_y v_1 n_2 = 0Likewise, v_x v_2 n_1 + v_2 v_2 n_2 = 0 on the no tangential boundary. For the other boundary Gamma_1, these two terms vanishes because v_1 = v_2 = 0. Therefore, the current boundary condition leads to a zero boundary term. ","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"We consider the following analytical solution ","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"beginaligned\nu(xy) = 2pisin(pi x)sin(pi x)cos(pi y)sin(pi y) \nv(xy) = -2pisin(pi x)sin(pi y)cos(pi x)sin(pi y)  \np(xy) = sin(pi x)sin(pi y)\nendaligned","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"and we let nu=05. ","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"using PoreFlow\nusing PyPlot\nusing SparseArrays\n\nm = 60\nn = 60\nh = 1/n\n\nfunction f1func(x,y)\n    18.8495559215388*pi^2*sin(pi*x)^2*sin(pi*y)*cos(pi*y) - 6.28318530717959*pi^2*sin(pi*y)*cos(pi*x)^2*cos(pi*y) + pi*sin(pi*y)*cos(pi*x)\nend\nfunction f2func(x,y)\n    -18.8495559215388*pi^2*sin(pi*x)*sin(pi*y)^2*cos(pi*x) + 6.28318530717959*pi^2*sin(pi*x)*cos(pi*x)*cos(pi*y)^2 + pi*sin(pi*x)*cos(pi*y)\nend\n\n\nν = 0.5\nK = ν*constant(compute_fem_laplace_matrix(m, n, h))\nB = constant(compute_interaction_matrix(m, n, h))\nZ = [K -B'\n-B spdiag(zeros(size(B,1)))]\n\nbd = bcnode(\"all\", m, n, h)\nbd = [bd; bd .+ (m+1)*(n+1); ((1:m) .+ 2(m+1)*(n+1))]\nZ, _ = fem_impose_Dirichlet_boundary_condition1(Z, bd, m, n, h)\n\n\nF1 = eval_f_on_gauss_pts(f1func, m, n, h)\nF2 = eval_f_on_gauss_pts(f2func, m, n, h)\nF = compute_fem_source_term(F1, F2, m, n, h)\nxy = fvm_nodes(m, n, h)\nrhs = [F;zeros(m*n)]\nrhs[bd] .= 0.0\nsol = Z\\rhs \n\nsess = Session(); init(sess)\nS = run(sess, sol)\n\nxy = fem_nodes(m, n, h)\nx, y = xy[:,1], xy[:,2]\nU = @. 2*pi*sin(pi*x)*sin(pi*x)*cos(pi*y)*sin(pi*y)\nfigure(figsize=(12,5))\nsubplot(121)\nvisualize_scalar_on_fem_points(U, m, n, h)\ntitle(\"Reference\")\nsubplot(122)\nvisualize_scalar_on_fem_points(S[1:(m+1)*(n+1)], m, n, h)\ntitle(\"Computed\")\nsavefig(\"stokes1.png\")\n\nU = @. -2*pi*sin(pi*x)*sin(pi*y)*cos(pi*x)*sin(pi*y)\nfigure(figsize=(12,5))\nsubplot(121)\nvisualize_scalar_on_fem_points(U, m, n, h)\ntitle(\"Reference\")\nsubplot(122)\nvisualize_scalar_on_fem_points(S[(m+1)*(n+1)+1:2(m+1)*(n+1)], m, n, h)\ntitle(\"Computed\")\nsavefig(\"stokes2.png\")\n\n\nxy = fvm_nodes(m, n, h)\nx, y = xy[:,1], xy[:,2]\np = @. sin(pi*x)*sin(pi*y)\nfigure(figsize=(12,5))\nsubplot(121)\nvisualize_scalar_on_fvm_points(p, m, n, h)\ntitle(\"Reference\")\nsubplot(122)\nvisualize_scalar_on_fvm_points(S[2(m+1)*(n+1)+1:end], m, n, h)\ntitle(\"Computed\")","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"Variable Result\nu (Image: )\nv (Image: )\np (Image: )","category":"page"},{"location":"gallery/#Heat-Transfer","page":"PDE Galleries","title":"Heat Transfer","text":"","category":"section"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"We consider the following heat transfer equation ","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"beginaligned\nfracpartial Tpartial t + mathbfu cdot nabla T - nabla^2 T = f  \nT_partial Omega = 0\nendaligned","category":"page"},{"location":"gallery/#Test-Problem","page":"PDE Galleries","title":"Test Problem","text":"","category":"section"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"Let us first consider a test problem and consider the analytical solution ","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"T(xy) = (1-x)x(1-y)ye^-t","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"and mathbfu = beginpmatrix 1 1 endpmatrix. The right hand side is given by ","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"using SymPy\nx, y, t = @vars x y t \nT = (1-x)*x*(1-y)*y*exp(-t)\nf = diff(T, t) + diff(T, x) + diff(T, y) - diff(diff(T, x), x) - diff(diff(T, y), y)\nprintln(replace(replace(sympy.julia_code(f), \".*\"=>\"*\"), \".^\"=>\"^\"))","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"We can plug the source term into the code ","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"using PoreFlow\nusing PyPlot\n\nm = 50\nn = 50\nh = 1/n\nNT = 100\nΔt = 1/NT \n\n\nu = [ones(m*n);ones(m*n)]\n\nbd = bcedge(\"all\", m, n, h)\n\nM = compute_fvm_mass_matrix(m, n, h)\nK, rhs1 = compute_fvm_advection_matrix(u, bd, zeros(size(bd, 1)), m, n, h)\nS, rhs2 = compute_fvm_tpfa_matrix(missing, bd, zeros(size(bd, 1)), m, n, h)\n\nfunction Func(x, y, t)\n    -x*y*(1 - x)*(1 - y)*exp(-t) - x*y*(1 - x)*exp(-t) - x*y*(1 - y)*exp(-t) + x*(1 - x)*(1 - y)*exp(-t) + 2*x*(1 - x)*exp(-t) + y*(1 - x)*(1 - y)*exp(-t) + 2*y*(1 - y)*exp(-t)\nend\n\nA = M/Δt + K - S \nA = factorize(A)\nU = zeros(m*n, NT+1)\nxy = fvm_nodes(m, n, h)\nx, y = xy[:,1], xy[:,2]\nu0 = @. x*(1-x)*y*(1-y)\nF = zeros(NT+1, m*n)\nSolution = zeros(NT+1, m*n)\nfor i = 1:NT+1\n    t = (i-1)*Δt\n    F[i,:] = h^2 * @. Func(x, y, t)\n    Solution[i,:] = eval_f_on_fvm_pts((x,y)->(1-x)*x*(1-y)*y*exp(-t), m,n, h)\nend\nF = constant(F)\n\nfunction condition(i, args...)\n    i <= NT\nend\n\nfunction body(i, u_arr)\n    u = read(u_arr, i)\n    u_arr = write(u_arr, i+1, A\\(M*u/Δt - rhs1 + rhs2 + F[i+1]))\n    return i+1, u_arr\nend\n\ni = constant(1, dtype = Int32)\nu_arr = TensorArray(NT+1)\nu_arr = write(u_arr, 1, u0)\n_, u = while_loop(condition, body, [i, u_arr])\nu = set_shape(stack(u), (NT+1, m*n))\n\n\nsess = Session(); init(sess)\nU = run(sess, u)\nZ = zeros(NT+1, n, m)\n\n\np = visualize_scalar_on_fvm_points(U, m, n, h)\n# saveanim(p, \"heat_sol.gif\")\n\np = visualize_scalar_on_fvm_points(abs.(U-Solution), m, n, h)\n# saveanim(p, \"heat_error.gif\")\n","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"Computed Error\n(Image: ) (Image: )","category":"page"},{"location":"gallery/#Advection-Effect","page":"PDE Galleries","title":"Advection Effect","text":"","category":"section"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"Now let us consider the advection effect. The upper and lower boundaries are fixed Dirichlet boundaries. The left and right are no-flow boundaries ","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"fracpartial Tpartial n = 0","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"using PoreFlow\nusing PyPlot\n\nm = 40\nn = 20\nh = 1/n\nNT = 100\nΔt = 1/NT \n\n\nu = 0.5*[ones(m*n);zeros(m*n)]\n\nup_and_down = bcedge(\"upper|lower\", m, n, h)\n\nM = compute_fvm_mass_matrix(m, n, h)\nK, rhs1 = compute_fvm_advection_matrix(u, up_and_down, zeros(size(up_and_down, 1)), m, n, h)\nS, rhs2 = compute_fvm_tpfa_matrix(missing, up_and_down, zeros(size(up_and_down, 1)), m, n, h)\n\nA = M/Δt + K - 0.01*S \nA = factorize(A)\n\nU = zeros(m*n, NT+1)\nxy = fvm_nodes(m, n, h)\nu0 = @. exp( - 10 * ((xy[:,1]-1.0)^2 + (xy[:,2]-0.5)^2))\n\nfunction condition(i, args...)\n    i <= NT\nend\n\nfunction body(i, u_arr)\n    u = read(u_arr, i)\n    u_arr = write(u_arr, i+1, A\\(M*u/Δt - rhs1 + rhs2))\n    return i+1, u_arr\nend\n\ni = constant(1, dtype = Int32)\nu_arr = TensorArray(NT+1)\nu_arr = write(u_arr, 1, u0)\n_, u = while_loop(condition, body, [i, u_arr])\nu = set_shape(stack(u), (NT+1, m*n))\n\n\nsess = Session(); init(sess)\nU = run(sess, u)\nZ = zeros(NT+1, n, m)\nfor i = 1:NT+1\n    Z[i,:,:] = reshape(U[i,:], m, n)'\nend\np = visualize_scalar_on_fvm_points(Z, m, n, h)\nsaveanim(p, \"advec.gif\")\n","category":"page"},{"location":"gallery/","page":"PDE Galleries","title":"PDE Galleries","text":"(Image: )","category":"page"},{"location":"mfem_tutorial/#Unstructured-Meshes-in-PoreFlow","page":"Unstructured Meshes in PoreFlow","title":"Unstructured Meshes in PoreFlow","text":"","category":"section"},{"location":"mfem_tutorial/","page":"Unstructured Meshes in PoreFlow","title":"Unstructured Meshes in PoreFlow","text":"PoreFlow.jl also provides unstructured mesh support by leveraging MFEM as the finite element backend. ","category":"page"},{"location":"mfem_tutorial/","page":"Unstructured Meshes in PoreFlow","title":"Unstructured Meshes in PoreFlow","text":"The APIs are designed such that they are consistent with structured meshes. For most of the functions, we only need to replace geometry parameters m, n, h with mesh, which is a Mesh instance. The triangular elements are the default in the PoreFlow unstructured mesh module.  Mesh can be constructed using a Ntimes 2 node vector and a Etimes 3 element vector (1-based); for example:","category":"page"},{"location":"mfem_tutorial/","page":"Unstructured Meshes in PoreFlow","title":"Unstructured Meshes in PoreFlow","text":"nodes = [0.0 0.0;1.0 0.0;0.0 1.0;1.0 1.0]\nelems = [1 2 3;2 3 4]\nmesh = Mesh(nodes, elems)","category":"page"},{"location":"mfem_tutorial/","page":"Unstructured Meshes in PoreFlow","title":"Unstructured Meshes in PoreFlow","text":"Particularly, we provide a convenient constructor for constructing meshes on a rectangle: ","category":"page"},{"location":"mfem_tutorial/","page":"Unstructured Meshes in PoreFlow","title":"Unstructured Meshes in PoreFlow","text":"mesh = Mesh(m, n, h)\nvisualize_mesh(mesh)","category":"page"},{"location":"mfem_tutorial/","page":"Unstructured Meshes in PoreFlow","title":"Unstructured Meshes in PoreFlow","text":"(Image: ) Because we do not use the static condensation technique for tackling boundary conditions, there is no need to specify boundary conditions at this point. Plus, the lack of boundary conditions make it easier to develope re-usable custom operators for the finite element method. ","category":"page"},{"location":"mfem_tutorial/","page":"Unstructured Meshes in PoreFlow","title":"Unstructured Meshes in PoreFlow","text":"The following script shows how to use an unstructured mesh to solve the Poisson equation here","category":"page"},{"location":"mfem_tutorial/","page":"Unstructured Meshes in PoreFlow","title":"Unstructured Meshes in PoreFlow","text":"using PyPlot \nusing PoreFlow\n\nm = 50; n = 50; h = 1/n \nmesh = Mesh(m, n, h)\nkappa = constant(ones(get_ngauss(mesh)))\nA = compute_fem_laplace_matrix1(kappa, mesh)\nF = constant(eval_f_on_gauss_pts((x,y)->2π^2*sin(π*x)*sin(π*y), mesh))\n\nbd = Int64[]\nfor j = 1:m+1\n    push!(bd, j)\n    push!(bd, n*(m+1)+j)\nend\nfor i = 2:n\n    push!(bd, (i-1)*(m+1)+1)\n    push!(bd, (i-1)*(m+1)+m+1)\nend\n\nA, _ = fem_impose_Dirichlet_boundary_condition1(A, bd, mesh)\nrhs = compute_fem_source_term1(F, mesh)\nrhs = scatter_update(rhs, bd, zeros(length(bd)))\nsol = A\\rhs\n\nsess = Session(); init(sess)\nS = run(sess, sol)\n\nfigure(figsize=(10,4))\nsubplot(121)\nvisualize_scalar_on_fem_points(S, mesh)\ntitle(\"Computed\")\nsubplot(122)\nvisualize_scalar_on_fem_points(eval_f_on_fem_pts((x,y)->sin(π*x)*sin(π*y), mesh), mesh)\ntitle(\"Reference\")","category":"page"},{"location":"mfem_tutorial/","page":"Unstructured Meshes in PoreFlow","title":"Unstructured Meshes in PoreFlow","text":"(Image: )","category":"page"},{"location":"mfem_tutorial/","page":"Unstructured Meshes in PoreFlow","title":"Unstructured Meshes in PoreFlow","text":"As a more interesting example, we consider the domain with two holes. Here we let the right hand side be 1. We impose Dirichlet boundary conditions on the bounding box and Neumann boundary conditions around the disc boundaries. ","category":"page"},{"location":"mfem_tutorial/","page":"Unstructured Meshes in PoreFlow","title":"Unstructured Meshes in PoreFlow","text":"using PyPlot \nusing PoreFlow\n\nmesh = Mesh(\"twoholes.msh\")\n\nkappa = constant(ones(get_ngauss(mesh)))\nA = compute_fem_laplace_matrix1(kappa, mesh)\nF = constant(eval_f_on_gauss_pts((x,y)->1.0, mesh))\n\nbd = Int64[]\nfor i = 1:size(mesh.nodes, 1)\n    x = mesh.nodes[i,1]\n    y = mesh.nodes[i,2]\n    if abs(x-0.049)<1e-5 || abs(x)<1e-5 || abs(y)<1e-5 || abs(y-0.023)<1e-5\n        push!(bd, i)\n    end\nend\n\nA, _ = fem_impose_Dirichlet_boundary_condition1(A, bd, mesh)\nrhs = compute_fem_source_term1(F, mesh)\nrhs = scatter_update(rhs, bd, zeros(length(bd)))\nsol = A\\rhs\n\nsess = Session(); init(sess)\nS = run(sess, sol)\n\nvisualize_scalar_on_fem_points(S, mesh)\nsavefig(\"uPoisson.png\")","category":"page"},{"location":"mfem_tutorial/","page":"Unstructured Meshes in PoreFlow","title":"Unstructured Meshes in PoreFlow","text":"(Image: )","category":"page"},{"location":"mfem_mesh/#Construct-Unstructured-Meshes-for-PoreFlow","page":"Construct Unstructured Meshes for PoreFlow","title":"Construct Unstructured Meshes for PoreFlow","text":"","category":"section"},{"location":"mfem_mesh/","page":"Construct Unstructured Meshes for PoreFlow","title":"Construct Unstructured Meshes for PoreFlow","text":"PoreFlow does not have its own mesh generator. This provides users with flexibility to user a third-party mesh generator. In general, users only need to provide the coordinates (nodes) and connectivity matrix (elems). As mentioned in this page, PoreFlow does not use static condensation for tackling boundary conditions; therefore, we do not need to specify the boundary conditions for the mesh. ","category":"page"},{"location":"mfem_mesh/","page":"Construct Unstructured Meshes for PoreFlow","title":"Construct Unstructured Meshes for PoreFlow","text":"The Mesh function in PoreFlow can also any any mesh files supported by meshio. In this article, we show an example how to generate a stl data file using Gmsh. ","category":"page"},{"location":"mfem_mesh/","page":"Construct Unstructured Meshes for PoreFlow","title":"Construct Unstructured Meshes for PoreFlow","text":"After defining the geometry and generating the mesh in the Gmsh software, we export the mesh in the file menu:","category":"page"},{"location":"mfem_mesh/","page":"Construct Unstructured Meshes for PoreFlow","title":"Construct Unstructured Meshes for PoreFlow","text":"(Image: )","category":"page"},{"location":"mfem_mesh/","page":"Construct Unstructured Meshes for PoreFlow","title":"Construct Unstructured Meshes for PoreFlow","text":"Make sure you save the file as stl format","category":"page"},{"location":"mfem_mesh/","page":"Construct Unstructured Meshes for PoreFlow","title":"Construct Unstructured Meshes for PoreFlow","text":"(Image: )","category":"page"},{"location":"mfem_mesh/","page":"Construct Unstructured Meshes for PoreFlow","title":"Construct Unstructured Meshes for PoreFlow","text":"You can read the file (e.g., example.stl) into PoreFlow with ","category":"page"},{"location":"mfem_mesh/","page":"Construct Unstructured Meshes for PoreFlow","title":"Construct Unstructured Meshes for PoreFlow","text":"mesh = Mesh(\"example.stl\")","category":"page"},{"location":"mfem_mesh/","page":"Construct Unstructured Meshes for PoreFlow","title":"Construct Unstructured Meshes for PoreFlow","text":"PoreFlow also has some built-in mesh data. They are stored in PDATA directory. You can load them directly via","category":"page"},{"location":"mfem_mesh/","page":"Construct Unstructured Meshes for PoreFlow","title":"Construct Unstructured Meshes for PoreFlow","text":"mesh = Mesh(joinpath(PDATA, \"twoholes.stl\"))","category":"page"},{"location":"SteadyStateNavierStokes/#Steady-state-Navier-Stokes-equations","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"","category":"section"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"The Navier-Stokes equations describe the motion of viscous flow formed by a fluid material. Assume the material has density rho, dynamic viscosity mu, velocity bf u, pressure p, and body accelerations bf g, the Navier-Stokes equations include the the continuity equation, which describes the conservation of mass:","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"fracpartial rhopartial t + sum_i fracpartial rho u_ipartial x_i = 0","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"and the momentum equation, which describes the conservation of momentum in each spatial direction:","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"fracpartial rho u_ipartial t + sum_j fracpartial rho u_i u_jpartial x_j = sum_j fracpartial tau_ijpartial x_j - fracpartial p partial x_i+rho g_i quad forall i","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"where the stress tensor tau_ij is defined as tau_ij = mu left(fracpartial u_ipartial x_j + fracpartial u_jpartial x_i right) - frac23 mu delta_ij fracpartial u_jpartial x_j","category":"page"},{"location":"SteadyStateNavierStokes/#Steady-state-Navier-Stokes-equations-for-incompressible-flow","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations for incompressible flow","text":"","category":"section"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"We assume the fluid material is incompressible with constant density rho, and we denote its the kinematic viscosity as nu=mu  rho. We assume that the system has reached a steady state. Then, the steady-state incompressible Navier-Stokes equations in two spatial dimensions are given by","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"fracpartial upartial x+fracpartial vpartial y=0 tag1","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"u fracpartial upartial x+v fracpartial upartial y=-frac1rho fracpartial ppartial x+nuleft(fracpartial^2 upartial x^2+fracpartial^2 upartial y^2right)+f tag2","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"u fracpartial vpartial x+v fracpartial vpartial y=-frac1rho fracpartial ppartial y+nuleft(fracpartial^2 vpartial x^2+fracpartial^2 vpartial y^2right)+g tag3","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"where (1) is the continuity equation and (2)-(3) are the momentum equations.","category":"page"},{"location":"SteadyStateNavierStokes/#The-Newton's-method","page":"Steady-state Navier-Stokes equations","title":"The Newton's method","text":"","category":"section"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"Let delta u denote the finite element basis for u, and delta v denote the finite element basis for v. To derive the weak form, we multiply both sides of (2)-(3) by delta u and delta v, respectively.","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"left(u fracpartial upartial x delta uright)+ left(v fracpartial upartial y  delta uright) =  -frac1rho left(fracpartial ppartial x delta uright)+nuleft(fracpartial^2 upartial x^2+fracpartial^2 upartial y^2  delta uright)+left(f delta uright)","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"left(u fracpartial vpartial x delta vright) + left(v fracpartial vpartial y delta vright) = -frac1rholeft( fracpartial ppartial y delta vright) +nuleft(fracpartial^2 vpartial x^2+fracpartial^2 vpartial y^2  delta vright)+ left( g delta vright)","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"Then we have the following weak form","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"left(u fracpartial upartial x delta uright)+ left(v fracpartial upartial y  delta uright) =  frac1rho left(p  fracpartial delta upartial xright)-nuleft(nabla u nabla delta uright)+left(f delta uright) tag4","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"left(u fracpartial vpartial x delta vright) + left(v fracpartial vpartial y delta vright) = frac1rholeft(p fracpartial delta vpartial yright) -nuleft(nabla v nabladelta vright)+ left( g delta vright) tag5","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"Additionally, we multiply both sides of (1) by delta p, then we have","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"left(fracpartial upartial x delta pright) + left(fracpartial vpartial y delta p right) = 0 tag6","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"The weak form (4),(5), and (6) are nonlinear in u and v. We use the Newton's method to solve coupled system  iteratively.","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"To this end, we define the residual functions","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"F(uv) = left(u fracpartial upartial x delta uright)+ left(v fracpartial upartial y  delta uright) -  frac1rho left(p  fracpartial delta upartial xright)+ nuleft(nabla u nabla delta uright)-left(f delta uright)","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"G(uv) = left(u fracpartial vpartial x delta vright) + left(v fracpartial vpartial y delta vright) -frac1rholeft(p fracpartial delta vpartial yright) +nuleft(nabla v nabladelta vright)- left( g delta vright)","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"H(u v) = left(fracpartial upartial x delta pright) + left(fracpartial vpartial y delta p right)","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"we have the following equation for one iteration of the Newton's method","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"beginbmatrixnabla_u F(uv)   nabla_v F(uv)  nabla_p F(u v)   nabla_u G(uv)   nabla_v G(uv)  nabla_p G(u v)  nabla_u H(u v)  nabla_v H(uv)  0endbmatrix beginbmatrixDelta u Delta v  Delta pendbmatrix = - beginbmatrixF(uv)  G(uv)H(uv) endbmatrix tag4","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"beginbmatrix u_new v_new  p_new endbmatrix = beginbmatrix u v  pendbmatrix + beginbmatrixDelta u Delta v Delta p endbmatrix","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"We use Taylor's expansion to linearize F(u+Delta u v+Delta v) G(u+Delta u v+Delta v) and obtain","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"F(u+Delta u v+Delta v) = F(uv) + nabla_u F(uv)Delta u   + nabla_v F(uv) Delta v","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"G(u+Delta u v+Delta v) = G(uv) + nabla_u G(uv) Delta u + nabla_v G(uv)Delta v","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"Thus, we have","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"nabla_u F(uv)Delta u = left(Delta u fracpartial upartial x delta uright) +left(u fracpartial Delta u partial x delta uright)+ left(v fracpartial Delta u partial y delta uright) + (nunabla (Delta u) nabla delta u)","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"nabla_v F(uv)Delta v = left(Delta v fracpartial upartial y delta uright)","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"nabla_u G(uv)Delta u = left(Delta u fracpartial vpartial x delta vright)","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"nabla_v G(uv)Delta v = left(Delta v fracpartial vpartial y delta vright) +left(v fracpartial Delta v partial y delta vright)+ left(u fracpartial Delta v partial x delta vright) +ν (nabla (Delta v) nabla delta v)","category":"page"},{"location":"SteadyStateNavierStokes/#Numerical-experiments","page":"Steady-state Navier-Stokes equations","title":"Numerical experiments","text":"","category":"section"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"Results of numerical experiments are summarized in the table below. In each case, we assume that the steady-state velocity field is measured at a sample of locations, represented by a sample of grid points in the finite element method. We solve the optimization problem to minimize the difference between the measured velocity and the computed velocity based on the current model parameters. In order to model the uncertainty in the measured data, we include a noise level when we transform the solution to the forwrad problem into measured data: each data will be multiplied by a random scalar which is uniform on (1-noiselevel, 1+noiselevel)","category":"page"},{"location":"SteadyStateNavierStokes/","page":"Steady-state Navier-Stokes equations","title":"Steady-state Navier-Stokes equations","text":"grid size sample size noise level number of iterations exact viscosity predicted viscosity\n20 by 20 20 0 28 0.01 0.010000000000000004\n20 by 20 20 0.01 26 0.01 0.010025030255978819\n20 by 20 20 0.05 27 0.01 0.009872678483953757\n20 by 20 20 0.10 28 0.01 0.009981956568710024\n20 by 20 20 0.20 28 0.01 0.008823737264381126\n20 by 20 20 0.20 29 0.01 0.010599176390172771\n20 by 20 20 0.20 50 0.01 0.009202237809712532","category":"page"},{"location":"#PoreFlow.jl-Documentation","page":"PoreFlow.jl Documentation","title":"PoreFlow.jl Documentation","text":"","category":"section"},{"location":"","page":"PoreFlow.jl Documentation","title":"PoreFlow.jl Documentation","text":"PoreFlow is an open-source package that accompanies ADCME.jl for solving inverse problems involving partial differential equations (PDEs). PoreFlow provides users a rich collection of operators, which users can use to quickly build finite element/volumn codes for forward computation. More importantly, these operators can back-propagate gradients, and therefore users can calculate the gradients using the ideas of adjoint methods and reverse-mode automatic differention (these two concepts overlap). The advanced physics constrained learning (PCL) approach enables users to back-propagate gradients through iterative and nonlinear solvers efficiently. PoreFlow offers a flexible interface for experienced researchers to develop their own operators. ","category":"page"},{"location":"#Expressing-Numerical-Simulation-as-a-Computational-Graph","page":"PoreFlow.jl Documentation","title":"Expressing Numerical Simulation as a Computational Graph","text":"","category":"section"},{"location":"","page":"PoreFlow.jl Documentation","title":"PoreFlow.jl Documentation","text":"As an example, we consider solving the Poisson's equation  nabla cdot (kappanabla u) = f mathbfxin partial Omega qquad u(mathbfx) = 0 mathbfxin partial Omega Here kappa is an unknown parameter, which we want to estimate. The corresponding variational form is  int_Omegakappa nabla ucdot nabla vdx = - int_Omega fv dx In PoreFlow, consider a (m+1)times (n+1) uniform grid with step size h, the finite element solution can be expressed as ","category":"page"},{"location":"","page":"PoreFlow.jl Documentation","title":"PoreFlow.jl Documentation","text":"κ = Variable(1.0)\nA = κ * compute_fem_laplace_matrix1(m, n, h)\nF0 = eval_f_on_gauss_pts(f, m, n, h)\nF = compute_fem_source_term1(F0, m, n, h)\nsol = A\\F ","category":"page"},{"location":"","page":"PoreFlow.jl Documentation","title":"PoreFlow.jl Documentation","text":"In the inverse problem, we formulate the loss function as the difference of the solution vector sol and observations obs at the indices idx","category":"page"},{"location":"","page":"PoreFlow.jl Documentation","title":"PoreFlow.jl Documentation","text":"loss = sum((sol[idx] - obs[idx])^2)","category":"page"},{"location":"","page":"PoreFlow.jl Documentation","title":"PoreFlow.jl Documentation","text":"Note at this point, only the part of the computation that does not depend on kappa is carried out (partial evaluation), and the evaluation of sol is deferred to a later stage. The numerical computation for the partial evaluation is done using Julia and at compilation time. This eliminates much overhead for the optimization phase because only the variable part of the computational graph is executed many times. ","category":"page"},{"location":"","page":"PoreFlow.jl Documentation","title":"PoreFlow.jl Documentation","text":"(Image: )","category":"page"},{"location":"","page":"PoreFlow.jl Documentation","title":"PoreFlow.jl Documentation","text":"The computational graph is constructed implicitly, and users can calculate the gradients, whose computation is also deferred, using ","category":"page"},{"location":"","page":"PoreFlow.jl Documentation","title":"PoreFlow.jl Documentation","text":"gradients(loss, ν)","category":"page"},{"location":"","page":"PoreFlow.jl Documentation","title":"PoreFlow.jl Documentation","text":"To trigger the executation of the computational graph, users can run ","category":"page"},{"location":"","page":"PoreFlow.jl Documentation","title":"PoreFlow.jl Documentation","text":"sess = Session(); init(sess)\nrun(sess, loss)","category":"page"},{"location":"","page":"PoreFlow.jl Documentation","title":"PoreFlow.jl Documentation","text":"The optimization is a one-liner thanks to the ADCME backend:","category":"page"},{"location":"","page":"PoreFlow.jl Documentation","title":"PoreFlow.jl Documentation","text":"BFGS!(sess, loss)","category":"page"},{"location":"#Coupling-Deep-Neural-Networks-and-PDEs","page":"PoreFlow.jl Documentation","title":"Coupling Deep Neural Networks and PDEs","text":"","category":"section"},{"location":"","page":"PoreFlow.jl Documentation","title":"PoreFlow.jl Documentation","text":"Because of the novel idea of expressing numerical simulators as computational graphs, it is extremely easy to coupled deep neural networks or other parametric models with partial differential equations. For example, if we want to use a deep neural network to approximate a spatially-varying kappa(mathbfx), we can use the following codes as a drop-in substitute","category":"page"},{"location":"","page":"PoreFlow.jl Documentation","title":"PoreFlow.jl Documentation","text":"x = gauss_nodes(m, n, h)\nκ = fc(x, [20,20,20,1])\nA = compute_fem_laplace_matrix1(κ, m, n, h)","category":"page"},{"location":"#Installation","page":"PoreFlow.jl Documentation","title":"Installation","text":"","category":"section"},{"location":"","page":"PoreFlow.jl Documentation","title":"PoreFlow.jl Documentation","text":"To install the latest version of PoreFlow, try","category":"page"},{"location":"","page":"PoreFlow.jl Documentation","title":"PoreFlow.jl Documentation","text":"julia> ]\npkg> add https://github.com/kailaix/PoreFlow.jl#master \npkg> build PoreFlow","category":"page"},{"location":"inv_viscoelasticity/#Inverse-Modeling-for-Space-Varying-Viscoelasticity","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"","category":"section"},{"location":"inv_viscoelasticity/#Problem-Description","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Problem Description","text":"","category":"section"},{"location":"inv_viscoelasticity/","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"In this example, we consider the Maxwell viscoelasticity model. The governing equations are","category":"page"},{"location":"inv_viscoelasticity/","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"Momentum Balance:","category":"page"},{"location":"inv_viscoelasticity/","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"sigma_ijj + rho f_i = rho ddot u_i","category":"page"},{"location":"inv_viscoelasticity/","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"Constitutive Relation (Plane Strain Viscoelasticity):","category":"page"},{"location":"inv_viscoelasticity/","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"dot sigma_ij + fracmueta left( sigma_ij - fracsigma_kk3delta_ij right) = 2mu dot varepsilon_ij + lambda dotvarepsilon_kkdelta_ij","category":"page"},{"location":"inv_viscoelasticity/","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"Boundary Conditions:","category":"page"},{"location":"inv_viscoelasticity/","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"beginaligned\nbmsigma mathbfn =\nbegincases\n0  textTop or Bottom  \n-T 0  textRight \nendcases  \nmathbfu =0 texthspace31cm Left \nendaligned","category":"page"},{"location":"inv_viscoelasticity/","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"(Image: )","category":"page"},{"location":"inv_viscoelasticity/","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"We assume that the Lamé constants lambda and mu are given. The viscosity eta is spatial varying. We want to estimate eta based on the measurement of surface horizontal displacements. The true model consists of two layers of different vicosity. ","category":"page"},{"location":"inv_viscoelasticity/","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"True Viscosity Distribution Von Mises Stress Displacement\n(Image: ) (Image: ) (Image: )","category":"page"},{"location":"inv_viscoelasticity/#Forward-simulation","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Forward simulation","text":"","category":"section"},{"location":"inv_viscoelasticity/","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"We implement the forward simulation using finite element analysis discretization and alpha-scheme, an implicit time stepping scheme that offers good stability and accuracy. ","category":"page"},{"location":"inv_viscoelasticity/#Inversion-Method","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inversion Method","text":"","category":"section"},{"location":"inv_viscoelasticity/","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"We formulate the loss function as the discrepancy between observations and predictions","category":"page"},{"location":"inv_viscoelasticity/","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"mathcalJ(eta) = sum_i=1^N_T sum_k=1^m+1 (mathbfu_ik^mathrmobs- mathbfu_i(x_k 0))^2","category":"page"},{"location":"inv_viscoelasticity/","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"Unlike the linear elasticity case, in the viscoelasticity case, the stress is history-dependent. Therefore, when we calculate the gradients fracpartialmathcalJpartial eta, the state variables are both mathbfu and bmsigma. Additionally, in each time step, since we have used an implicit scheme, we need to solve an equation ","category":"page"},{"location":"inv_viscoelasticity/","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"A(eta bmsigma^n+1) mathbfu^n+1 = mathbff(bmsigma^n mathbfu^n)","category":"page"},{"location":"inv_viscoelasticity/","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"The state adjoint method requires us to compute the gradients of ","category":"page"},{"location":"inv_viscoelasticity/","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"mathbfu^n+1(bmsigma^n eta mathbfu^n) = A(eta bmsigma^n+1)^-1 mathbff(bmsigma^n mathbfu^n)tag1","category":"page"},{"location":"inv_viscoelasticity/","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"with respect to bmsigma^n, eta and mathbfu^n. ","category":"page"},{"location":"inv_viscoelasticity/","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"Surprisingly, the seemingly complex formula (1) admits a simple implementation using automatic differentiation (of course a special technique called physics constrained learning is needed). Once the gradients fracpartialmathcalJpartial eta is computed, the inversion problem can be solved using gradient-based optimization techniques (e.g., LBFGS).","category":"page"},{"location":"inv_viscoelasticity/","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"(Image: )","category":"page"},{"location":"inv_viscoelasticity/#Numerical-Example","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Numerical Example","text":"","category":"section"},{"location":"inv_viscoelasticity/","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"We present the numerical example here. The true model and inverted model are shown as follows. We assume that the viscosity values are the same horizontally. ","category":"page"},{"location":"inv_viscoelasticity/","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"True model Inverted result\n(Image: ) (Image: )","category":"page"},{"location":"inv_viscoelasticity/","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"We also show the inversion results in each iteration:","category":"page"},{"location":"inv_viscoelasticity/","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"(Image: )","category":"page"},{"location":"inv_viscoelasticity/#Codes","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Codes","text":"","category":"section"},{"location":"inv_viscoelasticity/","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"The highlights of the implementation are","category":"page"},{"location":"inv_viscoelasticity/","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"The alpha-scheme for time stepping. A stable scheme is important for inversion since we need to try out different parameters, which may crash the simulation if the scheme is sensitive to physical parameters. Therefore, we chose the alpha scheme, which is an implicit scheme that offers satisfactory stability. \nwhile_loop. while_loop mechanism allows us to create only one computational graph for all the iterations. This is essential for simulations that span large time horizons. Fortunately, TensorFlow offers this functionality. \nCustom sparse solver. We have used custom sparse solvers in ADCME, which uses Eigen SparseLU as the backend. The sparse solver is the key for efficient implementation of physics constrained learning; otherwise, direct implementation in TensorFlow will convert the sparse matrix to dense and then invoke BLAS libraries. ","category":"page"},{"location":"inv_viscoelasticity/","page":"Inverse Modeling for Space Varying Viscoelasticity","title":"Inverse Modeling for Space Varying Viscoelasticity","text":"using Revise\nusing PoreFlow\nusing PyCall\nusing LinearAlgebra\nusing PyPlot\nusing SparseArrays\nusing MAT\nusing ADCMEKit\nnp = pyimport(\"numpy\")\n\n\nstepsize = 1\nif length(ARGS)==1\n  global stepsize = parse(Int64, ARGS[1])\nend\n@info stepsize\n\nmode = \"training\"\n\n## alpha-scheme\nβ = 1/4; γ = 1/2\na = b = 0.1\n\nn = 15\nm = 2n \nh = 0.01\nNT = 100\nΔt = 2.0/NT\nηmax = 1\nηmin = 0.5\n\nobs_idx = collect(1:stepsize:m+1)\n\nbdedge = bcedge(\"right\", m, n, h)\nbdnode = bcnode(\"lower\", m, n, h)\n\n# λ = Variable(1.0)\n# μ = Variable(1.0)\n# invη = Variable(1.0)\n\nfunction eta_model(idx)\n  if idx == 1\n    out = ηmin * ones(n)\n    out[1:div(n,3)] .= ηmax\n    out\n  elseif idx==2\n    out = ηmin * ones(4, m, n)\n    out[:, :, 1:div(n,3)] .= ηmax\n    out[:, :, 2div(n,3):end] .= ηmax\n    out[:]\n  end\nend\n\nfunction visualize_inv_eta(X, k)\n    x = LinRange(0.5h,m*h, m)\n    y = LinRange(0.5h,n*h, n)\n    V = zeros(m, n)\n    for i = 1:m  \n        for j = 1:n \n            elem = (j-1)*m + i \n            V[i, j] = mean(X[4(elem-1)+1:4elem])\n        end\n    end\n    close(\"all\")\n    pcolormesh(x, y, V'/50.0, vmin=ηmin-(ηmax-ηmin)/4, vmax=ηmax+(ηmax-ηmin)/4)\n    colorbar(shrink=0.5)\n    xlabel(\"x\")\n    ylabel(\"y\")\n    # title(\"Iteration = $k\")\n    axis(\"scaled\")\n    gca().invert_yaxis()\n    if k == \"true\"\n      title(\"True Model\")\n      savefig(\"true.png\")\n      return \n    end\n    k_ = string(k)\n    k_ = reduce(*, \"0\" for i = 1:3-length(k_))*k_\n    title(\"Iteration = $k_\")\n    savefig(\"iter$k_.png\")\nend\n\nλ = constant(2.0)\nμ = constant(0.2)\nif mode==\"data\"\n  global invη_var = constant(eta_model(1))\n  invη = reshape(repeat(invη_var, 1, 4m), (-1,))\n  global invη *= 50.0\nelse\n    global invη_var = Variable((ηmin + ηmax)/2*ones(n))\n    invη_ = reshape(repeat(invη_var, 1, 4m), (-1,))\n    # invη_ = constant(eta_model(1))\n    global invη = 50.0*invη_\nend\n\n\n\nfn_G = invη->begin \n  G = tensor([1/Δt+2/3*μ*invη -μ/3*invη 0.0\n    -μ/3*invη 1/Δt+2/3*μ*invη 0.0\n    0.0 0.0 1/Δt+μ*invη])\n  invG = inv(G)\nend\ninvG = map(fn_G, invη)\nS = tensor([2μ/Δt+λ/Δt λ/Δt 0.0\n    λ/Δt 2μ/Δt+λ/Δt 0.0\n    0.0 0.0 μ/Δt])\nH = invG*S\n\n\nM = compute_fem_mass_matrix1(m, n, h)\nZero = spzeros((m+1)*(n+1), (m+1)*(n+1))\nM = SparseTensor([M Zero;Zero M])\n\nK = compute_fem_stiffness_matrix(H, m, n, h)\nC = a*M + b*K # damping matrix \nL = M + γ*Δt*C + β*Δt^2*K\nL, Lbd = fem_impose_Dirichlet_boundary_condition_experimental(L, bdnode, m, n, h)\n\n\na = TensorArray(NT+1); a = write(a, 1, zeros(2(m+1)*(n+1))|>constant)\nv = TensorArray(NT+1); v = write(v, 1, zeros(2(m+1)*(n+1))|>constant)\nd = TensorArray(NT+1); d = write(d, 1, zeros(2(m+1)*(n+1))|>constant)\nU = TensorArray(NT+1); U = write(U, 1, zeros(2(m+1)*(n+1))|>constant)\nSigma = TensorArray(NT+1); Sigma = write(Sigma, 1, zeros(4*m*n, 3)|>constant)\nVarepsilon = TensorArray(NT+1); Varepsilon = write(Varepsilon, 1,zeros(4*m*n, 3)|>constant)\n\n\nForces = zeros(NT, 2(m+1)*(n+1))\nfor i = 1:NT\n  T = eval_f_on_boundary_edge((x,y)->0.1, bdedge, m, n, h)\n\n  # if i>=NT÷2\n  #   T *= 0.0\n  # end\n  T = [-T T]\n#   T = [T T]\n  rhs = compute_fem_traction_term(T, bdedge, m, n, h)\n\n#   if i*Δt>0.5\n#     rhs = zero(rhs)\n#   end\n  Forces[i, :] = rhs\nend\nForces = constant(Forces)\n\nfunction condition(i, tas...)\n  i <= NT\nend\n\nfunction body(i, tas...)\n  a_, v_, d_, U_, Sigma_, Varepsilon_ = tas\n  a = read(a_, i)\n  v = read(v_, i)\n  d = read(d_, i)\n  U = read(U_, i)\n  Sigma = read(Sigma_, i)\n  Varepsilon = read(Varepsilon_, i)\n\n  res = batch_matmul(invG/Δt, Sigma)\n  F = compute_strain_energy_term(res, m, n, h) - K * U\n  rhs = Forces[i] - F\n\n  td = d + Δt*v + Δt^2/2*(1-2β)*a \n  tv = v + (1-γ)*Δt*a \n  rhs = rhs - C*tv - K*td\n  rhs = scatter_update(rhs, constant([bdnode; bdnode.+(m+1)*(n+1)]), constant(zeros(2*length(bdnode))))\n\n\n  ## alpha-scheme\n  a = L\\rhs # bottleneck  \n  d = td + β*Δt^2*a \n  v = tv + γ*Δt*a \n  U_new = d\n\n  Varepsilon_new = eval_strain_on_gauss_pts(U_new, m, n, h)\n\n  res2 = batch_matmul(invG * S, Varepsilon_new-Varepsilon)\n  Sigma_new = res +  res2\n\n  i+1, write(a_, i+1, a), write(v_, i+1, v), write(d_, i+1, d), write(U_, i+1, U_new),\n        write(Sigma_, i+1, Sigma_new), write(Varepsilon_, i+1, Varepsilon_new)\nend\n\n\ni = constant(1, dtype=Int32)\n_, _, _, _, u, sigma, varepsilon = while_loop(condition, body, \n                  [i, a, v, d, U, Sigma, Varepsilon])\n\nU = stack(u)\nSigma = stack(sigma)\nVarepsilon = stack(varepsilon)\n\nif mode!=\"data\"\n  data = matread(\"viscoelasticity.mat\")\n  global Uval,Sigmaval, Varepsilonval = data[\"U\"], data[\"Sigma\"], data[\"Varepsilon\"]\n  U.set_shape((NT+1, size(U, 2)))\n  idx0 = 1:4m*n\n  Sigma = map(x->x[idx0,:], Sigma)\n  global loss = sum((U[:, obs_idx] - Uval[:, obs_idx])^2) \nend\n\nif !isdir(string(stepsize));mkdir(string(stepsize)); end\nsess = Session(); init(sess)\n\ncb = (v, i, l)->begin\n  println(\"[$i] loss = $l\")\n  if i==\"true\" || mod(i,20)==0\n    inv_eta = v[1]\n    matwrite(\"$stepsize/eta$i.mat\", Dict(\"eta\"=>inv_eta))\n  end\nend\n\nif mode==\"data\"\n  Uval,Sigmaval, Varepsilonval = run(sess, [U, Sigma, Varepsilon])\n  matwrite(\"viscoelasticity.mat\", Dict(\"U\"=>Uval, \"Sigma\"=>Sigmaval, \"Varepsilon\"=>Varepsilonval))\n\n  # p = visualize_von_mises_stress(Sigmaval[1:5:end,:,:], m, n, h); saveanim(p, \"space_s.gif\")\n  # p = visualize_displacement(Uval[1:5:end,:], m, n, h); saveanim(p, \"space_u.gif\")\n\n  visualize_inv_eta(run(sess, invη), \"true\")\n  # cb([run(sess, invη)], \"true\", 0.0)\n  error(\"Stop!\")\nend\n\nv_ = []\ni_ = []\nl_ = []\n\n\nloss_ = BFGS!(sess, loss*1e10, vars=[invη], callback=cb, var_to_bounds=Dict(invη_var=>(0.1,2.0)))\n","category":"page"},{"location":"inv_viscoelasticity_nonparametric/#Inverse-Modeling-for-Nonparametric-Viscoelasticity","page":"Inverse Modeling for Nonparametric Viscoelasticity","title":"Inverse Modeling for Nonparametric Viscoelasticity","text":"","category":"section"},{"location":"inv_viscoelasticity_nonparametric/","page":"Inverse Modeling for Nonparametric Viscoelasticity","title":"Inverse Modeling for Nonparametric Viscoelasticity","text":"In this section, we consider learning a nonparametric viscoelasticity model. We assume the Maxwell model for the material. However, the viscosity parameter is assumed to be a function of the stress","category":"page"},{"location":"inv_viscoelasticity_nonparametric/","page":"Inverse Modeling for Nonparametric Viscoelasticity","title":"Inverse Modeling for Nonparametric Viscoelasticity","text":"eta(sigma) = 10 + frac51+1000 (sigma_xx^2 + sigma_yy^2 + sigma_xy^2) tag2","category":"page"},{"location":"inv_viscoelasticity_nonparametric/","page":"Inverse Modeling for Nonparametric Viscoelasticity","title":"Inverse Modeling for Nonparametric Viscoelasticity","text":"This relation makes the constitutive equation (1) in this section nonlinear. ","category":"page"},{"location":"inv_viscoelasticity_nonparametric/","page":"Inverse Modeling for Nonparametric Viscoelasticity","title":"Inverse Modeling for Nonparametric Viscoelasticity","text":"For the numerical simulation, we fix the bottom side of the computational domain and impose external pressure on the right hand side. Traction-free conditions are assumed for all other sides. ","category":"page"},{"location":"inv_viscoelasticity_nonparametric/","page":"Inverse Modeling for Nonparametric Viscoelasticity","title":"Inverse Modeling for Nonparametric Viscoelasticity","text":"To model the constitutive relation (2), we approximate eta by a neural network. The neural network takes the 3-dimensional stress as input and outputs a 1-dimensional viscosity parameter. The alpha-scheme is used for the numerical simulation for stability. Using a robust and stable numerical scheme is very important in these NN-FEM hybrid models because the neural network might yield an ill-conditioned relation and causes numerical instabilities.","category":"page"},{"location":"inv_viscoelasticity_nonparametric/","page":"Inverse Modeling for Nonparametric Viscoelasticity","title":"Inverse Modeling for Nonparametric Viscoelasticity","text":"The observation data are the x-direction displacement on the surface.  ","category":"page"},{"location":"inv_viscoelasticity_nonparametric/","page":"Inverse Modeling for Nonparametric Viscoelasticity","title":"Inverse Modeling for Nonparametric Viscoelasticity","text":"We have tried different neural network architectures with different activation functions, widths, and depths and found that different architectures all perform reasonably well. Here we present the result for a fully-connected neural network with 3 hidden layers, 20 neurons per layer, and with the tanh activation function.   The following plots show both the x-direction displacement and the stresses of the left top point. The dashed line show the exact displacement","category":"page"},{"location":"inv_viscoelasticity_nonparametric/","page":"Inverse Modeling for Nonparametric Viscoelasticity","title":"Inverse Modeling for Nonparametric Viscoelasticity","text":"Initial Learned\n(Image: disp0) (Image: disp8)","category":"page"},{"location":"inv_viscoelasticity_nonparametric/","page":"Inverse Modeling for Nonparametric Viscoelasticity","title":"Inverse Modeling for Nonparametric Viscoelasticity","text":"We also show the movies of displacement and stress changes using the learned constitutive relations","category":"page"},{"location":"inv_viscoelasticity_nonparametric/","page":"Inverse Modeling for Nonparametric Viscoelasticity","title":"Inverse Modeling for Nonparametric Viscoelasticity","text":"Displacement Stress\n(Image: disp_scattered_u_nn08) (Image: disp_s_nn8)","category":"page"}]
}
